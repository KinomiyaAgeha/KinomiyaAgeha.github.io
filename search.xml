<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>「图论学习笔记」#2 2-SAT 问题 (1)</title>
    <url>/2022/notes-graph-2-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="sat">2-SAT</h2>
<p>2-SAT 属于 k-SAT 问题的一种。不幸的是，对于 <span
class="math inline">\(k &gt; 2\)</span>，都是 NPC 问题。</p>
<span id="more"></span>
<p>给定 <span class="math inline">\(n\)</span> 个变量，每个变量 <span
class="math inline">\(A_i \in \{0,1\}\)</span>。接着给定 <span
class="math inline">\(m\)</span> 个条件，每个条件形如 <span
class="math display">\[
A_i=0/1 \text{ or } A_j=0/1
\]</span> 求 <span class="math inline">\(n\)</span>
个变量的合法赋值，满足全部 <span class="math inline">\(m\)</span>
个条件。</p>
<h2 id="求解">求解</h2>
<p>将条件转化为：若 <span class="math inline">\(A_i=p\)</span>，则 <span
class="math inline">\(A_j=q\)</span>，其中 <span
class="math inline">\(p,q \in \{0,1\}\)</span>。</p>
<p>举个例子，条件是 <span class="math inline">\(A_1 = 1\)</span> 或者
<span class="math inline">\(A_3 = 0\)</span>。</p>
<ol type="1">
<li>如果 <span class="math inline">\(A_1 = 0\)</span>，则 <span
class="math inline">\(A_3\)</span> 必定为 0。</li>
<li>如果 <span class="math inline">\(A_3 = 1\)</span>，那么 <span
class="math inline">\(A_1\)</span> 一定为 1。</li>
</ol>
<p>所以把 <span class="math inline">\(n\)</span> 个节点拆成 <span
class="math inline">\(2n\)</span> 个节点，使 <span
class="math inline">\(A_i\)</span> 对应节点为 <span
class="math inline">\(i\)</span> 与 <span
class="math inline">\(i+n\)</span>，分别对应以上两种限制条件。</p>
<p>具体做法是，从 <span class="math inline">\(i+p \cdot n\)</span> 向
<span class="math inline">\(j + q \cdot n\)</span> 连一条有向边，从
<span class="math inline">\(j + (1-p) \cdot n\)</span> 向 <span
class="math inline">\(i+(1-q) \cdot n\)</span> 连一条有向边。注意 <span
class="math inline">\(p,q\)</span>
都是把<strong>条件中的值取反</strong>。</p>
<p>前者是原命题，后者是它的逆否命题。</p>
<h3 id="dfs">DFS</h3>
<p>这个 DFS 的算法，代码短的同时还容易构造字典序最小解，但是复杂度为
<span class="math inline">\(O(n \cdot (n+m))\)</span>，过高。</p>
<p><del>所以为什么在洛谷模板题，DFS比Tarjan还快</del></p>
<p>具体流程</p>
<ol type="1">
<li>对于每个当前不确定的变量 <span
class="math inline">\(A_i\)</span>，令 <span
class="math inline">\(A_i=0\)</span>，然后 DFS 访问相连的点。</li>
<li>检查如果会导致一个 <span class="math inline">\(j\)</span> 与 <span
class="math inline">\(j&#39;\)</span> 都被选，那么撤销操作，执行过程
3。否则令 <span class="math inline">\(A_i=0\)</span>。</li>
<li>令 <span class="math inline">\(A_i=1\)</span>，重复过程
2，如果还不行，就无解。</li>
<li>继续考虑下一个不确定的变量</li>
</ol>
<p>代码略。</p>
<h3 id="tarjan">Tarjan</h3>
<p>用 Tarjan 算法求出图中所有 SCC。如果存在 <span
class="math inline">\(i \in [1,n]\)</span>，满足 <span
class="math inline">\(i\)</span> 与 <span
class="math inline">\(i+n\)</span> 在同一个 SCC 里面，那么表明 <span
class="math inline">\(A_i\)</span> 必须赋值为 <span
class="math inline">\(p\)</span> 与 <span
class="math inline">\(1-p\)</span>，这显然是矛盾的，无解。</p>
<p>还可以构造出解。对于一个 <span
class="math inline">\(i\)</span>，选择拓扑序较大的状态更优。</p>
<p>由于 SCC 编号的顺序就是逆拓扑序，所以我们判断 SCC 编号 <span
class="math inline">\(c_i\)</span> 与 <span
class="math inline">\(c_{i+n}\)</span> 的大小。令 <span
class="math inline">\(f(i) = c_i &gt; c_{i+n}\)</span>。如果 <span
class="math inline">\(f(i)=1\)</span>，那么说明 <span
class="math inline">\(i+n\)</span>
的状态更优，对应到上面讨论的连边方法，就是令 <span
class="math inline">\(A_i\)</span> 为条件中的值。否则说明 <span
class="math inline">\(i\)</span> 状态更优，就是令 <span
class="math inline">\(\ \neg A_i\)</span>，与条件状态取反。</p>
<p>然后 <span class="math inline">\(f(i)\)</span> 就是解中 <span
class="math inline">\(A_i\)</span> 的取值了。</p>
<p>复杂度 <span class="math inline">\(O(n+m)\)</span></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> scc<span class="token punctuation">,</span> top<span class="token punctuation">,</span> num<span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> stk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> xv<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> yv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// xv,yv是条件中x,y的值</span>
	<span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token operator">!</span>xv<span class="token operator">*</span>n<span class="token punctuation">,</span>y<span class="token operator">+</span>yv<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token operator">!</span>yv<span class="token operator">*</span>n<span class="token punctuation">,</span>x<span class="token operator">+</span>xv<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>num<span class="token punctuation">,</span> stk<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">tarjan</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
			low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token operator">++</span>scc<span class="token punctuation">;</span>
		<span class="token keyword">int</span> y<span class="token punctuation">;</span>
		<span class="token keyword">do</span> y<span class="token operator">=</span>stk<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>scc<span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>c<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>c<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="题目">题目</h2>
<p><a href="https://www.luogu.com.cn/problem/P4171">满汉全席</a></p>
<p>板子。</p>
<p>汉式看作取值为 1，满式看作取值为 0。判断 2-SAT 是否有解。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SET</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">205</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">2005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> num<span class="token punctuation">,</span> top<span class="token punctuation">,</span> scc<span class="token punctuation">,</span> stk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> xv<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> yv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token operator">!</span>xv<span class="token operator">*</span>n<span class="token punctuation">,</span>y<span class="token operator">+</span>yv<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token operator">!</span>yv<span class="token operator">*</span>n<span class="token punctuation">,</span>x<span class="token operator">+</span>xv<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>num<span class="token punctuation">,</span> stk<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">tarjan</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
			low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> y<span class="token punctuation">;</span>
		<span class="token operator">++</span>scc<span class="token punctuation">;</span>
		<span class="token keyword">do</span> y<span class="token operator">=</span>stk<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>scc<span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cnt<span class="token operator">=</span>top<span class="token operator">=</span>scc<span class="token operator">=</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">SET</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SET</span><span class="token punctuation">(</span>dfn<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SET</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SET</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">!=</span><span class="token string">'h'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">!=</span><span class="token string">'m'</span><span class="token punctuation">)</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	b<span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>c<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token punctuation">,</span> xv<span class="token punctuation">,</span> y<span class="token punctuation">,</span> yv<span class="token punctuation">;</span>
		<span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>xv<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>yv<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">addedge</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>xv<span class="token punctuation">,</span>y<span class="token punctuation">,</span>yv<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token string">"GOOD"</span><span class="token operator">:</span><span class="token string">"BAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>T<span class="token operator">--</span><span class="token punctuation">;</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/UVA11294">Wedding</a></p>
<p>翻译（复制的）</p>
<blockquote>
<p>有N-1对夫妻参加一个婚宴，所有人都坐在一个长长的餐桌左侧或者右侧，新郎和新娘面做面坐在桌子的两侧。</p>
<p>由于新娘的头饰很复杂，她无法看到和她坐在同一侧餐桌的人，只能看到对面餐桌的人。</p>
<p>任意一对夫妻不能坐在桌子的同侧，另外有m对人有通奸关系，而新娘不希望看到两个有通奸关系人坐在他的对面，问如何安排这些座位</p>
</blockquote>
<p>假设所有妻子和新娘坐在一侧，所有丈夫和新郎坐在一侧，如果没有通奸关系的限制，显然是合法的。</p>
<p>如果两人 <span class="math inline">\((A,B)\)</span>
有通奸关系，那么令 w 为 1，表示和新娘同侧，h 为 2，表示和新郎同侧。<span
class="math inline">\(i \in [1,n]\)</span> 为妻子，<span
class="math inline">\(i&#39; \in [n+1,2n]\)</span> 为丈夫。</p>
<p>如果 <span class="math inline">\(A\)</span> 在新娘一侧，那么 <span
class="math inline">\(B\)</span> 一定在新郎一侧，从而 <span
class="math inline">\(B\)</span>
的配偶一定在新娘一侧，反之亦然。这样通奸关系就转化成了条件，可以直接根据这个连边，表示一定在同侧的人。然后跑
2-SAT。</p>
<p>一开始本人也想不太明白，最好举几个例子。</p>
<p>最后要注意编号从 0 开始。新娘要和新郎连边。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SET</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">8e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> top<span class="token punctuation">,</span> scc<span class="token punctuation">,</span> num<span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> stk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> xv<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> yv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token operator">!</span>xv<span class="token operator">*</span>n<span class="token punctuation">,</span>y<span class="token operator">+</span>yv<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token operator">!</span>yv<span class="token operator">*</span>n<span class="token punctuation">,</span>x<span class="token operator">+</span>xv<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>num<span class="token punctuation">,</span> stk<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">tarjan</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
			low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> y<span class="token punctuation">;</span>
		<span class="token operator">++</span>scc<span class="token punctuation">;</span>
		<span class="token keyword">do</span> y<span class="token operator">=</span>stk<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>scc<span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> c<span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>
	b<span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cnt<span class="token operator">=</span>scc<span class="token operator">=</span>num<span class="token operator">=</span>top<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">SET</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SET</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SET</span><span class="token punctuation">(</span>dfn<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SET</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> xv<span class="token punctuation">,</span> yv<span class="token punctuation">;</span>
		<span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>xv<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>yv<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">addedge</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>xv<span class="token punctuation">,</span>y<span class="token punctuation">,</span>yv<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>c<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"bad luck"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>c<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%dw "</span><span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%dh "</span><span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>n<span class="token operator">&amp;&amp;</span>m<span class="token punctuation">)</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="to-be-continued">To Be Continued</h2>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>2-SAT</tag>
      </tags>
  </entry>
  <entry>
    <title>作战，可能要失败了</title>
    <url>/2022/before-failed/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>中考出成绩了,名次 <span class="math inline">\(\in
[102,123]\)</span>。</p>
<p>似乎是还远远不够啊。</p>
<p>被告知去参加测试，时间未定。</p>
<span id="more"></span>
<p>测试，嗯，说白了就是比赛。如果不是为了比赛选拔水平高的选手，又怎么会大费周章搞个“测试”？</p>
<p>准备好被吊打，垫底，然后落榜了。</p>
<p> </p>
<p>其实后面已经写好啦，到了那时候再发出来。</p>
<p>没办法啊╮（╯＿╰）╭，我就是这种人。</p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>雨き声残響</title>
    <url>/2021/ame-koe/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>自分より下手くそな人</p>
<p>寻找比自己更没用的人</p>
<p>探して浸るの優越感</p>
<p>沉浸于这般的优越感之中</p>
<p>でもその度ちょっと自分を嫌って</p>
<p>但每当这样做就会有点变得讨厌自己</p>
<span id="more"></span>
<p>次元遡って現実逃避</p>
<p>回遡次元逃避现实</p>
<p>でも良いんじゃない？</p>
<p>但这样也不错吧？</p>
<p>別に良いんじゃない？</p>
<p>就这样不就好了吗？</p>
<p>無理に強がらなくても良いんじゃない？</p>
<p>即使不勉强去逞强也可以吧？</p>
<p>下を見て強くなれるのも</p>
<p>向下望就能变得坚强</p>
<p>また人だからさ。</p>
<p>因为我也不过是人啊</p>
<p> </p>
<p>五月蠅い もううざい くらいにCryを掻き消す様な</p>
<p>吵死了 真的麻烦死了 如此 将哭泣声 消抹掉似的</p>
<p>世界なら 抗ってたいのに</p>
<p>这般的世界 我明明就想要去与之抵抗</p>
<p>降り出した空の泣き声は透明で</p>
<p>降雨的天空的 哭泣声却是透明的</p>
<p>「わかんない、もうわかんないよ！」を何遍も。</p>
<p>「我不懂啊,我不管了啊!」无数次这样说到。</p>
<p> </p>
<p>僕達は存在証明に 毎日一生懸命で</p>
<p>我们为了存在的证明 每天都拼命过活</p>
<p>こんな素晴らしい世界で まだ生きる意味を探してる</p>
<p>在如此美妙的世界 继续去探求活着的意义</p>
<p>そりゃそうだろだって人間は 希望無しでは生きられないからさ</p>
<p>因为说着「那是理所当然的吧」的人们 没有了希望就活不下去了啊</p>
<p>みんな 心のどっかで 来世を</p>
<p>大家在心裹某处 都是</p>
<p>信じてる。</p>
<p>深信着来世的</p>
<p>昨日の僕守る為に 笑うくらいなら</p>
<p>若然欢笑 只是为了守护昨天的我</p>
<p>泣いたっていいだろ？ ねぇ</p>
<p>那即使我哭了也没关系吧？ 呐</p>
<p>止まないの雨が 夏空を鮮明に描いたって</p>
<p>不止的雨 即使鲜明地描绘出夏日的天空</p>
<p>僕達は不完全で</p>
<p>我们亦是不完美而</p>
<p> </p>
<p>未完成 な</p>
<p>不成熟的呢</p>
]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>VOCALOID</tag>
      </tags>
  </entry>
  <entry>
    <title>AT5759 ThREE 题解</title>
    <url>/2022/at5759-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>这题构造一下链和菊花的情况会理解地更透彻一些。</p>
<p>“三步走”战略啊不，距离为 3
的点，它们所在的深度肯定是不同的。也就是说，我们能把整棵树按照节点深度奇偶性黑白染色，分成两个集合，距离为
3 的点一定在不同的集合里。</p>
<span id="more"></span>
<p>对于 <span class="math inline">\((i,j)\)</span>，要求 <span
class="math inline">\(p_i \cdot p_j \equiv 0 \; (\bmod 3)\)</span> 或者
<span class="math inline">\(p_i + p_j \equiv 0 \; (\bmod
3)\)</span>，又可以按照节点编号模 3 的结果来分成 3 个集合。其中模三为 0
的那个集合是最特殊的，因为其中的任意一个点和其他所有点组成的点对都是合法的。</p>
<p>为了方便，称 n 类点 表示模 3 为 n 的点。</p>
<p>很容易知道 0 类点的个数为 <span class="math inline">\(\lfloor
\frac{n}{3}\rfloor\)</span>，接下来就是大胆构造，<del>绝不证明</del>。</p>
<p>如果黑白某个集合节点个数小于等于 <span class="math inline">\(\lfloor
\frac{n}{3}\rfloor\)</span>，那么如果把所有的 0
类点放到这个集合里，另一个集合无论怎么选，都是一组合法解，因为乘积均为 3
的倍数。</p>
<p>但是如果每个集合都大于 <span class="math inline">\(\lfloor
\frac{n}{3}\rfloor\)</span> 呢？</p>
<p>注意到 1 类点和 2 类点，它们的和模 3 为 0，即 3
的倍数。所以一个集合全放 1 类点，一个集合全放 2 类点，0
类点随便放——因为它们和任何点组成的点对都是合法的。</p>
<p>实现还是 STL 好用。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pb</span> <span class="token expression">push_back</span></span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> col<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// c存节点黑白染色，v存模3</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> fr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    col<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>col<span class="token punctuation">[</span>fr<span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>col<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 按照深度奇偶黑白染色</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> y<span class="token operator">:</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">!=</span>fr<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 取较小的集合</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>n<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> cc<span class="token operator">:</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>cc<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 全放0类点</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> cc<span class="token operator">:</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        	<span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>cc<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>cc<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token keyword">else</span> p<span class="token punctuation">[</span>cc<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 随便放</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> cc<span class="token operator">:</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>cc<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>cc<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 分别放1类点和0类点，不足用0类点补齐</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> cc<span class="token operator">:</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        	<span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>cc<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>cc<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1083E The Fair Nut and Rectangles 题解</title>
    <url>/2021/cf1083e-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>考虑 DP。</p>
<p>DP
需要一定的顺序。因为给出的矩形没有包含的关系，所以我们按照每个矩形右上角点的横坐标
<span class="math inline">\(x\)</span> 递增排序，那么纵坐标 $ y$
一定是递减排序的。</p>
<span id="more"></span>
<p>设 <span class="math inline">\(S_i = x_i \times y_i\)</span>。</p>
<p>因为每个矩形都有选与不选两种选择，所以设 $ f(i)$ 为在排序后的 <span
class="math inline">\([1,i]\)</span> 中，必须选择第 <span
class="math inline">\(i\)</span>
个矩形获得的最大收益，也就是选出的矩形面积之并减去代价。</p>
<p>初始值为 <span class="math inline">\(f(i) = S_i-a_i\)</span>。</p>
<p>因为状态中只限制了选择第 <span class="math inline">\(i\)</span>
个，而矩形的选择是没有限制的。所以转移时找到 <span
class="math inline">\(j \in [1,i)\)</span>，用选择 <span
class="math inline">\(j\)</span> 的最大收益 <span
class="math inline">\(f(j)\)</span> 选择 <span
class="math inline">\(i\)</span> 的初始收益并且减去二者之交。或者说是
<span class="math inline">\(f(j)\)</span> 加上 <span
class="math inline">\(S_i \cup S_j\)</span> 减去代价。 <span
class="math display">\[
f(i)=\max_{j \in [1,i)}{ \{ f(j)+ S_i - a_i - S_i \cap S_j \} }
\]</span> 有一个问题是，难道 <span class="math inline">\(i\)</span>
不会和之前选择的一些矩形有重叠部分吗？在下图中，设宽为黑色的是 <span
class="math inline">\(k\)</span>，红色的是 <span
class="math inline">\(j\)</span>，蓝色的是 <span
class="math inline">\(i\)</span>，满足 <span class="math inline">\(k
&lt; j &lt; i\)</span>。那么计算 <span
class="math inline">\(f(j)\)</span> 的时候必然已经减去了 <span
class="math inline">\(S_j \cap S_k\)</span>，得到了 <span
class="math inline">\(S_j \cup S_k\)</span>。排序后，<span
class="math inline">\(S_i \cap S_j\)</span> 一定包含了 <span
class="math inline">\(S_i \cap S_k\)</span>，也就是 <span
class="math inline">\(S_i \cap S_j = S_i \cap (S_j \cup
S_k)\)</span>，从而 <span class="math inline">\(S_i\)</span> 与 <span
class="math inline">\(f(j)\)</span> 中选出的矩形面积之并就等于 <span
class="math inline">\(f(j)+S_i - S_i \cap
S_j\)</span>。也就是不会出现这种问题。</p>
<p><img data-src="https://s2.loli.net/2022/06/28/vlLTqKgW8mos6nf.png" /></p>
<p>答案为</p>
<p><span class="math display">\[
\max_{1 \le i \le n}\{ f(i)  \}
\]</span></p>
<p>复杂度为 $ O(n^2)$。</p>
<p>复杂度过高，考虑优化。</p>
<p>由于我们已经将矩形排序，所以</p>
<p><span class="math display">\[
\forall j \le i \quad x_i \ge x_j,y_i \le y_j
\]</span></p>
<p>即</p>
<p><span class="math display">\[
S_i \cup S_j = x_j \times y_i
\]</span></p>
<p>所以原方程可化简为 <span class="math display">\[
f(i) = \max_{ 1 \le j &lt; i } { \{ f(j)+ x_iy_i - a_i -x_jy_i \} }
\]</span> 按照套路去掉 <span class="math inline">\(\large \max\)</span>
函数，移项得 <span class="math display">\[
f(j)=y_ix_j +f(i) - x_iy_i + a_i
\]</span> 即</p>
<p><span class="math display">\[
\begin{cases}
y=f(j) \\
k=y_i \\
x=x_j \\
b= f(i)-x_iy_i+a_i
\end{cases}
\]</span></p>
<p>对应到坐标系里即为：</p>
<p>每个决策点为 $ (x_j,f(j))$，其斜率 $ y_i$
单调递减，所以要维护一个上凸壳。</p>
<p>由于斜率 <span class="math inline">\(y_i\)</span> 单调递减
，所以合法决策的斜率一定小于 <span
class="math inline">\(y_i\)</span>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">X</span><span class="token expression"><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Y</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Squ</span> <span class="token punctuation">&#123;</span> ll x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>Squ a<span class="token punctuation">,</span>Squ b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>y<span class="token operator">></span>b<span class="token punctuation">.</span>y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">double</span> <span class="token function">calc</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">X</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">X</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token number">1.0</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">Y</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">Y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">X</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">1e9</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>w<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">*</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token operator">&amp;&amp;</span><span class="token function">calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">++</span>l<span class="token punctuation">;</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>w<span class="token punctuation">[</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token operator">&amp;&amp;</span><span class="token function">calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token function">calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">--</span>r<span class="token punctuation">;</span>
        q<span class="token punctuation">[</span><span class="token operator">++</span>r<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1061C Multiplicity 题解</title>
    <url>/2021/CF1061C-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a
href="https://codeforces.com/problemset/problem/1061/C">link</a></p>
<p>相信大家都能秒推这道题的方程。</p>
<span id="more"></span>
<p>状态：设 $ f(i,j)$ 为原序列中前 <span
class="math inline">\(i\)</span> 个数选出了 <span
class="math inline">\(j\)</span> 个的方案数。</p>
<p>转移是显然的。 <span class="math display">\[
f(i,j)=
\begin{cases}
f(i-1,j)+f(i-1,j-1) \quad j \mid a_i\\
f(i-1,j) \quad j \nmid a_i
\end{cases}
\]</span> 然而这样的复杂度过高，数组也开不下。</p>
<p>考虑只有 <span class="math inline">\(j \mid a_i\)</span>
时状态才会被更新，否则只会将上一个 <span
class="math inline">\(i\)</span> 的状态继承过来。</p>
<p>所以对于每个 <span
class="math inline">\(a_i\)</span>，能够影响方案数的仅仅只有它的约数。</p>
<p>将每个 <span class="math inline">\(a_i\)</span> 分解，决策集合为
<span class="math inline">\(a_i\)</span> 的约数集合。</p>
<p>然后用滚动数组优化掉第一维。</p>
<p>设 $ f(i)$ 为长度为 <span class="math inline">\(i\)</span>
的序列的方案数，由于少了一维，所以转移时要累加所有状态，同时也不需要从第
<span class="math inline">\(i-1\)</span> 个数继承状态了。</p>
<p>但是我这样的菜比无法写出优化后的转移方程。</p>
<p>设 <span class="math inline">\(j\)</span> 为 <span
class="math inline">\(a_i\)</span> 的约数，将 <span
class="math inline">\(f(j-1)\)</span> 累加到 $ f(j)$ 中。</p>
<p>大概就是这样。</p>
<p> </p>
<p>从「 <span class="math inline">\(a_i\)</span> 的约数 <span
class="math inline">\(j\)</span> 对长度为 <span
class="math inline">\(j\)</span>
的序列的方案数产生的贡献」考虑的话，我很难明白转移。</p>
<p>所以从 <span class="math inline">\(a_i\)</span> 产生的贡献考虑。</p>
<p>在原来朴素的转移方程中，对于 <span
class="math inline">\(a_i\)</span>，只会在每个 <span
class="math inline">\(j\)</span>
处更新状态，它对总方案数的贡献是更新的这一部分。</p>
<p>这样新状态的转移就很好理解了。</p>
<p> </p>
<p>这种直接省略一维的滚动数组要注意循环顺序，确保决策从上一轮转移而来。</p>
<p>最后累加答案。</p>
<p>这道题启示我滚动数组优化仅仅是节省了空间，求解问题仍要从原状态、决策、方程考虑。DP
问题的求解要抓住并分析问题的本质。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span> mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> dv<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">DIV</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        dv<span class="token punctuation">[</span><span class="token operator">++</span>y<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token operator">!=</span>x<span class="token punctuation">)</span> dv<span class="token punctuation">[</span><span class="token operator">++</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token operator">/</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        y<span class="token operator">=</span><span class="token function">DIV</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>y<span class="token punctuation">;</span>j<span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>dv<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+=</span>f<span class="token punctuation">[</span>dv<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">(</span>z<span class="token operator">+=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>线性DP</tag>
      </tags>
  </entry>
  <entry>
    <title>CF451E Devu and Flowers 题解</title>
    <url>/2021/solution-cf451e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://www.luogu.com.cn/problem/CF451E">link</a></p>
<p>根据容斥原理，得到多重集的组合数。</p>
<p>从 $ S={n_1 a_1,n_k a_k}$ 任取 $ r (r_{i=1}^k n_i)$
个元素组成一个多重集的方案数为 <span class="math display">\[
C^{k-1}_{k+r-1}-\sum_{i=1}^k{C^{k-1}_{k+r-n_i-2}}+\sum_{1\le i&lt;j \le
k}{C^{k-1}_{k+r-n_i-n_j-3}}- \cdots + (-1)^k
C^{k-1}_{k+r-\sum_{i=1}^k{n_i-(k+1)}}
\]</span> 好长啊c</p>
<span id="more"></span>
<p>本题套进去就行了。</p>
<p>本题重点在实现。</p>
<p>上式一共 <span class="math inline">\(2^k\)</span>
项，我们可以将它压缩成一个整数。</p>
<p>题目中的 $ s$ 较大，我们可以用 $ lucas$ 定理搞一下。</p>
<p>由于 <span class="math display">\[
C^{n-1}_{n+m-1}= \frac{P^{n-1}_{n+m-1}}{(n-1)!}
\]</span> 所以可先计算上式，然后用逆元搞一下，<span
class="math inline">\(\large n\)</span> 很小，可以直接递推。</p>
<p>实现的时候注意每一项减去的值就行了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> ll p<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inv<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll <span class="token function">C</span><span class="token punctuation">(</span>ll y<span class="token punctuation">,</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>y<span class="token operator">&lt;</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    y<span class="token operator">%=</span>p<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>y<span class="token operator">||</span><span class="token operator">!</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    ll i<span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>x<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">(</span>z<span class="token operator">*=</span><span class="token punctuation">(</span>y<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">(</span>z<span class="token operator">*=</span>inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>
    <span class="token keyword">return</span> z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">;</span>
    inv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>inv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-</span>p<span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>inv<span class="token punctuation">[</span>p<span class="token operator">%</span>i<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span>ans<span class="token operator">+=</span><span class="token function">C</span><span class="token punctuation">(</span>n<span class="token operator">+</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            ll y<span class="token operator">=</span>n<span class="token operator">+</span>m<span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">>></span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">++</span>z<span class="token punctuation">,</span> y<span class="token operator">-=</span>f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            y<span class="token operator">-=</span>z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">&amp;</span><span class="token number">1ll</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ans<span class="token operator">-=</span><span class="token function">C</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%=</span>p<span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>ans<span class="token operator">+=</span><span class="token function">C</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>Dec. 4th Sat 2021</title>
    <url>/2021/dec4th/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>Dec. 4th Sat 2021</p>
<p>20:xx</p>
<p>好无聊</p>
<p>没什么可做的事了</p>
<p>没什么有意义的事了</p>
<span id="more"></span>
<p>打开游戏便是心乱如麻</p>
<p>更拿不起笔去写作业</p>
<p>在摸鱼与应付中考间循环往复的单调生活</p>
<p>真是让人疲于应对啊</p>
<p> </p>
<p>赶紧结束吧</p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>SOS</tag>
      </tags>
  </entry>
  <entry>
    <title>2022.1.1</title>
    <url>/2022/mz/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>变得魔怔本非我意</p>
<p>可是</p>
<p>起床吃饭上课吃饭上课吃饭写作业睡觉</p>
<p>这种生活，换做谁都会疲于应对啊</p>
<p>成为一个魔怔人</p>
<p>真的可以逃避现实</p>
<p>我竟然总结出了这样一个谬论：</p>
<p>如果变得魔怔，那么就彻底地忘记现实，彻底地沉睡在自己的幻想中</p>
<p>如此没有希望的生活，只有变得魔怔，才能微微唤醒自己啊</p>
<span id="more"></span>
<p> </p>
<p>承认自己是个SB，胡思乱想，胡言乱语</p>
<p>然后被别人认定为SB</p>
<p>抛开一切形象，用极端的方式表达内心</p>
<p>这样真的能快乐起来吗？</p>
<p>但好像真的能减少痛苦呢</p>
<p> </p>
<p>一个一本正经地说“我是SB”的人，一个做着扭曲表情的人，一个与人争论“世界上所有的人，要么是我，要么不是我”的人，一个与人探讨“shzy核心价值观正确与否及某某游戏违背shzy核心价值观“的人，一个满嘴阶级革命与资本的人，一个在宿舍里卖力地跳两只老虎爱跳舞的人，一个终日虚度光阴，所期待的只有睡大觉的人。</p>
<p>难道他是快乐的吗？</p>
<p>难道他有希望吗？</p>
<p>但可以肯定的是，他并不那么痛苦。因为他只想逃离现实罢了。</p>
<p> </p>
<p>为什么一定要魔怔呢？</p>
<p>因为不魔怔只会带给他痛苦。</p>
<p>他做不到向某些人那样，全心全意提高文化课成绩，争取年级前十。</p>
<p>因为某些人心中，只有”提高文化课成绩，进入某校某强班“。</p>
<p>因为就算他这样做了，得到的也是毫无价值的东西。</p>
<p>所以，不魔怔的他，终日被焦虑与幻想折磨着，终日想着”机会“这种渺茫的东西。</p>
<p>而魔怔，则能让他暂时放下这些东西，让废物自己融入恍恍惚惚的无聊世界。</p>
<p>既然如此，为何不魔怔呢？</p>
<p> </p>
<p>今日是2022.1.1，元旦。</p>
<p>和那帮沆瀣一气的家伙们不同</p>
<p>我可连一点希望都没有啊。</p>
<p>即使回到过去也无法改变</p>
<p>期待，然而只会受伤害</p>
<p>那么，就来睡大觉吧！</p>
<p>那么，就这么毫无意义地继续吧！</p>
<p>谁在乎呢？</p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>SOS</tag>
      </tags>
  </entry>
  <entry>
    <title>LOJ2691 Rendezvous 题解</title>
    <url>/2021/loj2691-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://loj.ac/p/2691">link</a></p>
<p>给出的是一个内向基环树森林。</p>
<p>很容易想到，如果两个点不在同一颗基环树中，则不存在合法的 <span
class="math inline">\((x,y)\)</span>。</p>
<span id="more"></span>
<p>但是怎么处理在同一颗树中的点呢？</p>
<p>我有一个大胆的想法。</p>
<p>无法直接处理 lca，是因为基环树有一个环。</p>
<p>但是如果 $ (a,b)$
两点在同一颗子树中，且该子树没有环上的边，则不影响求出 $ LCA(a,b)$。
所以，该子树应含不超过1个的环上的点。若含有，则一定是根。</p>
<p>更进一步地说，把每个环上的点看作「根」，它的子树中节点可以直接求
lca，这要我们求出它子树中每个节点的「深度」。</p>
<p>所以，如果 $ (a,b)$ 两点的「根」是同一个节点，那么只需要求出 <span
class="math inline">\(c=LCA(a,b)\)</span>，答案即为 <span
class="math inline">\(dep(a)-dep(c)\)</span> 与 <span
class="math inline">\(dep(b)-dep(c)\)</span>。</p>
<p>若 <span class="math inline">\((a,b)\)</span>
的「根」不同，那么该怎么处理呢？</p>
<p>仔细分析不难发现，在合法的解中，一定有它们与「根」的距离，即 <span
class="math inline">\(dep(a)-1\)</span> 与 $ dep(b)-1$ ，记为 $
(p,q)$</p>
<p>而剩下的部分，就是它们的「根」在环中互相到达的距离。</p>
<p>我们设 $ ord(x)$ 为环上节点 <span class="math inline">\(x\)</span>
在环上的顺序编号， $ s(x)$ 为基环树 <span
class="math inline">\(x\)</span> 环上的节点数量。</p>
<p>设 <span class="math inline">\((x,y)\)</span> 为 <span
class="math inline">\((a,b)\)</span> 两点分别的「根」，<span
class="math inline">\(z\)</span> 为它们所属的基环树编号。</p>
<p>不难发现，有两种情况。</p>
<p><span class="math inline">\((x \rightarrow y)\)</span> 距离为 <span
class="math inline">\(( ord(y)-ord(x)+s(z)) \bmod s(z)\)</span>。</p>
<p><span class="math inline">\((y \rightarrow x)\)</span> 距离为 <span
class="math inline">\((ord(x)-ord(y)+s(z)) \bmod s(z)\)</span>。</p>
<p>最后检查 $ (p+(x y),q)$ 与 <span class="math inline">\(( p,q+(y
\rightarrow x))\)</span>，选取合法解。</p>
<p> </p>
<p>那么如何实现呢？</p>
<p>先找环，每个环对应着每颗基环树。</p>
<p>标记环上的点并将其深度置为1，记录它所在的基环树编号、此树环上节点个数、环上节点的编号、将其根标记为自己。</p>
<p>$ c(x)$ 用来判断环，$ d(x)$ 记录深度，$ bel(x)$
记录所属基环树编号，<span class="math inline">\(root(x)\)</span>
记录环上的「根」。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">find_circle</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> y<span class="token operator">=</span>x<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">// 找到了环</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token comment">// 找到了已经访问过却不是环上节点的点</span>
        <span class="token comment">// 直接结束，因为这个循环一定找不到环了，不加这句TLE</span>
        c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> x<span class="token operator">=</span>to<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token operator">++</span>num<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ord<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>s<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span> bel<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token punctuation">,</span> root<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">,</span> x<span class="token operator">=</span>to<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在倍增求 lca 的时候，不断更新 <span
class="math inline">\(root(x)\)</span>，其他的就是模板。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 内向树只有一条出边</span>
    f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>to<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>to<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> root<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>root<span class="token punctuation">[</span>to<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token operator">&lt;</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 转移树上倍增</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">lca</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&lt;</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token punctuation">;</span>j<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>lg<span class="token punctuation">[</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我这里与处理了一下 $ _2x$。</p>
<p>剩下的。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> num<span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> lg<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> bel<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> root<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ord<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">ck</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">int</span> y2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> P<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">)</span><span class="token punctuation">,</span> Q<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>P<span class="token operator">&lt;</span>Q<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token operator">&lt;</span>P<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">&lt;</span>q<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">&lt;</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> x1<span class="token operator">>=</span>y1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// freopen("data_\\ran10c.in","r",stdin);</span>
    <span class="token comment">// freopen("data_\\qwq.out","w",stdout);</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    lg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> lg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> lg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>lg<span class="token punctuation">[</span>i<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">fc</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">--</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>bel<span class="token punctuation">[</span>root<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span>bel<span class="token punctuation">[</span>root<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1 -1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">continue</span> <span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>root<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> z<span class="token operator">=</span><span class="token function">lca</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> p<span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> q<span class="token operator">=</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> d1<span class="token punctuation">,</span> d2<span class="token punctuation">;</span>
            <span class="token keyword">int</span> z<span class="token operator">=</span>bel<span class="token punctuation">[</span>root<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token operator">=</span>root<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>root<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> d1<span class="token operator">=</span><span class="token punctuation">(</span>ord<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span>ord<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>s<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">,</span> d2<span class="token operator">=</span><span class="token punctuation">(</span>ord<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>ord<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>s<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ck</span><span class="token punctuation">(</span>p<span class="token operator">+</span>d1<span class="token punctuation">,</span>q<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token operator">+</span>d2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>p<span class="token operator">+</span>d1<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token operator">+</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>基环树</tag>
        <tag>最近公共祖先</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu2350 外星人 题解</title>
    <url>/2022/lg2350-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="闲话">闲话</h2>
<p>看到题面的第一眼 <span class="math display">\[
\varphi^x(N) = 1
\]</span> 地铁、老人、手机。</p>
<p>这到底是个啥？</p>
<span id="more"></span>
<p>难道是初中课本里说的那样写？ <span class="math display">\[
\sin x^2 = \sin^2 x
\]</span> 看样例，显然不是这样。
难道是导数？高阶导数确实这么写，但是欧拉函数怎么求导？</p>
<p>最后发现结果是 <span class="math display">\[
\varphi(\varphi(\ldots\varphi( N))) = 1
\]</span> 套娃 <span class="math inline">\(x\)</span> 次。</p>
<p>这不就是迭代么？出题人写错了啊！正确写法加个括号。 <span
class="math display">\[
\varphi^{(x)} (N) = 1
\]</span></p>
<h2 id="分析">分析</h2>
<p>出题人都把 <span class="math inline">\(N\)</span>
的标准分解给你了，不从这里下手简直是浑身难受啊。</p>
<p>首先明确 <span class="math inline">\(\varphi(x) =
1\)</span>，当且仅当 <span class="math inline">\(x = 1,2\)</span>。</p>
<p>然后 BZOJ 题面上有 这么个东西。 <span class="math display">\[
\varphi\left( \prod_{i=1}^N {p_i}^{c_i} \right) = \prod_{i=1}^N (p_i-1)
\cdot {p_i}^{c_i-1}
\]</span></p>
<p>懒得证明，仔细看一下就能发现是显然的。</p>
<p>从中不难看出，每一次迭代，每个质因子的次数都在不断变小，也可能会产生新的质因子。而我们的目的就是最终把他变成
1 或 2。</p>
<p>那么每一次迭代，最多能够将 1 个质因子变成
2，所以我们就要求出每个质因子在整个过程中，能够产生的 2 的个数。</p>
<p>如果质因子中没有 2，才考虑变成
1，否则就不划算了。不难发现只需要在上一步统计的基础上 +1 就行了。</p>
<p>那么怎么统计呢？</p>
<p>设 <span class="math inline">\(f(i)\)</span> 为 <span
class="math inline">\(i\)</span> 能够产生的 2 的数量。考虑递推计算。</p>
<ul>
<li><span class="math inline">\(i\)</span> 与 <span
class="math inline">\(i-1\)</span> 互质，所以 <span
class="math inline">\(f(i) = f(i-1)\)</span>。</li>
<li>若 <span class="math inline">\(a\)</span> 与 <span
class="math inline">\(b\)</span> 互质，那么 <span
class="math inline">\(a\)</span> 与 <span
class="math inline">\(b\)</span> 在 <span
class="math inline">\(ab\)</span> 中是相互独立的，互不影响，<span
class="math inline">\(f(ab) = f(a)+ f(b)\)</span>。</li>
</ul>
<p>其他情况就不便于统计了。</p>
<p>这样用线性筛，就能在 <span class="math inline">\(O(n)\)</span>
的时间内求出答案。</p>
<p>最后对于每一个质因子 <span class="math inline">\(p_i\)</span> 和次数
<span class="math inline">\(c_i\)</span>，累加 <span
class="math inline">\(f(p_i) \cdot c_i\)</span> 就好了。</p>
<h2 id="code">code</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1e5</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>cnt<span class="token operator">&amp;&amp;</span>i<span class="token operator">*</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">1e5</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			v<span class="token punctuation">[</span>i<span class="token operator">*</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
			f<span class="token punctuation">[</span>i<span class="token operator">*</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i<span class="token operator">%</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> 
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>	
			<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">--</span>ans<span class="token punctuation">;</span>
			ans<span class="token operator">+=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">*</span>y<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>欧拉函数</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu2480 古代猪文 题解</title>
    <url>/2021/lg2480-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://www.luogu.com.cn/problem/P2480">link</a></p>
<p>求 <span class="math display">\[
g^{\sum_{k \mid n}C_n^k} \bmod 9999911659
\]</span> 显然的，那一长串的东西是质数。</p>
<p>设它为 $ p$ 好了。</p>
<span id="more"></span>
<p>则有 $ =1$</p>
<p>由欧拉定理的推论 <span class="math display">\[
a^b \equiv a^{b \, \bmod \, \varphi(p)} \quad ( \bmod p)
\]</span> 其中 <span class="math inline">\(a\)</span> 与 <span
class="math inline">\(p\)</span> 互质，且 <span
class="math inline">\(b\)</span> 为任意整数。</p>
<p>可得 <span class="math display">\[
g^{\sum_{k \mid n}{C_n^k}}  \equiv g^{\sum_{k \mid n}{C_n^k \, \bmod \,
p-1}} \quad (\bmod \, p)
\]</span> 所以本题就变成了求右边的那个东西。</p>
<p>$ p-1$ 显然不是个质数。</p>
<p>不难发现<del>但很难算出</del> <span class="math display">\[
p-1=2 \times 3 \times 4679 \times 35617
\]</span> 可以用 $ O()$ 的时间枚举 $ n$ 的约数。</p>
<p>考虑到 <span class="math inline">\(n,g \le 10^9\)</span>，我们用 $
lucas$ 定理求出 $ _{k
n}{C_n^k}$，并记录它们对上述四个因子取模的结果，这样就得到了一个线性同余方程组。
<span class="math display">\[
\begin{cases}
x \equiv 2  \quad (\bmod a_1) \\
x \equiv 3  \quad (\bmod a_2) \\
x \equiv 4679  \quad (\bmod a_3) \\
x \equiv 35617  \quad (\bmod a_4) \\
\end{cases}
\]</span> 然后用中国剩余定理求出满足上述条件的最小的 <span
class="math inline">\(x\)</span>，用快速幂求 <span
class="math inline">\(g^x\)</span> 即可。</p>
<p>注意代码细节。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> ll a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4679</span><span class="token punctuation">,</span><span class="token number">35617</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> g<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">999911658ll</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fac<span class="token punctuation">[</span><span class="token number">36000</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
ll <span class="token function">fp</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R ll z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>y<span class="token punctuation">;</span>x<span class="token operator">=</span>x<span class="token operator">*</span>x<span class="token operator">%</span>p<span class="token punctuation">,</span>y<span class="token operator">>>=</span><span class="token number">1ll</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&amp;</span><span class="token number">1ll</span><span class="token punctuation">)</span> z<span class="token operator">=</span>z<span class="token operator">*</span>x<span class="token operator">%</span>p<span class="token punctuation">;</span>
    <span class="token keyword">return</span> z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll b<span class="token punctuation">,</span>ll<span class="token operator">&amp;</span> x<span class="token punctuation">,</span>ll<span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">-=</span>a<span class="token operator">/</span>b<span class="token operator">*</span>x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
ll <span class="token function">inv</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ll x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token function">exgcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">%</span>p<span class="token operator">+</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
ll <span class="token function">C</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ll z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>x<span class="token punctuation">;</span>x<span class="token operator">/=</span>p<span class="token punctuation">,</span>y<span class="token operator">/=</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ll a<span class="token operator">=</span>x<span class="token operator">%</span>p<span class="token punctuation">,</span> b<span class="token operator">=</span>y<span class="token operator">%</span>p<span class="token punctuation">;</span>
        z<span class="token operator">=</span>z<span class="token operator">*</span>fac<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token operator">*</span><span class="token function">inv</span><span class="token punctuation">(</span>fac<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token operator">*</span><span class="token function">inv</span><span class="token punctuation">(</span>b<span class="token operator">&lt;</span>a<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>fac<span class="token punctuation">[</span>b<span class="token operator">-</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token operator">%=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>fac<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">%</span>p<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">C</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token operator">!=</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">C</span><span class="token punctuation">(</span>n<span class="token operator">/</span>i<span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ll x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
        <span class="token function">exgcd</span><span class="token punctuation">(</span>p<span class="token operator">/</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>x<span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">/</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token operator">*</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">,</span> <span class="token operator">++</span>p<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">fp</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
        <tag>数论</tag>
        <tag>中国剩余定理</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷2862 Corral the Cows 题解</title>
    <url>/2021/lg2862-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://www.luogu.com.cn/problem/P2862">link</a></p>
<p>几个月前写的题解，来水了……</p>
<span id="more"></span>
<p>最小化满足条件的正方形边长，正方形边长具有单调性，显然二分答案。</p>
<p>坐标范围为 <span
class="math inline">\([1,10000]\)</span>，明显开不下这么大的二维数组。并且
<span class="math inline">\(n\)</span>
很小，不离散化简直是浑身难受啊。</p>
<p>先对读入的数据进行离散化，然后求出二维前缀和。</p>
<p>最后二分一个 <span class="math inline">\(mid\)</span>
表示正方形边长为 <span class="math inline">\(mid\)</span>
是否能满足条件。</p>
<p>判断的时候枚举目标点的横纵坐标，用二维前缀和减去不在正方形内的部分，判断是否大于等于
<span class="math inline">\(c\)</span> 即可。</p>
<p>一定要注意枚举正方形时的边界问题，具体细节看代码。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">pt</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> a<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">c_</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> x1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x1<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>x1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span>w <span class="token operator">&amp;&amp;</span> x2<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">--</span>x2<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> y1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>y1<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>y1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>y2<span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span>w <span class="token operator">&amp;&amp;</span> y2<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">--</span>y2<span class="token punctuation">;</span>
            t<span class="token operator">=</span>s<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>x1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>x1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">>=</span>c<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>pt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span>y<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">++</span>s<span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>
        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   
    R <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">1e4</span><span class="token punctuation">,</span> h<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">c_</span><span class="token punctuation">(</span>h<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> r<span class="token operator">=</span>h<span class="token punctuation">;</span> <span class="token keyword">else</span> l<span class="token operator">=</span>h<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu2568 GCD 题解</title>
    <url>/2021/lg2568-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://www.luogu.com.cn/problem/P2568">link</a></p>
<p>设 $ p$ 为质数且 <span class="math inline">\(p \le n\)</span>。</p>
<p>显然的，若 $ (x,y)=1$，则 $ (x p,y p)=p$。</p>
<p>问题转化为求互质的数对 $ (x,y)$ 的个数。</p>
<span id="more"></span>
<p>这时候就要用上大毒瘤欧拉的欧拉函数了！</p>
<p>由于欧拉函数是与一个数互质，那么用前缀和。</p>
<p>由于 <span class="math inline">\((x,y)\)</span> 与 <span
class="math inline">\((y,x)\)</span>
算两种，所以计数时要乘2，但是会多加一次 <span
class="math inline">\(\phi(1)\)</span>，减去就好了。</p>
<p>设 <span class="math inline">\(m\)</span> 为 <span
class="math inline">\(n\)</span> 的约数个数，<span
class="math inline">\(p_i\)</span> 为 <span
class="math inline">\(n\)</span> 的第 <span
class="math inline">\(i\)</span> 个约数。</p>
<p>则答案为 <span class="math display">\[
\sum_{i=1}^m{2 \times \phi(\frac{n}{p_i})-\phi(1)}
\]</span></p>
<p><span class="math display">\[
2 \times  \sum_{i=1}^m{\phi(\frac{n}{p_i})-1}
\]</span></p>
<p><span class="math display">\[
2 \times  (\sum_{i=1}^m{\phi(\frac{n}{p_i})}) - m
\]</span></p>
<p>实现的时候用欧拉筛，<del>更加毒瘤了</del></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> phi<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    phi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token operator">++</span>m<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">||</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">></span>n<span class="token punctuation">)</span> <span class="token keyword">break</span> <span class="token punctuation">;</span>
            v<span class="token punctuation">[</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            phi<span class="token punctuation">[</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span>phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">%</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">?</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>phi<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token operator">+=</span>phi<span class="token punctuation">[</span>n<span class="token operator">/</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>ans<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>欧拉函数</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu2986 Great Cow Gathering 题解</title>
    <url>/2021/lg2986-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://www.luogu.com.cn/problem/P2986">link</a></p>
<p>设 <span class="math inline">\(d(x)\)</span> 为以 $ x$
为根的子树中所有的牛到达 <span class="math inline">\(x\)</span>
的代价，设 <span class="math inline">\(V_x\)</span> 为 <span
class="math inline">\(x\)</span> 的子节点集。</p>
<p>称 <span class="math inline">\(y \in V_x\)</span>，当且仅当有 <span
class="math inline">\((x \rightarrow y)\)</span> 的路径。</p>
<p>不妨将每个点的奶牛总数称为点权。</p>
<p>设 <span class="math inline">\(ct(y)\)</span> 为以 <span
class="math inline">\(y\)</span> 为根的子树的点权和，$ z$ 为 <span
class="math inline">\((x \rightarrow y)\)</span> 的长度。</p>
<span id="more"></span>
<p>转移是显然的 <span class="math display">\[
d(x)=\sum_{y \in V_x} d(y)+z \times ct(y)
\]</span> 然后考虑换根 DP。</p>
<p>设 <span class="math inline">\(f(x)\)</span> 为选择 <span
class="math inline">\(x\)</span> 点的最小代价，令 <span
class="math inline">\(f(1)=d(1)\)</span>。</p>
<p>设 <span class="math inline">\(S\)</span> 为整棵树的点权和。</p>
<p>显然有 <span class="math display">\[
f(y)=f(x)-ct(y) \times z + (S-ct(y)) \times z
\]</span></p>
<p><span class="math display">\[
f(y)=f(x)-(2 \times ct(y) \times z)+S \times z
\]</span></p>
<p>最后取 <span class="math display">\[
\min_{1 \le x \le n}{\{ f(x) \}}
\]</span> 实现上的问题只有子树的点权和无法方便计算，可以用一个变量记录
<span class="math inline">\((x \rightarrow y)\)</span> 的每个 <span
class="math inline">\(y\)</span>
子树点权和，再用另一个变量将它们累加，最后在遍历子节点后加上自身的点权就能求出完整的
<span class="math inline">\(ct\)</span> 数组。</p>
<p>具体看代码。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> s<span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll ans<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1ll</span><span class="token operator">&lt;&lt;</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ct<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">,</span>ll z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
ll <span class="token function">dp</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll fa<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ll res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fa<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       ll y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
       ll o<span class="token operator">=</span><span class="token function">dp</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
       d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token operator">*</span>o<span class="token punctuation">,</span> res<span class="token operator">+=</span>o<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> ct<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>res<span class="token operator">+</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll fa<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fa<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ct<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">1ll</span><span class="token punctuation">)</span><span class="token operator">+</span>s<span class="token operator">*</span>z<span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// freopen("data_\\P2986_8.in","r",stdin);</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token operator">+=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ll x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>山东OI夏令营2021 游记</title>
    <url>/2021/SDSC2021/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="sd-summer-camp">SD summer camp!</h3>
<p>首先吐槽一句“数据结构提高班”只讲一天数据结构，“高级算法班”讲了线段树、平衡树、分块等等一堆数据结构。。。</p>
<span id="more"></span>
<p> </p>
<h2 id="报道">7.15 报道</h2>
<p>大老远坐车到日照，花了整整一上午时间
QAQ。在车站坐公交车去山外，山外在最后一站，一路上一直在听歌。为了防止耳机没电就用的有线耳机。</p>
<p>报道时就已经有好多人了，官方没说明白路线，在学校里转了好久才找到报到处。拿到学员证（fan
ka）后知道了我在新8号楼，结果这是唯一没有桌子和wifi的宿舍楼、、(╬▔皿▔)╯。还有一些没什么用的信息。</p>
<p>在宿舍知道我市还有教练带队来的初中生，xxs，<del>没有高中的</del>。认识了来自德州的准高一学生zqr，这家伙还会网络流
orz。</p>
<p>去超市买了可乐和阿萨姆，，，，这一晚上大概就是玩。</p>
<p> </p>
<h2 id="day01">7.16 day01</h2>
<p>山外的空调好冷
≡(▔﹏▔)≡，开的16度但是晚上被冻醒好几次，早晨常规6点起床了，早饭吃到了山外最喜欢的豆角。。几乎每天每顿都有。</p>
<p>今天上午在报告厅上课，由来自莱州一中的 <del>孙名媛</del>
孙铭远讲述图论相关知识。</p>
<p>先讲了 dijkstra
以及堆优化与桶优化与次短路问题及其证明，有个大佬说可以用 A star
搞。。好吧我不会 A star。</p>
<p>然后就讲了用 A star 的 K
短路问题，很多人不那么理解估价函数，我大概明白了，然鹅我还是不会<del>实现</del>。</p>
<p>还有已经死掉的某算法以及 Floyd 与 johnson</p>
<p>接着是最长路问题，没啥好说的，然后下课了。</p>
<p><strong>这里有一个小插曲</strong>：报告厅在-1楼没有厕所，我们只能去楼上找了一个位置奇怪的厕所。。。然而那里只有两个位置，等着的却又很多人。有人说“这和排队接水是一样的”
“你怎么知道每个人用的时间？” “估价函数！”
简直笑死。。后来知道正经的厕所在六楼。</p>
<p>上课后讲了差分约数系统，大概就是一堆不等式的操作，，并且讲述了虚拟原点的作用。</p>
<p>然后是生成树相关。先介绍了两种常规MST算法与很有意思的 boruvka
算法，然后讲述了最小瓶颈路/树和次小生成树。</p>
<p>随后详细讲了 kruskal
重构树及其<strong>优美性质</strong>，今天的课程就结束了。</p>
<p><strong>各路大佬简直吊打我</strong></p>
<p>下午自己随便切了几道题目，这段时间的题目会在夏令营结束后选几题单独讲一下。吃完晚饭去机房，然而人却满了，，，有两个组的用同几间机房，白天上机时间错开，但是晚上就不行了。这一点很不满意
(* ￣︿￣)</p>
<p>截至7.18 23:00，我晚上没有在机房抢到一个位置。</p>
<p>所以我和朋友在宿舍用热点切题去了~</p>
<p> </p>
<h2 id="day02">7.17 day02</h2>
<p>今天早上起晚了一点，，</p>
<p>依然是孙名媛讲述图论。</p>
<p>先讲了欧拉回路的定义、性质、<strong>美妙</strong>性质以及运用。</p>
<p>在讲 CF547D 的时候，“找到一条欧拉回路并对边定向”
没有讲述过程，后面做这题的时候直接去世。</p>
<p>然后是树上相关问题。</p>
<p>括号序，欧拉序，dfs 序。</p>
<p>还有重链剖分。</p>
<p>我在十几天钱看过树上相关问题，对于这种在树上一顿dfs与bfs理解起来还是没有压力的。后面说树链剖分一般和数据结构同时出现（其实基本都是线段树），我
/(ㄒoㄒ)/~~</p>
<p>一个多月前我还会写线段树板子，现在已经忘得差不多了。前几天k神给我一道线段树优化
dp，我连读题的心都无了。。。</p>
<p>最后是 dsu on
tree，也叫树上启发式合并。是一种基于重链剖分，合并重复扫描，从而降低复杂度的算法。也没啥复杂的，还是树上操作，实质上是一种
<strong>暴力，但不完全暴力</strong> 的算法。</p>
<p>在最后的最后，甚至还提到了点分治。。真要讲了那真的是
“数据结构提高班”了。</p>
<p>朋友在山外超商里买了一个耳机，花了几十元（忘了。。），同款的在某宝只要个位数就能买到（）。</p>
<p>认识了来自青岛平度的准高一学生官同学和与他玩mc的小朋友。他的 linux
技术实在是太强了 orz。我连 wsl 都不会用 ╥﹏╥...</p>
<p> </p>
<p>下午举行了 %你赛 形式的练习</p>
<p>T1：次短路 T2：差分约束系统 T3：欧拉路径 T4：使用重链剖分求LCA
T5：dsu on tree的课件例题 T6：dsu on tree简单习题</p>
<p>t1、t4我之前做过。t2是小k的农场，机房有大佬发现直接输出
<code>Yes</code>
可以得85分，还能下载数据。所以他们共同合作，特判数据，得到了比我快4s的速度。t3能想明白，但最后的实现上出了问题，，对边定向到底是个什么操作啊。</p>
<p>smy发了t5的标程（因为讲课时很多人都没听懂，就算懂了也不会实现），t6只要把t5的板子改一下就行了。</p>
<p>这个班是选手讲课的下界，往下的班就是教练上课了，但是没有真正意义上的%你赛，上机时还没人盯着
(￣y▽,￣)╭</p>
<p>晚上听了yamf的讲座，讲述他羟基进pku的事情，我在下面玩游戏，大概听了半个多小时就回宿舍了。</p>
<p> </p>
<h2 id="day03">7.18 day03</h2>
<p>早上室内温度又低的离谱，室内比空调制冷的温度还低。</p>
<p>今天是yamf的数论课，但实际上讲得很少，从最基础的质数开始，最后连exgcd和欧拉函数都没有讲到。</p>
<p>下午的练习</p>
<p>T1：分解质因数</p>
<p>T2：线性筛质数</p>
<p>T3：GCD&amp;LCM</p>
<p>T4：进制转换</p>
<p>T5：同余</p>
<p>T6：乘法逆元</p>
<p>t1、t2做过了。t3是gcd和lcm一顿推，最终推出简化的式子。t5开桶统计，t6卡掉了我的费马小定理，，</p>
<p>唯独t4要单独说一下，<a
href="https://www.luogu.com.cn/problem/P4461">九连环</a></p>
<p>这道题实质上是一个递推求方案数的题（为什么写进制转换？），但是没有取模，不写高精最终只有30pts。</p>
<p>然而同机房的神仙发现，用python可以直接水过去，只跑了不到200ms！</p>
<p>所以我不要脸地去Trick了。 &lt;(＿　＿)&gt;</p>
<p>晚上是lyh的金牌之路，我听完了，但是大部分时间还是划水。</p>
<p><strong>想不到lyh也玩 <span class="math inline">\(osu!\)</span>
</strong></p>
<p>所以我一边听一边玩。</p>
<p>听完讲座后去超商买了零食。</p>
<p>还有好多琐事忘了。</p>
<p> </p>
<h2 id="day04">7.19 day04</h2>
<p>今日的课程可就友好太多了，基础算法，还是yamf。</p>
<p>yamf：今天的课程一定很轻松的~</p>
<p>然后他讲了鱼神出的 <a
href="https://www.luogu.com.cn/problem/P5344">【XR-1】逛森林</a></p>
<p>好多人都没听懂，我当时在打电动，没有听完 QwQ。</p>
<p>yamf：这题没什么思维难度，就是实现起来比较麻烦。</p>
<p><img data-src="https://i.loli.net/2021/07/23/XeU82IrZnlcfEVB.jpg" /></p>
<p>还有二分，st表，倍增，倍增LCA，当然这些没啥好讲的，主要是讲题。</p>
<p>yamf说他把洛谷账号注销了，除了洛谷独占的题目，别的都是从loj之类的网站找的。</p>
<p>练习</p>
<p>T1：bfs</p>
<p>T2：RMQ（ST表）</p>
<p>T3：倍增优化数据结构</p>
<p>T4：使用倍增求LCA</p>
<p>T5：二分答案的课件例题</p>
<p>T6：二分答案简单习题</p>
<p>只有t2做过QAQ</p>
<p>t3是 <a
href="https://www.luogu.com.cn/problem/P3295">[SCOI2016]萌萌哒</a>
，这题我自己想了好久，然而没有想到正解。正解是st表+魔改的并查集。</p>
<p>t6 <a href="https://www.luogu.com.cn/problem/CF1359F?">RC Kaboom
Show</a>
是一道纯英文的CF题目，首先题面我就没看懂，还有一个类似于扫描线的过程。。。最后放弃了。但是洛谷唯一一篇题解是lyh写的诶~</p>
<p>晚上的讲座有变动，我没去。</p>
<p>高级算法班的同学们模拟赛出了三道题，分治，数学和lxl题。zqr只有50pts（</p>
<p>_rqy：题目太水了</p>
<p> </p>
<h2 id="day05">7.20 day05</h2>
<h3 id="我们最爱的-lxl-来啦">我们最爱的 <span
class="math inline">\(lxl\)</span> 来啦！</h3>
<p>lxl：你们这里好热 orz</p>
<p>lxl讲了树状数组，线段树，单调队列，堆啥的，还有一些题
（线段树讲得很浅，用的还是以前的课件，讲得和洛谷五一课几乎一样，然而这并不影响我们对lxl的热♂情）。</p>
<p>最后还有STL演示！</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
map <span class="token operator">&lt;</span> string <span class="token punctuation">,</span> string <span class="token operator">></span> p1<span class="token punctuation">;</span>
map <span class="token operator">&lt;</span> <span class="token keyword">int</span> <span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">></span> p2<span class="token punctuation">;</span>
p1 <span class="token punctuation">[</span> <span class="token string">"CCF"</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"发财"</span><span class="token punctuation">;</span>
p1 <span class="token punctuation">[</span> <span class="token string">"lxl"</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"良心出题人"</span><span class="token punctuation">;</span>
p2 <span class="token punctuation">[</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">114514</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="https://i.loli.net/2021/07/23/Zpcq2zGvAMrhSeL.jpg" /></p>
<p> </p>
<p><img data-src="https://i.loli.net/2021/07/23/iE9boYdGJvIyj4g.jpg" /></p>
<p>lxl懒得搞练习题，所以下午自己切题了。</p>
<p>晚上是smy的dp讲座。</p>
<p> </p>
<p><img data-src="https://i.loli.net/2021/07/23/Rl8FaCMGomXdBxn.jpg" /></p>
<p> </p>
<p>我究极绿宝石1周目通啦！</p>
<p>也就是在这一晚，我玩 <span class="math inline">\(OSU!\)</span>​
时笔记本电脑突然卡住，关机重启之后x键就失灵了。。</p>
<p>在超商买了一盒某巢咖啡。</p>
<p>QWQ</p>
<p> </p>
<h2 id="day06">7.21 day06</h2>
<p>真是有意思的一天。</p>
<p>今天是lyh的dp课。</p>
<p>但是这个dp课啊，，，</p>
<p>从数字三角形开始讲，，，</p>
<p>是怕有人听不懂还是单纯的水时长啊 (#｀-_ゝ-)</p>
<p>线性dp，背包，区间dp，树形dp，数位dp，状压dp，单调队列优化（有人说不会单调队列，所有又讲了一遍，水了半小时）。</p>
<p>每一样都讲了，但是每一样都讲得不是很多，没有讲很多题。</p>
<p>课件一共讲40+页，但是一共有一百多张。</p>
<p>最想吐槽的是树形dp。</p>
<p>例题只有没有上司的舞会和选课，下午的练习也没什么意思。</p>
<p><a href="https://www.luogu.com.cn/problem/P3574">FarmCraft</a></p>
<p><a href="https://www.luogu.com.cn/problem/P6082">salesman</a></p>
<p>比较好的两道树形dp。</p>
<p>练习</p>
<p>T1 线性dp</p>
<p>T2 区间dp</p>
<p>T3/T4：背包（并不是那么显然，可能需要一些思考） T5/T6：树形dp</p>
<p>六道题我做过4道。。</p>
<p>估计某位yba神仙也是，然后直接提交上去了，瞬间400，rk1。</p>
<p>我直接做没做过的题了。</p>
<p>T4 垃圾（我）陷阱</p>
<p>显然地，是背包，只不过状态的设计花了我亿点时间。</p>
<p>T5 “访问”美术馆</p>
<p>背包属性dp，最难的地方在于读入和建树。</p>
<p>T5/T6 都是树形背包dp。</p>
<p>没有做状压dp的题，我不是很喜欢这种复杂度奇高，接近于暴搜的dp。</p>
<p>树形dp就很不错啊。</p>
<p>状态设计与转移都很优美，复杂度低，在各种树上问题都能用到，还有很多套路题可以水AC数和题解（</p>
<p><img data-src="https://i.loli.net/2021/07/23/yDVQbMRuHnd23xY.jpg" /></p>
<p>晚上在机房切题了，<a
href="https://www.luogu.com.cn/problem/P1131">时态同步</a>和<a
href="https://www.luogu.com.cn/problem/P1453">城市环路</a></p>
<p>树形dp水题和基环树有点氵的题（因为我一开始的思路错了。。）</p>
<p>又去了超商。</p>
<p> </p>
<h2 id="day07">7.22 day07</h2>
<p>今天凌晨0:00，我去隔壁宿舍吃零食。</p>
<p>有个人让我和他们玩三国杀，我就和他们开了一把。</p>
<p>我的角色牌很垃圾，最后选了界吕蒙。</p>
<p>就没有然后了 ≡(▔﹏▔)≡</p>
<p>被管理员查水表了 QAQ</p>
<p>还做了半个小时的蹲姿 啊啊啊。</p>
<p>然而早上起来一点都不疼，就是特别困。</p>
<p>上午讲得dp优化，基本没在听。</p>
<p>单调队列优化，数据结构优化，斜率优化，杂题选讲。</p>
<p>斜率优化只听了个大概，不会推式子。</p>
<p><img data-src="https://i.loli.net/2021/07/23/baAxm4w9g5fUFlz.jpg" /></p>
<p>下午一点就去练习</p>
<p>T1：数位dp T2/T3：状压dp T4：二分+单调队列优化 T5/T6：斜率优化</p>
<p>只做出了T1，T2，T4，T5</p>
<p>因为这些东西我之前都没有学过啊，就算懂得原理也不会实现。</p>
<p>所以做得很慢，而且除了T4都是看着题解做的。</p>
<p>被各路神仙吊打。</p>
<p>好吧。 ╮(╯-╰)╭</p>
<p>就这样结束了。</p>
<p>大概明天会就这段时间的题目水几篇题解。</p>
<hr />
<p>现在想起来，，，</p>
<p>走出机房的那一刻，听着<a
href="http://music.163.com/song?id=454966322">ホタライズ -2015 Summer
Edition-</a></p>
<p>斜阳抹过树叶的罅隙，划向云层的彼方。</p>
<p>夏日的阳炎，融化在阵阵蝉鸣中，与激动的心情一同淹没在追逐而来的风中</p>
<p>仅仅是七天，但我感觉真的不是孑然一身了呢</p>
<p>再也不是那个闷在家里自学，愤世嫉俗，自欺欺人的家伙了呢</p>
<p>我也想去追寻，我的那份「真物」，不管它是否存在过</p>
<p>对一切都失望的时候</p>
<p>「真物」</p>
<p>真的能给人力量啊</p>
<h3 id="update-2021.7.23"><span class="math inline">\(update\)</span>
2021.7.23</h3>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>2021的暑假</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu3778 商旅 题解</title>
    <url>/2021/lg3778-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote>
<p>修改于 2022.6.27</p>
</blockquote>
<p><a href="https://www.luogu.com.cn/problem/P3778">link</a></p>
<p>由题意得盈利效率为一个分数，故此题为分数规划。</p>
<p>由于 <span class="math inline">\(N\)</span>
的范围很小，所以就可以大胆地使用邻接矩阵建图，并使用 floyd 算法。</p>
<p>题目中的盈利效率定义为：环路中的收益/花费的时间，给出的数据是两个集市
<span class="math inline">\((i,j)\)</span> 从 <span
class="math inline">\(i\)</span> 购买和从 <span
class="math inline">\(j\)</span> 卖出分别的价格和从 <span
class="math inline">\(i\)</span> 到 <span
class="math inline">\(j\)</span>
的时间，并不能直接用于求盈利效率，需要预处理。</p>
<span id="more"></span>
<p>设 <span class="math inline">\(g(i,j)\)</span> 为从 <span
class="math inline">\(i\)</span> 点买入，在 <span
class="math inline">\(j\)</span> 点卖出任意商品的最大利润。</p>
<p>所以，我们在读入价格时预处理出每个 <span
class="math inline">\(g(i,j)\)</span> 。注意这里要枚举 <span
class="math inline">\(i\)</span> 的所有入边与 <span
class="math inline">\(j\)</span> 的所有出边，并将其差取最大值。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>k_<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>inf<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 对于无法购买的两个集市，将其值改为相减为-inf 的值，以免影响后面的运算</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>t<span class="token operator">&lt;=</span>k_<span class="token punctuation">;</span><span class="token operator">++</span>t<span class="token punctuation">)</span>
    g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>设 <span class="math inline">\(d(i,j)\)</span> 为从 <span
class="math inline">\(i\)</span> 到 <span
class="math inline">\(j\)</span>
所用的最短时间，初始化为正无穷，读入所有两个点距离之后进行 floyd
算法求出。 这里用<code>memset(d,0x3f,sizeof(d))</code>的话只有
82pts，血的教训。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>inf<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>设计完状态之后，就可以列出盈利效率的式子了。</p>
<p>不难想到，二分一个 <span
class="math inline">\(mid\)</span>，表示盈利效率为 <span
class="math inline">\(mid\)</span>，设 <span
class="math inline">\(i,j\)</span> 为环路上可以相互到达的点 ，<span
class="math inline">\(V\)</span> 为环路点集。</p>
<p>易得下式 <span class="math display">\[
\frac{ \sum \limits_{i,j \in V} g(i,j) }{ \sum \limits_{i,j \in V}
d(i,j) } \ge mid
\]</span></p>
<p>但是如此并不能直接进行计算，要把它转化为<strong>对环的判断</strong>。</p>
<p>所以我们设建一张新图，设 <span class="math inline">\(f(i,j)\)</span>
为新图上的权值。</p>
<p>不难得到 <span class="math display">\[
\sum \limits_{i,j \in V} g(i,j) \ge mid \times \sum \limits_{i,j \in V}
d(i,j)
\]</span></p>
<p><span class="math display">\[
\sum \limits_{i,j \in V} g(i,j) - mid \times \sum \limits_{i,j \in V}
d(i,j) \ge 0
\]</span></p>
<p>所以我们令 <span class="math display">\[
\sum \limits_{i,j \in V} f(i,j)= \sum \limits_{i,j \in V} g(i,j) - mid
\times \sum \limits_{i,j \in V} d(i,j)
\]</span></p>
<p>所以 <span class="math display">\[
f(i,j)=g(i,j)-mid \times d(i,j) \quad i,j \in V
\]</span> 然后跑 Floyd
算法，判断有无环并取最大值，再判断最大值是否大于等于 0。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token operator">-</span>inf<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>inf<span class="token punctuation">;</span> <span class="token keyword">else</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token operator">*</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// i 到达 i，表示有环。</span>
    <span class="token comment">// 因为初始 f[i][i] 设置的是-inf 所以不影响答案</span>
    <span class="token keyword">return</span> ans<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>二分过程。其中初始 <span class="math inline">\(l=0\)</span>，<span
class="math inline">\(r=\max{\{ g(i,j) \}}\)</span>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> l<span class="token operator">=</span>mid<span class="token punctuation">;</span> <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>几个细节。</p>
<ul>
<li>值域是 <span
class="math inline">\([0,10^9]\)</span>，对题目中的“如果没有任何一条环路可以盈利，则输出
0”并不需要特判。</li>
<li>一定要开 long long！</li>
<li>因为我们对权的处理，并不需要除法，因此可以完全无视题目中的向下取整。</li>
</ul>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>分数规划</tag>
        <tag>Floyd</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu3288 方伯伯运椰子 题解</title>
    <url>/2021/lg3288-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://www.luogu.com.cn/problem/P3288">link</a></p>
<p>写一篇不从网络流的角度考虑，单纯推式子的题解。</p>
<p>看到题目给出一张图并要求最大化 <span class="math display">\[
\frac{X-Y}{k}
\]</span> 就可以确定本题的大致模型：分数规划和 SPFA 判负环。</p>
<span id="more"></span>
<p>每条路满负荷，这就意味着我们可以在「理想状态」下进行推导。</p>
<p>设第 <span class="math inline">\(i\)</span> 条边未修改是费用为 <span
class="math inline">\(x_i\)</span>，修改后费用为 <span
class="math inline">\(y_i\)</span>。</p>
<p>题目给出 <span
class="math inline">\(a_i,b_i,c_i,d_i\)</span>，不难想到 <span
class="math display">\[
x_i = c_i \times d_i \implies X = \sum_{i=1}^m {c_i \times d_i}
\]</span> 有两种操作</p>
<ul>
<li>选择一条道路，将其进行一次压缩，这条道路的容量会下降 1 单位。</li>
<li>选择一条道路，将其进行一次扩容，这条道路的容量会上升 1 单位。</li>
</ul>
<p>简单推导一下式子，易得当第 <span class="math inline">\(i\)</span>
条边进行压缩时 <span class="math display">\[
y_i= (c_i-1) \times d_i - a_i \implies Y= \sum_{i=1}^m { (c_i-1) \times
d_i + a_i}
\]</span></p>
<p>进行扩容时 <span class="math display">\[
y_i = (c_i+1) \times d_i -b_i \implies Y= \sum_{i=1}^m { (c_i+1) \times
d_i + b_i }
\]</span> 我们令 <span class="math display">\[
\max{ \{ \frac{X-Y}{k} \} } = ans
\]</span> 则 <span class="math display">\[
\frac{X-Y}{k}  \large \le ans
\]</span> <span class="math display">\[
X-Y  \le  \large ans \times k
\]</span></p>
<p><span class="math display">\[
ans \times k  + Y - X \ge \large 0
\]</span></p>
<p>而 <span class="math display">\[
Y-X  =  \sum_{i=1}^m{y_i-x_i} = \sum_{i=1}^m {\left[(c_i-1) \times d_i +
a_i \right]} - \sum_{i=1}^m{c_i \times d_i}\\
\]</span> <span class="math display">\[
= \sum_{i=1}^m { (c_i \times d_i -d_i +a_i )-c_i \times d_i} =
\sum_{i=1}^m {a_i-d_i} \\
\]</span></p>
<p><span class="math display">\[
or
\]</span></p>
<p><span class="math display">\[
=\sum_{i=1}^m {\left[(c_i+1) \times d_i + b_i \right]} -
\sum_{i=1}^m{c_i \times d_i} \\
\]</span></p>
<p><span class="math display">\[
=\sum_{i=1}^m{(c_i \times d_i+ d_i +b_i)-c_i \times d_i}=
\sum_{i=1}^m{b_i+d_i}
\]</span></p>
<p>若将 <span class="math inline">\(y_i-x_i\)</span>
看作图上的边权，修改次数 <span class="math inline">\(k\)</span>
即为某个环上的边数。</p>
<p>所以我们二分一个 <span
class="math inline">\(dlt\)</span>，判断是否有负环，决定式子是否成立，则分数式又可化为
<span class="math display">\[
dlt \times k + Y - X   \ge  0 \\
\]</span> <span class="math display">\[
\sum_{i=1}^k y_i-x_i+dlt \ge  0
\]</span></p>
<p>由于有两种情况，所以建双向边。</p>
<p>因为原分数式中 <span class="math inline">\(k\)</span>
是分母，所以这个满足上式的 <span class="math inline">\(dlt\)</span>
应尽量小。</p>
<p>然后 SPFA 判负环就行。</p>
<p>若有负环，则不满足上式，令 <span
class="math inline">\(l=dlt\)</span>，反之则令 <span
class="math inline">\(r=dlt\)</span>。</p>
<p> </p>
<p>code</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-4</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> c<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">double</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>c<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> g<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">double</span> dlt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
    v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token operator">+</span>dlt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token operator">+</span>dlt<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">||</span><span class="token function">spfa</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>dlt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">spfa</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> P<span class="token punctuation">,</span> Q<span class="token punctuation">;</span>
    R <span class="token keyword">double</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>A<span class="token punctuation">,</span><span class="token operator">&amp;</span>B<span class="token punctuation">,</span><span class="token operator">&amp;</span>P<span class="token punctuation">,</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>A<span class="token operator">-</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>B<span class="token operator">+</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        r<span class="token operator">+=</span>A<span class="token operator">+</span>B<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>P<span class="token operator">*</span>Q<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">></span>eps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> l<span class="token operator">=</span>mid<span class="token punctuation">;</span> <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>分数规划</tag>
        <tag>SPFA</tag>
      </tags>
  </entry>
  <entry>
    <title>Summertime Record</title>
    <url>/2022/Summertime-Record/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>无论是测试也好，升学也罢，一切都没有意义了。</p>
<p>不会再纠结于这些了。</p>
<p>短短的几个小时，寥寥数语，柳暗花明，如梦初醒。</p>
<span id="more"></span>

    <div id="aplayer-lDxrApep" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="26440343" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
<p>「没有向前的勇气，即便是有了那些也无谓。」</p>
<p>「推动着你我前行的约定，即便是没有这些也能全力以赴吧。」</p>
<p>虽然不是那么名正言顺地有了想要指导我的人，但这是一大进步啊！不再是去年那个迷茫的家伙了，对吗？</p>
<p>经历一番波折终于报名了夏令营，一年前的那个故事，马上就要再次转动起来……</p>
<p>不管最终结局是什么，不管要面临怎样的困难，只要竭尽全力，只要珍藏着我们的友谊，就一定能够找到所谓“正解”啊！</p>
<p>有那么多人陪伴着我们，有那么多人支持着我们，有那么多人鼓励着我们。尽管大家都没有耀眼的成绩，都不是天之骄子，但是往后一步，收起目光，褪去一切不必要的烦恼，生活仍然是有希望的，我们的经历也是有价值的。不论是拿到省一便回头，还是拼一把冲省队，都不应时时刻刻担忧着最后的结果。</p>
<p>本来打算发的“AFO前的一些话”不会再发出来了，也不会再纠结于那些东西了。这一次，尽我所能，就算是铩羽而归也罢。</p>
<p>这个故事，还没有谢幕！我们的作战，还没有完结！</p>
<p><strong>但行好事，莫问前程</strong>。</p>
<p><strong>莫思身外无穷事，且尽生前有限杯</strong>。</p>
<blockquote class="blockquote-center">
<p>从今往后，无悔地去记录，记录我们的夏日时光。</p>

</blockquote>
<p> </p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA10529 Dumb Bones 题解</title>
    <url>/2022/uva10529-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>由于只要区间长度相同，它们的期望是一样的，所以只要记录区间长度即可。</p>
<p>设 <span class="math inline">\(f(i)\)</span> 为放 <span
class="math inline">\(i\)</span> 个骨牌的期望次数。</p>
<span id="more"></span>
<p>有一个定理：对于事件 <span class="math inline">\(A\)</span>，有 <span
class="math inline">\(P(A)=p\)</span>，那么发生 <span
class="math inline">\(A\)</span> 的期望次数 <span
class="math inline">\(E(A)= \frac{1}{p}\)</span>。</p>
<p>对于一张骨牌 <span
class="math inline">\(i\)</span>，它既不左倒，也不右倒的概率为 <span
class="math inline">\(\frac{1-pl-pr}{1}\)</span>，那么期望次数就是 <span
class="math inline">\(\frac{1}{1-pl-pr}\)</span>。所以之前的期望次数为
<span class="math inline">\(\frac{1}{1-pl-pr} -1 =
\frac{pl+pr}{1-pl-pr}\)</span>。</p>
<p>那么往左倒和往右倒的期望次数分别为 <span
class="math inline">\(\frac{pl}{1-pl-pr}\)</span>，<span
class="math inline">\(\frac{pr}{1-pl-pr}\)</span>。</p>
<p>但是这样还没完，如果倒了，那么就要把倒下的那些重新放置起来。设倒下为
<span class="math inline">\(A\)</span>，重新放置为 <span
class="math inline">\(B\)</span>，这两件事是要同时发生的，所以它们的总期望
<span class="math inline">\(E(A \cap B) = E(A) \cdot
E(B)\)</span>。具体就是上面两个式子分别乘上对应骨牌个数的期望值。</p>
<p>最后该怎么办？倒或不倒是互相独立的事件，所以它们的总期望是它们的和。设
<span class="math inline">\(A,B,C\)</span>
分别为向左倒，向右倒，不倒，那么 <span class="math inline">\(E(A \cup B
\cup C) = E(A) + E(B) + E(C)\)</span>。</p>
<p>对于一个 <span class="math inline">\(f(i)\)</span>，尝试所有 <span
class="math inline">\(j \in
[1,i]\)</span>，把最后一个骨牌放在这个位置，计算出三种状态的期望并求和。这样就有了状态转移方程
<span class="math display">\[
f(i) = \frac{pl}{1-pl-pr} \cdot f(j-1) + \frac{pr}{1-pl-pr} \cdot f(i-j)
+ \frac{1}{1-pl-pr}
\]</span> 复杂度 <span class="math inline">\(O(n^2)\)</span>。</p>
<h2 id="优化">优化</h2>
<p>warning：本人数学水平有限，无法提供严格证明，千万不要较真，如果看不明白就去看别人的吧w，欢迎指出错误。</p>
<p>不难发现，在枚举 <span class="math inline">\(j\)</span>
的时候，方程第一项单调增，第二项单调减，第三项为常数，那么它一定是单峰的。<del>感性理解</del>，还是凹函数，有最小值。并且在有用的区间内，<span
class="math inline">\(f\)</span> 单调增。</p>
<p>由于 <span class="math inline">\(i\)</span> 是不断增大的，那么当
<span class="math inline">\(f(i)\)</span> 与 <span
class="math inline">\(f(i+1)\)</span> 选择同一个 <span
class="math inline">\(j\)</span> 时，它们只有第二项不同，且 <span
class="math inline">\(i+1-j&gt;i-j\)</span>，所以 <span
class="math inline">\(f(i+1-j)&gt;f(i-j)\)</span>。</p>
<p>这说明了设 <span class="math inline">\(i&#39; &gt; i\)</span>，<span
class="math inline">\(f(i)\)</span> 最优的 <span
class="math inline">\(j\)</span> 肯定小于 <span
class="math inline">\(f(i&#39;)\)</span> 最优的 <span
class="math inline">\(j&#39;\)</span>。想象一下，凹函数的顶点 <span
class="math inline">\(j\)</span> 向右移动到 <span
class="math inline">\(j&#39;\)</span>，左边的肯定更不优，只能在 <span
class="math inline">\(j\)</span> 的位置向右找 <span
class="math inline">\(j&#39;\)</span>。(<del>如果说错了就当没有这句话</del>)</p>
<p>所以我们记录每一个每个最优决策点，它一定是单调增的。在 <span
class="math inline">\(j\)</span> 的合法区间内查找最优的那一个，复杂度
<span class="math inline">\(O(n)\)</span>。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">double</span> pl<span class="token punctuation">,</span> pr<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>pr<span class="token punctuation">)</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>pl<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>pl<span class="token operator">-</span>pr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// 这个东西可不是单调的，但是有最小值，所以下面要选择calc(i,j)最小的j</span>
<span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pl<span class="token punctuation">,</span><span class="token operator">&amp;</span>pr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>i<span class="token operator">&amp;&amp;</span><span class="token function">calc</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">></span><span class="token function">calc</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>j<span class="token punctuation">;</span>
		f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">calc</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>n<span class="token punctuation">)</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>概率论</tag>
        <tag>数学期望</tag>
        <tag>决策单调性优化</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa1025 城市里的间谍 题解</title>
    <url>/2021/UVa1025-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://www.luogu.com.cn/problem/UVA1025">link</a></p>
<h2 id="solution">solution</h2>
<p>显然的，这是一道线性 DP 题。</p>
<p>而「时间」则是计算顺序。</p>
<p>题目要求求出最小等待时间，而转移「时间」这一状态与当前所处车站有关。</p>
<p>所以我们设 <span class="math inline">\(f(i,j)\)</span> 为 <span
class="math inline">\(i\)</span> 时刻，在第 <span
class="math inline">\(j\)</span> 个车站的最小等待时间。</p>
<span id="more"></span>
<p>显然我们有三种转移决策。</p>
<ol type="1">
<li>在当前车站再等待一个时刻。</li>
<li>乘坐向左的列车。</li>
<li>乘坐向右的列车。</li>
</ol>
<p>不难想到我们用一个数组 <span
class="math inline">\(v(i,j,k=0/1)\)</span> 表示第 <span
class="math inline">\(i\)</span> 个时刻的第 <span
class="math inline">\(j\)</span> 个车站有无列车向左/右行驶。</p>
<p>设 <span class="math inline">\(t(i)\)</span> 为车站 <span
class="math inline">\((i \rightarrow i+1)\)</span> 和 <span
class="math inline">\((i+1 \rightarrow i)\)</span> 的时间。</p>
<p>那么转移为</p>
<p><span class="math display">\[
f(i,j)= \min\begin{cases}
f(i+1,j) +1
\\
f(i+t(j),j+1) \}
\\
f(i+t(j-1),j-1) \}
\end{cases}
\]</span></p>
<p>两式对应的条件分别为 <span class="math display">\[
\begin{cases}
v(i,j,0)=1,j&lt;n,i+t(j) \le T
\\
v(i,j,1)=1,j&gt;1,i+t(j-1) \le T
\end{cases}
\]</span>
<del>我有一个优美的状态转移方程，可惜这里空太小，我写不下</del></p>
<p>边界 $ f(T,n)=0$, <span class="math inline">\(f(T,[1,n-1])=
\infty\)</span>。</p>
<p>答案 $ f(0,1)$。</p>
<p>由于是「自底向上」的递推方法，要注意 <span
class="math inline">\(i\)</span>
要逆序循环，还有向左向右列车的能够转移的状态的差异。</p>
<p>对于无解的情况，只需要判断目标状态是否等于 <span
class="math inline">\(\infty\)</span> 就可以。</p>
<p>还要注意 UVa 的奇怪输出格式。</p>
<h2 id="code">Code</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">inf</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> T<span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//快读  &#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> m1<span class="token punctuation">,</span> m2<span class="token punctuation">,</span> d<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        T<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>inf<span class="token punctuation">;</span>
        m1<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>m1<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            d<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">&lt;=</span>T<span class="token punctuation">)</span> v<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> d<span class="token operator">+=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        m2<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>m2<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            d<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">&lt;=</span>T<span class="token punctuation">)</span> v<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> d<span class="token operator">+=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        f<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>T<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">+</span>t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>T<span class="token punctuation">)</span>
                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">+</span>t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">+</span>t<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>T<span class="token punctuation">)</span>
                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">+</span>t<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case Number %d: "</span><span class="token punctuation">,</span><span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>inf<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>线性DP</tag>
      </tags>
  </entry>
  <entry>
    <title>AT2558 Many Moves 题解</title>
    <url>/2022/at2558-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="关于此题">关于此题</h2>
<p>去年夏天，我就从朋友那里知道了这道题。</p>
<p>素不相识、相隔千里的几人竟然能互相敞开心扉，这是我那是坚持下去的一个重要因素。他说这题很有意思，我便不顾自己的水平就放入了做题计划，这一放，就是将近一年。</p>
<span id="more"></span>
<p>“线段树优化 DP，好厉害啊！”</p>
<p>“什么时候我也能会写线段树呢？”</p>
<p>一年中发生了太多的事，他已经不再那么热衷于 OI
了，我也从黄粱一梦中醒来。但是，仍然不变的，是一想到他就会燃起的小小斗志，是我不甘又无奈的形单影只。</p>
<p>也许我再也不是那个连背包问题都无法理解，只会对着题解研究代码的菜鸟了。但是……</p>
<h2 id="分析">分析</h2>
<p>读完题面第一反应，就是把操作“离线”了。（没啥用，和纯数据结构题的离线不同）。</p>
<p>考虑完成 <span class="math inline">\(i\)</span>
个操作时，一定有一个棋子在 <span class="math inline">\(x_i\)</span>
的位置。那么可以设 <span class="math inline">\(f(i,j)\)</span>
为完成了前 <span class="math inline">\(i\)</span>
个操作，其中另一个棋子的位置在 <span
class="math inline">\(j\)</span>。</p>
<p>转移则有 2 种。</p>
<p>对于 <span class="math inline">\(f(i,j)\)</span>，可以将 <span
class="math inline">\(f(i-1,j)\)</span> 中位置在 <span
class="math inline">\(x_{i-1}\)</span> 的棋子放过来，代价是 <span
class="math inline">\(\Delta x = |x_i - x_{i-1}|\)</span>。 <span
class="math display">\[
f(i,j) = f(i-1,j) + \Delta x
\]</span>
还可以将位置在另一个棋子放过来。由于状态无法直接表示，所以要枚举另一个棋子的位置
<span
class="math inline">\(k\)</span>。但是把「另一个棋子」放过来后，它位于
<span class="math inline">\(x_i\)</span>，按照上文状态的设计，就转移到
<span class="math inline">\(f(i,x_{i-1})\)</span> 了。</p>
<p>仔细想一想，<span class="math inline">\(f(i-1,k) \rightarrow
f(i,x_{i-1})\)</span> 这种情况还挺少见的，有点意思。😅 <span
class="math display">\[
f(i,x_{i-1}) = \min_{k \in [1,n]}{\{ f(i-1,k) + |k-x_i| \}}
\]</span> 直接这样做复杂度是 <span class="math inline">\(O(Qn)\)</span>
的，考虑优化。</p>
<p>套路地把绝对值符号拆开，当 <span class="math inline">\(k &gt;
x_i\)</span> 时，有 <span class="math display">\[
f(i,x_{i-1}) = \min_{k \in [x_i+1,n]}{\{ f(i-1,k) + k \}} - x_i
\]</span> 当 <span class="math inline">\(k \le x_i\)</span> 时，有 <span
class="math display">\[
f(i,x_{i-1}) = \min_{k \in [1,x_i]}{\{ f(i-1,k) - k \}} + x_i
\]</span> 这样问题就变成了，在 <span
class="math inline">\([1,x_i]\)</span> 中快速查找最小的 <span
class="math inline">\(f(i-1,k)-k\)</span>，在 <span
class="math inline">\([x_i+1,n]\)</span> 中快速查找最小的 <span
class="math inline">\(f(i-1,k)+k\)</span>。</p>
<p>而第一种转移其实变相地告诉我们，<span
class="math inline">\(i-1\)</span> 的状态是可以通过 <span
class="math inline">\(\Delta x\)</span> 转移到 <span
class="math inline">\(i\)</span> 的状态的。</p>
<blockquote>
<p>实际上不难发现，对于第一种转移，只有 <span
class="math inline">\(j=x_i\)</span>
的时候才是最划算的，所以可以直接单点查询得到。但是这样就会被第二种转移中的
<span class="math inline">\(k=x_i\)</span>
的情况覆盖了，所以可以完全无视第一种转移。</p>
</blockquote>
<p>所以可以建立一棵线段树，维护 <span
class="math inline">\(f(j)\)</span> 这一层。</p>
<p>对于每个操作 <span class="math inline">\(i\)</span>，维护 <span
class="math inline">\(f(i-1,k)+k\)</span> 与 <span
class="math inline">\(f(i-1,k)-k\)</span> 的值。全局加上 <span
class="math inline">\(\Delta x\)</span> 更新状态，最后单点修改 <span
class="math inline">\(x_{i-1}\)</span> 的值。</p>
<p>初始值 <span class="math inline">\(f(1,A) = |B-x_1|\)</span>，<span
class="math inline">\(f(1,B)=|A-x_1|\)</span></p>
<p>答案 <span class="math inline">\(\min_{k \in [1,n]}{\{ f(Q,k)
\}}\)</span></p>
<p>由于只设计全局加，所以可以直接用打标记的方式实现。</p>
<p>复杂度 <span class="math inline">\(O(Q \log_2 n)\)</span>。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">200005</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll inf<span class="token operator">=</span><span class="token number">1ll</span><span class="token operator">&lt;&lt;</span><span class="token number">60</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> Q<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Segment_Tree</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>
	ll tag<span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// tag是区间加标记</span>
    <span class="token comment">// v[0]是f(i,k)，v[1]是f(i,k)-k，v[2]是f(i,k)+k</span>
	<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">l</span><span class="token expression"><span class="token punctuation">(</span>u<span class="token punctuation">)</span> t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l</span></span>
	<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">r</span><span class="token expression"><span class="token punctuation">(</span>u<span class="token punctuation">)</span> t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r</span></span>
	<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">tag</span><span class="token expression"><span class="token punctuation">(</span>u<span class="token punctuation">)</span> t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>tag</span></span>
	<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">v</span><span class="token expression"><span class="token punctuation">(</span>u<span class="token punctuation">)</span> t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span></span>
	<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">v1</span><span class="token expression"><span class="token punctuation">(</span>u<span class="token punctuation">)</span> t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span></span>
	<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">v2</span><span class="token expression"><span class="token punctuation">(</span>u<span class="token punctuation">)</span> t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></span></span>
<span class="token punctuation">&#125;</span> t<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">maketag</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span>ll val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">tag</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">+=</span>val<span class="token punctuation">,</span> <span class="token function">v</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">+=</span>val<span class="token punctuation">,</span> <span class="token function">v1</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">+=</span>val<span class="token punctuation">,</span> <span class="token function">v2</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">+=</span>val<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">v</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">v</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">v</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">v1</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">v1</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">v1</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">v2</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">v2</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">v2</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">pushdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">tag</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">maketag</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">tag</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">maketag</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">tag</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">tag</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">l</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span>l<span class="token punctuation">,</span> <span class="token function">r</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span>r<span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">v</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">v1</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">v2</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span>inf<span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token comment">// 初始值</span>
	<span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">pushup</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span>ll p<span class="token punctuation">,</span>ll val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 单点修改</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">l</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">r</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">v</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span>val<span class="token punctuation">,</span> <span class="token function">v1</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span>val<span class="token operator">-</span>p<span class="token punctuation">,</span> <span class="token function">v2</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span>val<span class="token operator">+</span>p<span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">pushdown</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">l</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">r</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> <span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">pushup</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
ll <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 区间查询</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span><span class="token function">l</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">r</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token function">pushdown</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">l</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">r</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
	ll ans<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1ll</span><span class="token operator">&lt;&lt;</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">></span>mid<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>Q<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>Q<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		ll dlt<span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1ll</span><span class="token operator">&lt;&lt;</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r2<span class="token punctuation">,</span> r3<span class="token punctuation">;</span>
<span class="token comment">//		r1=query(1,x[i],x[i],0)+dlt;</span>
		r2<span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		r3<span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		r1<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>r2<span class="token punctuation">,</span>r3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">maketag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>dlt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局加上dlt</span>
		<span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 修改f(i,x[i-1])</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局最小值</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>bzoj2863 愤怒的元首 题解</title>
    <url>/2021/bzoj2863-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://darkbzoj.tk/problem/2863">link</a></p>
<p>看到题目，就想起各种空耳了，<del>我到河北省来</del>（</p>
<p>大概意思是计算节点数为 <span class="math inline">\(n\)</span> 的 DAG
数量。</p>
<span id="more"></span>
<p>考虑</p>
<ul>
<li><p>DAG 有入度为 0 的点。</p></li>
<li><p>若一张图是 DAG，那么去除入度为 0 的节点后，它仍然是
DAG。</p></li>
</ul>
<p>设 <span class="math inline">\(f(i)\)</span> 为有 <span
class="math inline">\(i\)</span> 个节点的 DAG 的数量，<span
class="math inline">\(g(i,j)\)</span> 表示为有 <span
class="math inline">\(i\)</span> 个节点的 DAG，<strong>至少</strong>有
<span class="math inline">\(j\)</span> 个入度为 0 的节点的方案数。</p>
<p>为什么是「至少」?</p>
<p>因为准确个数的方案难以计算，且这样可以构造容斥。</p>
<p>$ C_i^j$ 表示 有 <span class="math inline">\(i\)</span> 个点的
DAG，任选 <span class="math inline">\(j\)</span> 个点，令其入度数是 0
的方案数。</p>
<p>这 <span class="math inline">\(j\)</span> 个点又可以向剩下 $ i-j$
个点连边。</p>
<p>方案数 <span class="math inline">\(j \times (i-j)\)</span>。</p>
<p>题目描述中又有这样一句话。</p>
<blockquote>
<p>Hint：基图不连通也是合法方案</p>
</blockquote>
<p>说明也可以不连边。</p>
<p>方案数 $2^{j (i-j)} $。</p>
<p>又因为乘法原理，所以还要乘 $ f(i-j)$。 <span class="math display">\[
g(i,j)=C_i^j \times 2^{j \times (i-j)} \times f(i-j)
\]</span> 将其累加就能求出 <span class="math inline">\(f\)</span>
数组了吗？</p>
<p>显然不行的，前面提到了「至少」构造的容斥。</p>
<p>不难想到，如果 <span class="math inline">\(j\)</span>
个点有不连边的情况，那么可能会增加入度为 0
节点个数，而这些是被「强行」计算了的。</p>
<p>即 入度为 0 节点个数大于 $ j$ 的方案数在 <span
class="math inline">\(g(i,j)\)</span> 中会被重复计算 <span
class="math inline">\(C^j_i\)</span> 次。</p>
<p>可以容斥。 <span class="math display">\[
f(i)=\sum_{j=1}^i{(-1)^{j-1} \times g(i,j) }
\]</span></p>
<p><span class="math display">\[
f(i)=\sum_{j=1}^i{(-1)^{j-1} \times C_i^j \times 2^{j \times (i-j)}
\times f(i-j)}
\]</span></p>
<p>实现的时候可以用 <span class="math inline">\(O(n)\)</span>
的时间预处理阶乘、逆元和 2 的整数次幂。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">3006</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll p<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> fac<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> inv<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> pw<span class="token punctuation">[</span>N<span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fac<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>inv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>inv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>pw<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>fac<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">%</span>p<span class="token punctuation">;</span>
        inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token operator">-</span>p<span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token operator">*</span>inv<span class="token punctuation">[</span>p<span class="token operator">%</span>i<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">(</span>inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*=</span>inv<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">*</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> pw<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>pw<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
ll <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> fac<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">*</span>inv<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token operator">*</span>inv<span class="token punctuation">[</span>n<span class="token operator">-</span>m<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>
        <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token punctuation">(</span>j<span class="token operator">&amp;</span><span class="token number">1</span><span class="token operator">?</span> <span class="token number">1ll</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1ll</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">C</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">*</span>pw<span class="token punctuation">[</span>j<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token operator">*</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">+</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DAG</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1120D Power Tree 题解</title>
    <url>/2022/cf1120d-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="part-1">part 1</h3>
<p>对子树操作，自然想到
DFS。但是题目里的操作仅仅是针对叶子节点的，所以用的不是纯粹的 DFS
序。通过这种办法，就能把子树操作转化为序列操作，而每个子树内所有的叶子要对应一个叶子编号的区间。</p>
<span id="more"></span>
<p>具体实现时我们只需要维护节点 <span class="math inline">\(x\)</span>
子树内叶子节点编号的左端点 <span class="math inline">\(l_x\)</span>
和右端点 <span class="math inline">\(r_x\)</span>。说明如果控制了 <span
class="math inline">\(x\)</span>，能够让我们对 <span
class="math inline">\([l_x,r_x]\)</span> 区间内的叶子修改一个值。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>	
	l<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 初值</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">==</span>fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		l<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 维护最左和最右编号</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>deg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> l<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>num<span class="token punctuation">;</span> <span class="token comment">// 叶子，赋值编号</span>
	e<span class="token punctuation">[</span><span class="token operator">++</span>m<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 下面会提到这一步</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>做完了这一步，似乎离解决还很远。</p>
<p>不要忘了本题最开始的目标，无论权值是多少，都能把所有叶子节点的权值变为
0。</p>
<p>这个该怎么入手？我们能做的只有区间加减法，怎么才能做到把权值都变为
0？</p>
<p>如果我们从「终态」去想，就能发现本题的巧妙之处。</p>
<p>一个全 0 序列，它的差分序列也全为 0！</p>
<p>而差分操作是在左端点 <span class="math inline">\(l\)</span>
修改上一个值，在右端点后一个位置 <span
class="math inline">\(r+1\)</span> 修改一个值。感性理解，就像是把 <span
class="math inline">\(l\)</span> 的值传递给了 <span
class="math inline">\(r+1\)</span>，如果传递的这个值就是 <span
class="math inline">\(l\)</span> 的权，那么 <span
class="math inline">\(l\)</span> 处将变为
0。这不就是一种无视具体权值，构造出 0 的办法吗？</p>
<p>更进一步的，从 <span class="math inline">\(r+1\)</span>
再往后传，一直传达到 <span class="math inline">\(n+1\)</span>
的时候，序列就变成了全 0！</p>
<p>差分序列全 0，原序列有两种情况。</p>
<ol type="1">
<li>全 0。显然是正确的。</li>
<li>全相等。但是如果我们在区间修改的时候在把这个值去掉，那么最终也还是全
0。</li>
</ol>
<p>呼之欲出了！</p>
<p>我们之前处理了每个点能控制的区间。能从 <span
class="math inline">\(l_x\)</span> 修改一个值到 <span
class="math inline">\(r_x+1\)</span>，不妨看作从 <span
class="math inline">\(l_x\)</span> 向 <span
class="math inline">\(r_x+1\)</span> 连了一条边，再建一个虚拟节点 <span
class="math inline">\(n+1\)</span>。</p>
<p>这样，当且仅当这张图连通时，能够把序列变为全
0。而当且仅当选择的边组成其最小生成树时，代价最小！</p>
<h3 id="part-2">part 2</h3>
<p>事情到这还没完。如果仔细看题面的话，就会发现他让输出的是最优解种可能的最小权值，可能的节点数以及可能的点。</p>
<p>转化一下，就是最优解的并集。</p>
<p>有不同最优解，当且仅当最小生成树不唯一，也就是有相同边权。</p>
<p>解决这个问题，我们只要再 Kruskal
算法里，分别处理权值相同的边，相当于缩成一个“点”。具体看注释。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">sort</span><span class="token punctuation">(</span>e<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>e<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>m<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">==</span>e<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span> <span class="token operator">++</span>j<span class="token punctuation">;</span>
        <span class="token comment">// 如果有权相等的边，那么这些边都可能在最小生成树里。为什么是可能？如果不连通的话就不在了</span>
        <span class="token comment">// 所以下面根据连通与否来分别统计，跑两遍是因为如果一边合并一边统计就会导致错误</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> x<span class="token operator">=</span>e<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token operator">=</span>e<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
			x<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">++</span>t<span class="token punctuation">,</span> v<span class="token punctuation">[</span>e<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
        <span class="token comment">// 统计可能在最优解中的点，这里的点指的原来的图中的点</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> x<span class="token operator">=</span>e<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token operator">=</span>e<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
			x<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> ans<span class="token operator">+=</span>e<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
        <span class="token comment">// 合并[i,j]这些点，正常统计边权</span>
		i<span class="token operator">=</span>j<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld %d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后按照<code>v</code>数组输出就行了。</p>
<p>剩下的代码</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> num<span class="token punctuation">,</span> m<span class="token punctuation">,</span> t<span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> deg<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">edge</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> id<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> e<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>edge a<span class="token punctuation">,</span>edge b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> a<span class="token punctuation">.</span>z<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token operator">?</span> x<span class="token operator">:</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>deg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">++</span>deg<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>构造</tag>
        <tag>生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1197D Yet Another Subarray Problem 题解</title>
    <url>/2022/cf1197d-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>还有比我菜的人吗？</p>
<h2 id="分析">分析</h2>
<p>最难处理的地方在于 <span class="math inline">\(\Delta =k \lceil
\frac{r-l+1}{m} \rceil\)</span>。</p>
<p>设 <span class="math inline">\(g(x) = x \bmod
m\)</span>，首先这是个在非负整数域上周期为 <span
class="math inline">\(m\)</span> 的周期函数。循环节为 <span
class="math inline">\([0,m-1]\)</span>。其次在每一个周期中 <span
class="math inline">\(g(x) \in [1,m-1]\)</span> 的 <span
class="math inline">\(x\)</span> 与下一个周期 <span
class="math inline">\(g(x)=0\)</span> 的 <span
class="math inline">\(x\)</span>，<span class="math inline">\(\lceil
\frac{x}{m} \rceil\)</span> 的值都是相等的。这启发我们从区间长度模 <span
class="math inline">\(m\)</span> 的值下手。</p>
<span id="more"></span>
<p>设 <span class="math inline">\(f(r,k)\)</span> 为右端点是 <span
class="math inline">\(r\)</span>，其左端点 <span
class="math inline">\(l\)</span> 满足 <span class="math inline">\(r-l+1
\bmod m = k\)</span>。</p>
<p>考虑最特殊的 <span class="math inline">\(m=1\)</span>
的情况，设区间长度为 <span
class="math inline">\(len\)</span>，上面那个式子永远是就是 $ k
len$。当区间长度变为 <span
class="math inline">\(len+1\)</span>，右端点到 <span
class="math inline">\(r+1\)</span> 时，<span
class="math inline">\(\Delta + k\)</span>，整个式子增加 <span
class="math inline">\(a_{r+1} -k\)</span>。</p>
<p>当 <span class="math inline">\(m\)</span>
是个一般数值时，就要用到取模了。设 <span class="math inline">\(len \bmod
m = k\)</span>，其中 <span class="math inline">\(k \neq m-1\)</span> 且
<span class="math inline">\(k \neq 0\)</span>，那么区间向右扩展到 <span
class="math inline">\(r+1\)</span> 时，只会增加 <span
class="math inline">\(a_{r+1}\)</span>，因为这是在 <span
class="math inline">\(g(x)\)</span> 的同一个周期内，<span
class="math inline">\(\Delta\)</span> 相同。 <span
class="math display">\[
f(r+1,k+1) = f(r,k)+a_{a_r+1} \quad k \in [1,m-2]
\]</span> 如果 <span class="math inline">\(k=m-1\)</span>，那么 <span
class="math inline">\(k+1 \mid
m\)</span>，进入下一个周期了。但是仍然相同，增加 <span
class="math inline">\(a_{r+1}\)</span>。 <span class="math display">\[
f(r+1,k+1) = f(r,m-1) + a_{r+1} \quad k=m-1
\]</span> 还有一种情况，当 <span class="math inline">\(k=0\)</span>
时，可以“重新开启一段新区间”的。新区间的权值为 <span
class="math inline">\(a_{r+1}-k\)</span>。如果重启新区间，由上述讨论知道权值会增加
<span class="math inline">\(a_{r+1}-k\)</span>。 <span
class="math display">\[
f(r+1,1) = \max{\{ f(r,0) + a_{r+1} ,a_{r+1}-k\}}
\]</span> 有意思的是，当 <span class="math inline">\(m=1\)</span>
的时候，<span class="math inline">\(k\)</span> 只能取
0，享受同级待遇。😅</p>
<h2 id="code">CODE</h2>
<p>上文为了方便叙述，转移用的是刷表法，代码里用的是填表法。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>m<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>k<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 特殊状态</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>j<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// j-1 mod m = m-1</span>
		<span class="token keyword">else</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 一般状态</span>
		ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1332E Height All the Same 题解</title>
    <url>/2022/cf1332e-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>首先转化一下题意。</p>
<p>对于一个 <span class="math inline">\(n \times m\)</span>
的格子图，每个格子都有一个初始权值 <span
class="math inline">\(a_{i,j}\)</span>，有两种操作：</p>
<ol type="1">
<li>将两个相邻格子的权值都 +1</li>
<li>将一个格子的权值 +2</li>
</ol>
<p>求能将所有格子的权值变为相同且满足每个权值都在 <span
class="math inline">\([L,R]\)</span> 范围内的初始局面的个数。</p>
<span id="more"></span>
<p>这种题目可以从奇偶性下手。</p>
<p>对于操作 1，实质是同时改变两个相邻格子的奇偶性。</p>
<p>对于操作 2，实质是在不改变该格子的奇偶性的前提下增大或减小权值。</p>
<p>那么只要我们让所有格子权值的奇偶性相同就行了。</p>
<p>设奇数个数为 <span class="math inline">\(A\)</span>，偶数个数为 <span
class="math inline">\(B\)</span>。那么有 <span class="math inline">\(n
\times m = A + B\)</span>。</p>
<p>考虑操作 1，如果那两个格子都是奇数，那么 <span
class="math inline">\(A+2\)</span>，如果一奇一偶，那么 <span
class="math inline">\(A\)</span> 不变，如果都为偶数，那么 <span
class="math inline">\(A-2\)</span>。也就是说，无论怎样改变使用操作
1，都不会改变 <span class="math inline">\(A\)</span> 的奇偶性，同时
<span class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 此消彼长，<span
class="math inline">\(B\)</span> 的奇偶性也不会变化。</p>
<p>由于最终一定会让 <span class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 的其中一个变成 0，所以 <span
class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 中至少有一个是偶数，否则无解。</p>
<p><del>但是似乎题目保证有解。</del></p>
<p>先说一下，向下图这样，将两个格子所在的路径上所有的格子都进行操作
1，最终就会单独改变这两个格子的奇偶性。</p>
<p><img data-src="https://s2.loli.net/2022/05/15/XAtmTSQCOpI9Na5.png" /></p>
<p>因此只要 <span class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 其中一个是偶数，就有解。</p>
<p>如何计数呢？再分成两种情况讨论。</p>
<ol type="1">
<li><span class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 一奇一偶</li>
</ol>
<p>由于 <span class="math inline">\(n \times m = A + B\)</span>，那么
<span class="math inline">\(n \times m\)</span> 是奇数，从而 <span
class="math inline">\(n\)</span> 与 <span
class="math inline">\(m\)</span> 都是奇数。</p>
<p>在这种情况下，要么 <span class="math inline">\(A\)</span>
是奇数，要么 <span class="math inline">\(B\)</span>
是奇数。所以无论图中初始权值是多少，都一定能满足上述条件，随便选就行。</p>
<p>由于每个格子的取值都在 <span class="math inline">\([L,R]\)</span>
中，所以答案为 <span class="math inline">\((R-L+1)^{n \times
m}\)</span></p>
<ol start="2" type="1">
<li><span class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 都是偶数</li>
</ol>
<p>不难得到 <span class="math inline">\(n \times m\)</span> 是偶数。</p>
<p>由于要保证 <span class="math inline">\(A\)</span> 是偶数，所以答案是
<span class="math display">\[
\sum_{2 \mid A}^{nm} C_{nm} ^A \cdot k^A \cdot l^B
\]</span> 其中 <span class="math inline">\(k\)</span> 是 <span
class="math inline">\([L,R]\)</span> 中的奇数个数，<span
class="math inline">\(l\)</span> 为 <span
class="math inline">\([L,R]\)</span> 中的偶数个数。</p>
<p>然而这个式子是没法求的，根本找不到 <span
class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span>。</p>
<p>考虑二项式定理 <span class="math display">\[
(k+l)^{nm} = \sum_{a=0}^{nm} C_{nm}^a \cdot k^a \cdot l^{nm-a}
\]</span></p>
<p><span class="math display">\[
(k-l)^{nm} = \sum_{a=0}^{nm} (-1)^{a} C_{nm}^a \cdot k^a \cdot l^{nm-a}
\]</span></p>
<p>由于 <span class="math inline">\(B = n \times m -
A\)</span>，所以将两式相加，<span class="math inline">\(a\)</span>
是奇数时相抵消，<span class="math inline">\(a\)</span>
是偶数时算了两遍，最终答案是 <span class="math display">\[
\frac{(k+l)^{nm} + (k-l)^{nm}}{2}
\]</span></p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> ll p<span class="token operator">=</span><span class="token number">998244353</span><span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">;</span>
ll <span class="token function">fp</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ll z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>y<span class="token punctuation">;</span>x<span class="token operator">=</span>x<span class="token operator">*</span>x<span class="token operator">%</span>p<span class="token punctuation">,</span>y<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> z<span class="token operator">=</span>z<span class="token operator">*</span>x<span class="token operator">%</span>p<span class="token punctuation">;</span>
	<span class="token keyword">return</span> z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token operator">&amp;</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>
	ll w<span class="token operator">=</span>R<span class="token operator">-</span>L<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>m<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">fp</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>n<span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		ll k<span class="token operator">=</span>R<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token punctuation">(</span>L<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
		ll l<span class="token operator">=</span>w<span class="token operator">-</span>k<span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">fp</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">+</span>l<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">,</span>n<span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fp</span><span class="token punctuation">(</span>k<span class="token operator">-</span>l<span class="token operator">+</span>p<span class="token punctuation">,</span>n<span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">499122177</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 499122177是2在模998244353意义下的逆元</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1359E Modular Stability 题解</title>
    <url>/2022/cf1359e-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>由于 <span class="math inline">\(a_1\)</span>
时最小的，所以对于长度为 <span class="math inline">\(k\)</span> 的序列
<span class="math inline">\(\{a_i\}\)</span>，取模每一项最后的结果是
<span class="math inline">\(x \bmod a_1\)</span>。</p>
<p>而对于下标的任意排列，显然 <span class="math inline">\(\forall p_i
&lt; p_1\)</span>，都必须满足 <span class="math inline">\(x \bmod a_1 =
x \bmod a_i\)</span>，即 <span class="math inline">\(a_1 \mid
a_i\)</span>，不然最后的结果就会改变。当 <span
class="math inline">\(a_1\)</span> 为首项时，就得到了 <span
class="math inline">\(\forall i \in [1,k]\quad a_1 \mid
a_i\)</span>。</p>
<span id="more"></span>
<p>所以，我们只要枚举首项 <span class="math inline">\(a_1\)</span>，在
<span class="math inline">\([1,n]\)</span> 范围 <span
class="math inline">\(a_1\)</span> 的倍数个数为 <span
class="math inline">\(\lfloor \frac{n}{a_1}
\rfloor\)</span>，我们要从中选取 <span
class="math inline">\(k-1\)</span> 个数作为其他项，所以答案就是 <span
class="math display">\[
\sum_{i=1} ^n C_{\lfloor \frac{n}{i} \rfloor -1} ^ {k-1}
\]</span> 统计就好了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll p<span class="token operator">=</span><span class="token number">998244353</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
ll fac<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> inv<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">;</span>
ll <span class="token function">C</span><span class="token punctuation">(</span>ll n<span class="token punctuation">,</span>ll m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> fac<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">*</span>inv<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token operator">*</span>inv<span class="token punctuation">[</span>n<span class="token operator">-</span>m<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fac<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1ll</span><span class="token punctuation">,</span> inv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>inv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1ll</span><span class="token punctuation">;</span>
    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5e5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>fac<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">%</span>p<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token operator">-</span>p<span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token operator">*</span>inv<span class="token punctuation">[</span>p<span class="token operator">%</span>i<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5e5</span><span class="token punctuation">)</span> inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>inv<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token punctuation">;</span>
    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">/</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span>ans<span class="token operator">+=</span><span class="token function">C</span><span class="token punctuation">(</span>n<span class="token operator">/</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1338B Edge Weight Assignment 题解</title>
    <url>/2022/cf1338b-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>没错还是构造……</p>
<p>明确某个数异或另一个数偶数次，结果仍然是它本身。</p>
<p>再明确所有的数字都是正整数，不能用 <span
class="math inline">\(0\)</span>。</p>
<span id="more"></span>
<p>任意两个叶子之间的路径权值的异或和为 <span
class="math inline">\(0\)</span>，如果它们之间的距离是偶数的话，那么都填同一个数就好了。最小数量为
<span class="math inline">\(1\)</span>。</p>
<p>如果存在某两个叶子之间的距离不为偶数，如下图 <span
class="math inline">\(1\)</span> 和 <span
class="math inline">\(5\)</span>。</p>
<p><img data-src="https://s2.loli.net/2022/07/02/pLqGWyH7XKi9hul.png" /></p>
<p>钦定 <span class="math inline">\((1 \rightarrow 3)\)</span> 的权值为
<span class="math inline">\(39\)</span>，那么如果 <span
class="math inline">\((3 \rightarrow 4)\)</span> 或者 <span
class="math inline">\((4 \rightarrow 5)\)</span> 任何一个是 <span
class="math inline">\(39\)</span>，<span class="math inline">\(39
\operatorname{xor} 39 =0\)</span>，结果都是另一条边的权值。所以假如
<span class="math inline">\((4 \rightarrow 5)\)</span> 是 <span
class="math inline">\(815\)</span>，那么 <span class="math inline">\((3
\rightarrow 4)\)</span> 只有是 <span class="math inline">\(39
\operatorname{xor} 815=776\)</span> 才能满足异或和为 <span
class="math inline">\(0\)</span>。</p>
<p>其实这就相当于把两条边「合并」为一条边，权值为它们的异或值，这样奇数距离就转化成了偶数。至于更长的奇数距离的情况，依旧这样去做，不难发现这种情况下最少使用
<span class="math inline">\(3\)</span> 种权值。</p>
<p>那么最多呢？直接做不好想，考虑从它的补集入手。如果没有任何限制，那么一定是每一条边一个权值，共有
<span class="math inline">\((n-1)\)</span>
种。然后再减去会「因为某些边权的确定而被动确定的边」就行了。</p>
<p>依旧是上图，假如上述权值不变，那么 <span class="math inline">\((2
\rightarrow 3)\)</span> 能够填什么呢？<span class="math inline">\((1
\rightarrow 5)\)</span> 和 <span class="math inline">\((2 \rightarrow
5)\)</span>，在 <span class="math inline">\((3 \rightarrow 5)\)</span>
这一段是重叠的，只有 <span class="math inline">\((2 \rightarrow
3)\)</span> 的权值与 <span class="math inline">\((1 \rightarrow
3)\)</span> 相同，才能让异或和为 <span
class="math inline">\(0\)</span>。不难发现，对于同一个父亲的叶子节点，它们与父亲之间的边只能是一种。假如一个点
<span class="math inline">\(x\)</span> 有 <span
class="math inline">\(t_x\)</span> 个叶子节点，其中 <span
class="math inline">\(t_x-1\)</span>
条边的权值一定是与剩下那一条相同的。</p>
<p>综上所述，权值最多的情况，就是 <span class="math display">\[
n-1 - \sum_{x \in V \text{ and } t_x \ge 1} t_x -1
\]</span> 注意如果 <span class="math inline">\(t_x=1\)</span>，贡献是
<span class="math inline">\(0\)</span>，如果 <span
class="math inline">\(t_x=0\)</span> 也没有贡献。</p>
<p> </p>
<p>因为是无根树，所以要钦定根节点。</p>
<p>对于寻找最小数量，可以找到一个叶子节点作为根，判断它到其他叶子节点的距离是否都是偶数，是的话答案为
<span class="math inline">\(1\)</span>，否则为 <span
class="math inline">\(3\)</span>。因为树的奇妙性质所以不会存在某个叶子和另一个叶子到「根」的距离是偶数，但是它们之间的距离是奇数的问题。</p>
<p>对于寻找最大值，还在叶子节点的话会产生遗漏，所以从以一个非叶子节点为根，统计
<span class="math inline">\(t_x\)</span>。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> sum<span class="token punctuation">;</span>
<span class="token keyword">int</span> tot<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> to<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">,</span><span class="token keyword">int</span> dis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>nxt<span class="token punctuation">[</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>dis<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 与某个叶子节点距离为奇数</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> y<span class="token operator">=</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">==</span>fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs1</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>dis<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> y<span class="token operator">=</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">==</span>fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs2</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token operator">+=</span><span class="token operator">!</span>nxt<span class="token punctuation">[</span>h<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// !nxt[h[y]]=1，叶子</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> sum<span class="token operator">+=</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> root<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">!</span>root<span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>nxt<span class="token punctuation">[</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> root<span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token comment">// 叶子节点</span>
    <span class="token function">dfs1</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">!</span>root<span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nxt<span class="token punctuation">[</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> root<span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token comment">// 非叶子节点</span>
    <span class="token function">dfs2</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>flag<span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>n<span class="token operator">-</span>sum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1385E Directing Edges 题解</title>
    <url>/2022/cf1385e-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>可以把给无向边一个方向的过程看作加有向边的过程。</p>
<span id="more"></span>
<p>如果在原来有向边组成的图中有环，那么无论如何加边都不可能变成一张
DAG，无解。</p>
<p>考虑到在 DAG 中，对于一条有向边 <span class="math inline">\((x
\rightarrow y)\)</span>，<span class="math inline">\(x\)</span>
的拓扑序一定小于 <span
class="math inline">\(y\)</span>。所以根据这个来构造，在原图上求出拓扑序。对于一条无向边
<span class="math inline">\((x \rightarrow y)\)</span>，如果 <span
class="math inline">\(y\)</span> 的拓扑序大于 <span
class="math inline">\(x\)</span> 的，那么就从 <span
class="math inline">\(x\)</span> 向 <span
class="math inline">\(y\)</span> 连一条边，否则就反过来。</p>
<p>题目中说图不一定连通，但是不影响判环和求拓扑序。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> tot<span class="token punctuation">,</span> in<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> topo<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">toposort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		topo<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>num<span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>in<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> num<span class="token operator">==</span>n<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	tot<span class="token operator">=</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>topo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> op<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
		a<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>in<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">toposort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span> y<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>
        <span class="token comment">// 这里是直接存了所有边</span>
        <span class="token comment">// 因为如果a[i]是有向边，那么topo[x]一定小于topo[y]，不影响</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>topo<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">></span>topo<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>构造</tag>
        <tag>拓扑排序</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1416B Make Them Equal 题解</title>
    <url>/2022/cf1416b-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p><del>构造题使人神清气爽</del>。</p>
<p>先判断无解的情况，如果 <span class="math inline">\(n \nmid
\sum_{i=1}^n a_i\)</span>，那么显然无解。</p>
<p>做构造题不能只局限于样例给出的方法，因为它们一般都是特殊情况，而我们的目标是使用一般方法进行构造。</p>
<span id="more"></span>
<p>注意到无论怎么操作，元素的总和是不变的，我们可以尝试把所有值移动到一个元素上，然后因为
<span class="math inline">\(n \nmid \sum_{i=1}^n
a_i\)</span>，所以一定能够用 <span class="math inline">\((n-1)\)</span>
次操作平均分。</p>
<p>如果这么做，那么必然除了那个元素，其他的元素都是 <span
class="math inline">\(0\)</span>。对于一个操作 <span
class="math inline">\((i,j,x)\)</span>，如果想让 <span
class="math inline">\(a_i\)</span> 置为 <span
class="math inline">\(0\)</span>，那么必须满足 <span
class="math inline">\(i \mid a_i\)</span>。对于 <span
class="math inline">\(i \nmid a_i\)</span> 的情况，则要事先将 <span
class="math inline">\(a_i\)</span> 增大到满足 <span
class="math inline">\(i \mid a_i\)</span>。</p>
<p>增大多少呢？<span class="math inline">\(i-a_i \bmod
i\)</span>，这是显然的。如果操作是 <span
class="math inline">\((j,i,x)\)</span>，想让 <span
class="math inline">\(a_i\)</span> 变大，其值必定是 <span
class="math inline">\(j\)</span>
的倍数。为了能够增加任意值，钦定都移动到 <span
class="math inline">\(a_1\)</span> 上。</p>
<p>那么对于 <span class="math inline">\(i \nmid a_i\)</span>，必定先使用
<span class="math inline">\((1,i,k)\)</span>，其中 <span
class="math inline">\(k = i - a_i \bmod i\)</span>。那么将 <span
class="math inline">\(a_i\)</span> 清零，使用 <span
class="math inline">\((i,1,\frac{a_i}{i})\)</span>。如此至多使用 <span
class="math inline">\(2 \cdot (n-1)\)</span> 次操作，再使用 <span
class="math inline">\((n-1)\)</span> 次 <span
class="math inline">\((1,i,ave)\)</span>，其中 <span
class="math inline">\(ave = \frac{\sum_{i=1}^n
a_i}{n}\)</span>。总操作数 <span class="math inline">\(3 \cdot
(n-1)\)</span>，满足条件。</p>
<p>有一个疑问，<span class="math inline">\(a_i\)</span>
难道不会在残酷的修改中变为负数吗？假如 <span
class="math inline">\(a_2\)</span> 就需要进行增加操作，必然 <span
class="math inline">\(a_i\)</span> 要减小一个值。但是这个值是 <span
class="math inline">\(2 - a_2 \bmod 2\)</span>，由于 <span
class="math inline">\(2 \nmid a_2\)</span>，所以这个值一定是 <span
class="math inline">\(1\)</span>。而 <span class="math inline">\(a_i \in
[1,10^5]\)</span>，所以绝对不是负数。</p>
<p>而后至少要增加 <span class="math inline">\(2\)</span>（将 <span
class="math inline">\(a_2\)</span> 置 <span
class="math inline">\(0\)</span>），所以当修改 <span
class="math inline">\(a_3\)</span> 时，<span
class="math inline">\(a_1\)</span> 至少是 <span
class="math inline">\(3\)</span>，如果要让 <span class="math inline">\(3
\mid a_3\)</span>，那么 <span class="math inline">\(a_1\)</span>
减少的量又一定小于 <span class="math inline">\(3\)</span>，接着加上至少
<span class="math inline">\(3\)</span>。如此类推，不会出现小于 <span
class="math inline">\(0\)</span> 的情况。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e4</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>node<span class="token operator">></span> ans<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pb</span> <span class="token expression">push_back</span></span>
<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> sum<span class="token operator">+=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">%</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> ave<span class="token operator">=</span>sum<span class="token operator">/</span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> k<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span>i<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> k<span class="token operator">=</span>i<span class="token operator">-</span>k<span class="token punctuation">;</span>
        ans<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>k<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-=</span>k<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>k<span class="token punctuation">;</span>
        <span class="token comment">// 如果k=0，这一步可以没有，但是下一步必须要有</span>
        ans<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>i<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>ave<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> a<span class="token operator">:</span>ans<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>i<span class="token punctuation">,</span>a<span class="token punctuation">.</span>j<span class="token punctuation">,</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    T<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1582E Pchelyonok and Segments 题解</title>
    <url>/2022/cf1582e-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>倒着选区间。</p>
<p>设 <span class="math inline">\(f(i,k)\)</span> 表示从 <span
class="math inline">\([i,n]\)</span> 中选择 <span
class="math inline">\(k\)</span>
个区间，其中最后一个区间（也就是最长的，最靠近 <span
class="math inline">\(i\)</span> 的区间）的最大值。</p>
<span id="more"></span>
<p>当 <span class="math inline">\(k=1\)</span> 时 <span
class="math display">\[
f(i,k) = \max{\{ f(i+1,k),a_i \}}
\]</span> 当 <span class="math inline">\(i+k-1 \le n\)</span> 且 <span
class="math inline">\(S(i,i+k-1) &lt; f(i+k,k-1)\)</span> 时 <span
class="math display">\[
f(i,k) = \max{\{ f(i+1,k),S(i+k,k-1) \}}
\]</span> 限制条件是由于</p>
<ol type="1">
<li>选择包括 <span class="math inline">\(i\)</span> 在内的长度为 <span
class="math inline">\(k\)</span> 的区间不能越界。</li>
<li><span class="math inline">\(f(i+k,k-1)\)</span>
实际上就是上一个区间的最大值，要符合题意，<span
class="math inline">\(S(i+k,k-1)\)</span> 这一段和必须严格小于它。</li>
</ol>
<p>最后倒序枚举 <span class="math inline">\(k\)</span>，首个非 0 的
<span class="math inline">\(f(1,k)\)</span> 中的 <span
class="math inline">\(k\)</span> 即为答案。</p>
<p><span class="math inline">\(\frac{k(k+1)}{2} \le n\)</span>，是 <span
class="math inline">\(O(\sqrt n)\)</span> 级别的。</p>
<p>复杂度 <span class="math inline">\(O(n \sqrt n)\)</span>。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> K<span class="token operator">=</span><span class="token number">505</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll inf<span class="token operator">=</span><span class="token number">1e16</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> lim<span class="token punctuation">;</span>
ll s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	lim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>inf<span class="token punctuation">;</span>
    <span class="token comment">// 边界</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">*</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span> lim<span class="token operator">=</span>k<span class="token punctuation">;</span>
        <span class="token comment">// 如果成立，表示这个k合法，下一个就不合法了</span>
        <span class="token comment">// lim记录最大的k，不然开平方会有误差。</span>
		f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
		ll S<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1ll</span><span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&amp;&amp;</span>i<span class="token operator">+</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>S<span class="token operator">&lt;</span>f<span class="token punctuation">[</span>i<span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>lim<span class="token punctuation">;</span>k<span class="token punctuation">;</span><span class="token operator">--</span>k<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1542B Plus and Multiply 题解</title>
    <url>/2022/cf1542b-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>等价于判断 <span class="math inline">\(n\)</span> 能否写成如下形式
<span class="math display">\[
n = a^x + by
\]</span> 多乘个 <span class="math inline">\(a\)</span> 或者多加个 <span
class="math inline">\(b\)</span> 仍然形如这样。</p>
<span id="more"></span>
<p>这就相当于 <span class="math display">\[
n \equiv a^x \quad (\bmod b)
\]</span> 因为 <span class="math inline">\(y\)</span>
是个未知数，可以利用这个转化同余方程。或者说，<span
class="math inline">\(x \equiv y \quad (\bmod b) \iff b \mid
(x-y)\)</span>。注意这里的 <span class="math inline">\(x,y,b\)</span>
是任意的。</p>
<p>这个就很简单了，枚举 <span class="math inline">\(x\)</span>，满足
<span class="math inline">\(a^x \in [1,n]\)</span>，判断 <span
class="math inline">\(a^x \bmod b\)</span> 是否等于 <span
class="math inline">\(n \bmod b\)</span>。</p>
<p>为什么只用枚举使得 <span class="math inline">\(a^x \in [1,n]\)</span>
的 <span class="math inline">\(x\)</span>？因为 <span
class="math inline">\(a,b \in \mathbb{Z^+}\)</span>，那么如果 <span
class="math inline">\(a^x\)</span> 大于 <span
class="math inline">\(n\)</span> 的话，就不可能了。</p>
<p>注意特判，当 <span class="math inline">\(a=1\)</span> 时，等价于
<span class="math inline">\(n \equiv 1 \quad (\bmod
b)\)</span>，如果成立的话，有两种情况。第一种可以直接判断 <span
class="math inline">\(n \bmod b\)</span> 是否为 1，第二种，如果 <span
class="math inline">\(b=1\)</span>，那么 <span
class="math inline">\(n\)</span> 为任何数时都成立。其他情况都无解。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">long</span> <span class="token keyword">long</span> T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>b<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>b<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> y<span class="token operator">=</span>n<span class="token operator">%</span>b<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>ll x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>x<span class="token operator">*=</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>b<span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>CF359B Permutation 题解</title>
    <url>/2022/cf359b-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>小清新构造题。</p>
<span id="more"></span>
<p>不难发现，对于一个有序序列，假设是 <span class="math display">\[
[1,2,3,4,5,6]
\]</span> 那么 <span class="math display">\[
\sum_{i=1}^3 | a_{2i} - a_{2i-1} | = | \sum_{i=1}^3  a_{2i} - a_{2i-1} |
= 3
\]</span> 把 <span class="math inline">\(2\)</span> 提前， <span
class="math display">\[
[2,1,3,4,5,6]
\]</span> 发现得到的结果是 <span class="math inline">\(2\)</span>。</p>
<p>把 <span class="math inline">\(3\)</span> 提前， <span
class="math display">\[
[3,1,2,4,5,6]
\]</span> 发现得到的结果是 <span class="math inline">\(4\)</span>。</p>
<p>把 <span class="math inline">\(j\)</span> 提前，<span
class="math inline">\(a_2-a_1=1 - j =
-(j-1)\)</span>，而在左式中直接绝对值没了，对答案贡献 <span
class="math inline">\(j-1\)</span>，而右式则会让答案减少 <span
class="math inline">\(j-1\)</span>。其他的都是一一对应的，一减就没了。那么把
<span class="math inline">\(j\)</span> 提前的答案就是 <span
class="math inline">\(2 \cdot (j-1)\)</span>。</p>
<p>直接把 <span class="math inline">\(k+1\)</span>
提前，其他的顺序输出。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>k<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d%c"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token string">" \n"</span><span class="token punctuation">[</span>i<span class="token operator">==</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>CF449B Jzzhu and Cities 题解</title>
    <url>/2022/cf449b-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>设 <span class="math inline">\(d(x)\)</span> 为 <span
class="math inline">\(1\)</span> 到 <span
class="math inline">\(x\)</span> 的最短路径长度，<span
class="math inline">\(cnt(x)\)</span> 为最短路条数。</p>
<p>不难发现，对于一条特殊边 <span class="math inline">\((1 \rightarrow
x)\)</span>，边权为 <span
class="math inline">\(w\)</span>，它能被删除，当且仅当满足以下条件之一。</p>
<span id="more"></span>
<ul>
<li><span class="math inline">\(w &gt; d(x)\)</span></li>
<li><span class="math inline">\(w= d(x)\)</span> 并且 <span
class="math inline">\(cnt(x) &gt; 1\)</span></li>
</ul>
<p>所以直接在图上跑 Dijkstra，求出最短路及其数量，最后判断就好了。</p>
<p>没啥难度，但是好像会卡掉常规 SPFA。</p>
<p>顺带一提样例 2 里面，2 个点 5 条边，稠密图警告。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mp</span> <span class="token expression">make_pair</span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> u<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>M<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>M<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
priority_queue<span class="token operator">&lt;</span>PII <span class="token operator">></span> q<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ver<span class="token punctuation">[</span><span class="token operator">++</span>c<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> w<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">mp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
		vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token comment">// 此时长度为d[x]+z的到达y的最短路只有1条</span>
				q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">mp</span><span class="token punctuation">(</span><span class="token operator">-</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 长度相等，另一条最短路。</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">;</span> 
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>cnt<span class="token punctuation">[</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">,</span> <span class="token operator">--</span>cnt<span class="token punctuation">[</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>CF372C Watching Fireworks is Fun 题解</title>
    <url>/2021/cf372c-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="题外话">题外话</h2>
<p>前天英语考试，作文是</p>
<blockquote>
<p>假如你是李华，你的美国朋友 Jack
对中国传统文化很感兴趣，他写信希望你能够告诉他有关春节的事情，请你写一封回信给他。开头和结尾已经给出，不计入总词数……</p>
</blockquote>
<p>然后因为做过这道题，我就记住了 Firework
这个词，在这篇作文中竟然用上了（</p>
<span id="more"></span>
<h2 id="solution">solution</h2>
<p>设 <span class="math inline">\(f_{i,j}\)</span> 为第 <span
class="math inline">\(i\)</span> 个烟花 <span
class="math inline">\(blooms\)</span> 时，在第 <span
class="math inline">\(j\)</span> 个位置所能得到的最大开心值。</p>
<p>边界 <span class="math inline">\(f_{0,i}=0 \quad i \in
[1,n]\)</span>。</p>
<p>转移是显然的（好像这类题的朴素转移都挺显然的） <span
class="math display">\[
f_{i,j} = \min_{1 \le k \le n} { \{ f_{i-1,k} + b_i - \left| a_i-j
\right| \} }
\]</span> 然后得到了一个喜人的复杂度 <span
class="math inline">\(O(mn^2)\)</span></p>
<p>考虑优化，期望复杂度 <span class="math inline">\(O(mn)\)</span>。</p>
<p>首先是 <span class="math inline">\(n \le 1.5 \times 10^5,m \le
300\)</span>，空间不能承受，并且阶段 $ i$ 只与阶段 <span
class="math inline">\(i-1\)</span> 有关，滚动数组优化即可。</p>
<p>优化后只有两维，设当前维度为 $ w$，另一维为 <span
class="math inline">\(w \text{ xor } 1\)</span>。</p>
<p>不难发现转移的瓶颈在于枚举 <span
class="math inline">\(k\)</span>，且状态符合 1D/1D
模型，考虑单调队列优化。</p>
<p>设 $ i-1$ 阶段，位置在 <span class="math inline">\(k\)</span>。对于 $
(i,j)$，能够向右移动到为区间为 <span class="math display">\[
[k, \min \big( j+ d \cdot (t_i-t_{i-1}) \big) ]
\]</span> 枚举每个合法的 <span
class="math inline">\(k\)</span>，在单调队列中维护 <span
class="math inline">\(f_{w \text{ xor } 1,j}\)</span> 单调减。</p>
<p>能够向左到达的区间为 <span class="math display">\[
[ \max \big( 1,j- d \cdot (t_i-t_{i-1}) \big), k ]
\]</span> 排除掉队首小于左边界的决策即可。</p>
<p>设队首为 $ k$。</p>
<p>最終の轉移！ <span class="math display">\[
f_{w,j} = f_{w \text{ xor } 1,k}+b_i- \left| a_i-j \right|
\]</span> 虽然有枚举合法区间内的决策，但无伤大雅，可以看作常数。</p>
<p>复杂度 <span class="math inline">\(O(mn)\)</span>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">150005</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">305</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> d<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> w<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> o<span class="token punctuation">,</span> u<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        l<span class="token operator">=</span>k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            o<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1ll</span><span class="token operator">*</span>n<span class="token punctuation">,</span>j<span class="token operator">+</span>d<span class="token operator">*</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>t<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            u<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1ll</span><span class="token punctuation">,</span>j<span class="token operator">-</span>d<span class="token operator">*</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>t<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>o<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>f<span class="token punctuation">[</span>w<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>f<span class="token punctuation">[</span>w<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span>r<span class="token punctuation">;</span>
                q<span class="token punctuation">[</span><span class="token operator">++</span>r<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;</span>u<span class="token punctuation">)</span> <span class="token operator">++</span>l<span class="token punctuation">;</span>
            f<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>w<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        w<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span>   
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    R ll ans<span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1ll</span><span class="token operator">&lt;&lt;</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>w<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>单调队列优化</tag>
      </tags>
  </entry>
  <entry>
    <title>CF482A Diverse Permutation 题解</title>
    <url>/2022/cf482a-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>话说这题为啥要写题解啊？</p>
<p>因为，我最最最最不擅长的构造题，我最最最最期望的「构造作战」，还是要从水题开始攻克吧。</p>
<span id="more"></span>
<p>如何构造 <span class="math inline">\(k\)</span> 种差值呢？ <span
class="math display">\[
[1,k+1,2,k,3,k-1 \cdots]
\]</span> 这样构造的插值是 <span class="math inline">\(k,k-1,k-2
\cdots\)</span>，那么就可以用 <span class="math inline">\(k+1\)</span>
个数字构造出 <span class="math inline">\([1,k]\)</span>
中所有的差值。</p>
<p>照这样，维护两个指针 <span class="math inline">\(i=1\)</span> 与
<span class="math inline">\(j=k+1\)</span>，这样就确定了一个差值。然后让
<span class="math inline">\(i+1\)</span>，<span
class="math inline">\(j-1\)</span>，又确定一个差值，知道 <span
class="math inline">\(i \ge j\)</span>。如果这样操作之后出现了 <span
class="math inline">\(i=j\)</span> 的情况，那么就说明 <span
class="math inline">\(k+1\)</span> 是个奇数，进而 <span
class="math inline">\(k\)</span> 是偶数。由于一轮确定 2 个数，假设进行了
<span class="math inline">\(t\)</span> 轮，那么就有了 <span
class="math inline">\(2t\)</span> 个数确定了 <span
class="math inline">\(2t-1\)</span>
个差值，这显然是个奇数。所以还要再补上一个 <span
class="math inline">\(i\)</span>。</p>
<p>那么后面的怎么搞呢？我们只用到了 <span
class="math inline">\([1,k+1]\)</span> 的数，且一定全部用完并包含 1
这个差值。那么只要顺序输出 <span class="math inline">\([k+2,n]\)</span>
所有的数就能满足条件。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">=</span>i<span class="token operator">+</span>k<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d "</span><span class="token punctuation">,</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>k<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d%c"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token string">" \n"</span><span class="token punctuation">[</span>i<span class="token operator">==</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu1291 百事世界杯之旅 题解</title>
    <url>/2022/lg1291-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>有一个显然的结论：设当前已经获得的名字个数为 <span
class="math inline">\(k\)</span>，那么再获得其他名字的概率为 <span
class="math inline">\(\frac{n-k}{n}\)</span>。也就是说，平均买 <span
class="math inline">\(n\)</span> 次有 <span
class="math inline">\(n-k\)</span>
个其他的名字，那么再获得一个平均次数为 <span
class="math inline">\(\frac{n}{n-k}\)</span>。</p>
<span id="more"></span>
<p><del>感性理解一下</del>。</p>
<p>事实上有这个定理，对于事件 <span class="math inline">\(A\)</span>，有
<span class="math inline">\(P(A)=p\)</span>，那么发生 <span
class="math inline">\(A\)</span> 的期望次数 <span
class="math inline">\(E(A)= \frac{1}{p}\)</span>。</p>
<p>回到题目，就是要求 <span class="math inline">\(\sum_{i=1}^n
\frac{n}{i}\)</span>。要输出为分数形式，那么分别计算分子与分母，最后判断输出就行了。细节见代码。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
ll p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> r<span class="token punctuation">;</span>
ll <span class="token function">gcd</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> y<span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token operator">%</span>y<span class="token punctuation">)</span><span class="token operator">:</span>x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// p是分子，q是分母</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		p<span class="token operator">=</span>p<span class="token operator">*</span>i<span class="token operator">+</span>q<span class="token operator">*</span>n<span class="token punctuation">,</span> q<span class="token operator">*=</span>i<span class="token punctuation">;</span>
        <span class="token comment">// 模拟分数加法，可以自己验证一下</span>
		ll d<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 及时化简分子分母</span>
		p<span class="token operator">/=</span>d<span class="token punctuation">,</span> q<span class="token operator">/=</span>d<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	r<span class="token operator">=</span>p<span class="token operator">/</span>q<span class="token punctuation">,</span> p<span class="token operator">%=</span>q<span class="token punctuation">;</span>
    <span class="token comment">// r是整数部分，p要去掉r*q这部分</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 分子是0，表示r是整数</span>
	<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> d<span class="token operator">=</span><span class="token function">log10</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 整数x的位数=log10(x)+1</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>d<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
		d<span class="token operator">=</span><span class="token function">log10</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果有带分数整数部分，就输出</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>d<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		d<span class="token operator">=</span><span class="token function">log10</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>d<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>概率论</tag>
        <tag>数学期望</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu2680 运输计划 题解</title>
    <url>/2021/lg2680-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>最小化完成所有任务的时间，考虑二分答案。</p>
<p>用 <span class="math inline">\(lca\)</span>
算法预处理每个计划的距离，设第 <span class="math inline">\(i\)</span>
个计划的距离为 <span class="math inline">\(W_i\)</span></p>
<span id="more"></span>
<p>如何判断完成任务的时间 <span class="math inline">\(t\)</span>
是否可行呢？</p>
<p>不难想到，有以下两种情况。</p>
<ol type="1">
<li>$ _{1 i m}{ { W_i }} t$。</li>
<li>将一条边权 为 <span class="math inline">\(dlt\)</span> 的边改为
0（虫洞）后，$ _{1 i m}{ { W_i - dlt }} t$。</li>
</ol>
<p>第一种情况很容易判断。</p>
<p>对于第二种情况，不难发现：将一条边权为 <span
class="math inline">\(len\)</span> 的边改为 0 后能使所有距离大于 <span
class="math inline">\(t\)</span> 的计划距离都变成不大于<span
class="math inline">\(t\)</span>，当且仅当这些计划交于此边，且 $ len _{1
i m}{ { W_i - t }}$</p>
<p>这是显然的，证明略。</p>
<p>明确这个之后，问题仅仅在于，如何快速统计每条边被计划经过的次数和权。</p>
<p>边权不难求，用倍增 <span class="math inline">\(lca\)</span> 的 <span
class="math inline">\(f\)</span> 与 <span
class="math inline">\(dis\)</span> 数组即可。设 <span
class="math inline">\((x \rightarrow f(x,0))\)</span> 边权为 <span
class="math inline">\(d_x\)</span>，到根的距离为 <span
class="math inline">\(dis_x\)</span></p>
<p>则 $ d_x=dis_x-dis(f(x,0)) $</p>
<p>考虑统计经过次数。</p>
<p>如果朴素地去统计，复杂度是 $ O(n)$ 的。可以用树上差分。</p>
<p>用一个计数数组 $ K$ 记录差分，计划 $ (x y)$，令 <span
class="math display">\[
K(x)+1,K(y+1),K(z)-2 \quad z=lca(x,y)
\]</span>
然而这个不像一般树上差分一样，统计子树信息。而且上述做法是边权差分，需要转化成点。</p>
<p>考虑每个计划路径是一条链，所以只需要统计每条链的信息就行了。</p>
<p>我们记录搜索树中每次访问到的点，即为 $ idf$。因为搜索树是一个
DAG，所以这个东西倒序就是逆拓扑序。</p>
<p>按照这个顺序令 $ K(f(idf(x),0))+K(idf(x))$
就能自底向上统计出每个点的信息。</p>
<p>然后判断上述两种情况就行了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idf<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">E</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> w<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> g<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>c<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> w<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> fr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
    idf<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">,</span> d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>fr<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>fr<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token operator">&lt;</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">lca</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&lt;</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">,</span>j<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">></span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">++</span>k<span class="token punctuation">[</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">++</span>k<span class="token punctuation">[</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">[</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">]</span><span class="token operator">-=</span><span class="token number">2</span><span class="token punctuation">;</span>
        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tot<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span> k<span class="token punctuation">[</span>f<span class="token punctuation">[</span>idf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+=</span>k<span class="token punctuation">[</span>idf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>tot<span class="token operator">&amp;&amp;</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>dis<span class="token punctuation">[</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>=</span>ans<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>
    n<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        x<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        r<span class="token operator">+=</span>z<span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        x<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token function">lca</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">,</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token punctuation">,</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">=</span>z<span class="token punctuation">;</span>
        g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">=</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span> <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>最近公共祖先</tag>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu5535 &amp; luogu1414 题解</title>
    <url>/2022/lg5535-1414-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="luogu5535-小道消息">luogu5535 小道消息</h2>
<h3 id="分析">分析</h3>
<p>关于伯特兰·切比雪夫定理，我们只需要用百科里说的“较弱”的说法。</p>
<p>对于整数 <span class="math inline">\(n \ge
1\)</span>，至少存在一个质数 <span
class="math inline">\(p\)</span>，满足 <span class="math inline">\(p \in
(n,2n)\)</span>。</p>
<span id="more"></span>
<p>有什么用？</p>
<p>首先 <span class="math inline">\(k \in
[1,n]\)</span>，由于每个人衣服上的数是下标 +1，那么第 <span
class="math inline">\(k\)</span> 个人衣服上的数就满足 <span
class="math inline">\(k+1 \ge 1\)</span>。从而 <span
class="math inline">\((k+1,2k+2)\)</span>，也就是 <span
class="math inline">\([k+2,2k+1]\)</span> 之中必定有一个质数。</p>
<p>如果 <span class="math inline">\(k+1\)</span>
是个质数，那么显然除了它的倍数之外的数，与它的最大公约数都为
1。那么只要保证它的最小倍数 <span class="math inline">\(2k +2 &gt;
n+1\)</span> 就能 1 天就传达完成。</p>
<p>那如果 <span class="math inline">\(k+1\)</span>
不是质数呢？<del>根据质数的分布</del>传给上面那样的质数就行了，2
天。</p>
<h3 id="code">CODE</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">isprime</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isprime</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">2</span><span class="token operator">></span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="p1414-又是毕业季ii">P1414 又是毕业季II</h2>
<h3 id="分析-1">分析</h3>
<p>定义 <span class="math inline">\(p_i\)</span> 表示质因数 <span
class="math inline">\(i\)</span> 在每个能力值中出现的次数。</p>
<p>明确对于 <span class="math inline">\(k=i,j\)</span> 其中 <span
class="math inline">\(i &gt;
j\)</span>，所输出的最大默契程度必然是单调不增的。因为多选一个人不会让最大公约数变大。</p>
<p>当 <span class="math inline">\(k=1\)</span>
时，答案是最大的能力值，设其为 <span
class="math inline">\(mx\)</span>。那么就令 <span
class="math inline">\(ans=mx\)</span>，如果 <span
class="math inline">\(p_{ans} &lt; i\)</span>，那么让 <span
class="math inline">\(ans-1\)</span>，这样一定是最大的。</p>
<h3 id="code-1">CODE</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e4</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> mx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mx<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>mx<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">*</span>j<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token operator">++</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">*</span>j<span class="token operator">!=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> ans<span class="token operator">=</span>mx<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token operator">&lt;</span>i<span class="token punctuation">)</span> <span class="token operator">--</span>ans<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu1600 天天爱跑步 题解</title>
    <url>/2021/lg1600-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>经典树上差分。</p>
<span id="more"></span>
<p>考虑能观察到玩家的条件，不难发现，对于每个观察员 <span
class="math inline">\(x\)</span>，能观察到玩家 <span
class="math inline">\(i\)</span>，当且仅当满足</p>
<ol type="1">
<li>$ d(s_i)-d(x)=w_x$</li>
<li>$ d(s_i)+d(x)-2 d(lca(s_i,t_i))=w_x$</li>
</ol>
<p>上述两式可化为 <span class="math display">\[
d(s_i)=w_x+d(x)
\]</span> <span class="math display">\[
d(s_i)-2 \times d(lca(s_i,t_i))=w_x-d(x)
\]</span></p>
<p>观察员可以看作点。</p>
<p>对于一条 <span class="math inline">\((s_i \rightarrow t_i)\)</span>
的路径，由于玩家会经过路径上的每一个点，等号左边是个定值，所以问题可以转化为</p>
<blockquote>
<p>对于每条路径，将路径上每一个点都加上两个权值为等号左边的物品。询问每个点权值等于等号右边的物品的个数，两种物品分别计数。</p>
</blockquote>
<p> </p>
<p>显然是树上差分。</p>
<p>对于每个玩家 $ (x,y)$，求出 $ z=lca(x,y)$，令 <span
class="math display">\[
x+d(x), \, father(z)-d(x)
\]</span> <span class="math display">\[
y+d(x)+2 \times d(z), \, z-(d(x)+2 \times  d(z))
\]</span></p>
<p>然后考虑计数。</p>
<p>用 <span class="math inline">\(a1,a2\)</span> 记录两种加法操作，用 $
b1,b2$ 记录两种减法操作。</p>
<p>用值域数组 <span class="math inline">\(c1,c2\)</span>
，分别记录两种操作的物品个数。</p>
<p>则要对应着差分来计数，对于每个点的操作，令对应位置加 1 或减 1。</p>
<p>设计数前 <span class="math inline">\(p=c1(d(x)+w_x), \,
q=c2(w_x-d(x))\)</span>。</p>
<p>计数后集合得到答案 <span class="math display">\[
ans(x)=c1(d(x)+w_x)-p+c2(w_x-d(x))-q
\]</span> 注意 $ w_x-d(x)$ 可能为负，平移一下下标就好了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pb</span> <span class="token expression">push_back</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">sz</span> <span class="token expression">size</span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c1<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a1<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> a2<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b1<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b2<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> fr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>fr<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>fr<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token operator">&lt;</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fr<span class="token punctuation">)</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">lca</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&lt;</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">,</span>j<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">kawaii</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token punctuation">,</span> p<span class="token operator">=</span>c1<span class="token punctuation">[</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token operator">=</span>c2<span class="token punctuation">[</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">kawaii</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a1<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>c1<span class="token punctuation">[</span>a1<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b1<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">--</span>c1<span class="token punctuation">[</span>b1<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a2<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>c2<span class="token punctuation">[</span>a2<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b2<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">--</span>c2<span class="token punctuation">[</span>b2<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ans<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>c1<span class="token punctuation">[</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span>p<span class="token operator">+</span>c2<span class="token punctuation">[</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token operator">-</span>q<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token function">lca</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a1<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b1<span class="token punctuation">[</span>f<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a2<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>d<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b2<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>d<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">kawaii</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>树上差分</tag>
      </tags>
  </entry>
  <entry>
    <title>LOJ2652 Zap 题解</title>
    <url>/2021/loj2652-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://loj.ac/p/2652">link</a></p>
<p>题目要求等价于求满足 $ x a/k, y b/k$ 并且 <span
class="math inline">\(\gcd(x,y)=1\)</span> 的二元组 <span
class="math inline">\((x,y)\)</span> 的数量。</p>
<span id="more"></span>
<p>设 <span class="math inline">\(g(a,b,k)\)</span> 为满足 $ xa, yb$ 且
<span class="math inline">\(k \mid \gcd(x,y)\)</span> 的二元组 $ (x,y)$
的数量，不难想到 <span class="math display">\[
g(a,b,k)=(\lfloor a/k \rfloor ) \times (\lfloor b/k \rfloor)
\]</span> 由容斥原理，得由于 $ g(a,b,1)=a b$，比真正的答案多了 $ (x,y)$
是 <span class="math inline">\(2,3,5 \dots\)</span>
的倍数的个数，所以要减去它们，即 $ g(a,b,2)$ 与 <span
class="math inline">\(g(a,b,3)\)</span>。</p>
<p>而减去后多减了 $ (x,y)$ 既是 <span class="math inline">\(2\)</span>
的倍数，又是 <span class="math inline">\(3\)</span> 的倍数的个数，即
<span
class="math inline">\(g(a,b,6)\)</span>，又要加上。以此类推，我们发现加减的关系正是
$ k$ 的莫比乌斯函数。</p>
<p>$ Mobios(x)$ 记为 (x)$ 。</p>
<p>所以答案为 <span class="math display">\[
f(a,b) = \sum_{i=1}^{\min{(a,b)}} \mu(i) \times g(a,b,i)
\]</span> 由于 <span class="math display">\[
\forall i \in \left[ x, \min(a/\lfloor a/x \rfloor \rfloor ,\lfloor b/
\lfloor b/x \rfloor  \rfloor)\right]
\]</span></p>
<p><span class="math display">\[
g(a,b,i)=(\lfloor a/i \rfloor ) \times (\lfloor b/i \rfloor) \text{
都相同}
\]</span></p>
<p>所以实现的时候求出 $ (x)$ 的前缀和，直接处理一个区间的信息。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> k<span class="token punctuation">,</span> Mobius<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span> gx<span class="token punctuation">,</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    a<span class="token operator">/=</span>k<span class="token punctuation">,</span> b<span class="token operator">/=</span>k<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>x<span class="token operator">=</span>gx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        gx<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token operator">/</span><span class="token punctuation">(</span>a<span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">/</span><span class="token punctuation">(</span>b<span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans<span class="token operator">+=</span><span class="token punctuation">(</span>Mobius<span class="token punctuation">[</span>gx<span class="token punctuation">]</span><span class="token operator">-</span>Mobius<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5e4</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> Mobius<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5e4</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        Mobius<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">5e4</span><span class="token punctuation">;</span>j<span class="token operator">+=</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">/</span>i<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> Mobius<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">else</span> Mobius<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> 
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5e4</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> Mobius<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>Mobius<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">--</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>莫比乌斯函数</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu1712 区间 题解</title>
    <url>/2022/lg1712-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>既然要最小化选出的最长区间长度减去最短区间长度，那么很容易想到一个典型的双指针算法：</p>
<p>将区间长度递增排序，维护指针 <span class="math inline">\(l\)</span>
和 <span class="math inline">\(r\)</span>，表示选择 <span
class="math inline">\([l,r]\)</span> 中所有的线段。</p>
<span id="more"></span>
<p>依次选择每条线段（也就是 <span class="math inline">\(r\)</span>
在递增），在满足有一个点被覆盖 <span class="math inline">\(m\)</span>
次的条件下，尽可能将 <span class="math inline">\(l\)</span>
提前并删去对应的线段。答案就是 <span class="math inline">\(\min{
\{len_r-len_l \} }\)</span>。</p>
<p>所以离散化，在离散化后的值域上建一棵线段树，维护区间内的点被覆盖的最多次数。</p>
<p>那么只要根节点的值大于等于 <span
class="math inline">\(m\)</span>，就是合法的选取方案。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">L</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> len<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>L a<span class="token punctuation">,</span>L b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>len<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>len<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">struct</span> <span class="token class-name">Segment_Tree</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> w<span class="token punctuation">,</span> tag<span class="token punctuation">;</span>
	<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">l</span><span class="token expression"><span class="token punctuation">(</span>u<span class="token punctuation">)</span> t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l</span></span>
	<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">r</span><span class="token expression"><span class="token punctuation">(</span>u<span class="token punctuation">)</span> t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r</span></span>
	<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">w</span><span class="token expression"><span class="token punctuation">(</span>u<span class="token punctuation">)</span> t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>w</span></span>
	<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">tag</span><span class="token expression"><span class="token punctuation">(</span>u<span class="token punctuation">)</span> t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>tag</span></span>
<span class="token punctuation">&#125;</span> t<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">maketag</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">tag</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">+=</span>val<span class="token punctuation">,</span> <span class="token function">w</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">+=</span>val<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">w</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">w</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">w</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">pushdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">tag</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">maketag</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">tag</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">maketag</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">tag</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">tag</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">l</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span>l<span class="token punctuation">,</span> <span class="token function">r</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span>r<span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">w</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">tag</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">pushup</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span><span class="token function">l</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">r</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token function">maketag</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">r</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">&lt;</span>l<span class="token operator">||</span>r<span class="token operator">&lt;</span><span class="token function">l</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">pushdown</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">l</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">r</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> <span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">></span>mid<span class="token punctuation">)</span> <span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">pushup</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
		a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>r<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>len<span class="token operator">=</span>r<span class="token operator">-</span>l<span class="token punctuation">;</span>
		c<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>l<span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">+</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cnt<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">+</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">+</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token operator">-</span>c<span class="token punctuation">;</span>
		a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">+</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token operator">-</span>c<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
    <span class="token comment">// 离散化</span>
	<span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// r是递增的，直接用i代替</span>
		<span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>len<span class="token operator">-</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token operator">++</span>l<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token operator">!=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">?</span> ans<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu1854 花店橱窗布置 题解</title>
    <url>/2022/lg1854-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>朴素的状态为 设 <span class="math inline">\(f_{i,j}\)</span> 为前
<span class="math inline">\(i\)</span> 束花，放在前 <span
class="math inline">\(j\)</span> 个花瓶的最大收益。</p>
<p>由题意得，如果把花的编号看作数值，它所在的花瓶编号为下标，那么是不允许逆序对的存在的。编号为
<span class="math inline">\(i\)</span> 的花必须放在 <span
class="math inline">\(i+1\)</span> 的左边。</p>
<span id="more"></span>
<p>也就是说，对于一个 <span class="math inline">\((i,j)\)</span>，前
<span class="math inline">\(i-1\)</span> 束花只能在 <span
class="math inline">\([1,j-1]\)</span>
这个区间内放置，与后面怎么放无关，「无后效性」。于是我们只需要考虑第
<span class="math inline">\(i\)</span> 束花要不要放在第 <span
class="math inline">\(j\)</span> 个花瓶中。</p>
<p>所以转移的时候把放与不放两种决策比较一下就好了。 <span
class="math display">\[
f_{i,j} = \max{\{ f_{i-1,j-1}+c_{i,j},f_{i,j-1} \}}
\]</span></p>
<p>具体看代码。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">105</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token operator">||</span><span class="token operator">!</span>y<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0xcf</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化为-inf</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> 
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 初值</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// j从i到m，减少一些无用状态</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 放置在j</span>
		<span class="token keyword">else</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 不放</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu1967 货车运输 题解</title>
    <url>/2021/lg1967-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>题目要求不超过限重，不难想到因该最大化每条路的限重。所以在原图上求出最大生成树。</p>
<p>对于点 <span class="math inline">\((x,y)\)</span>，如果在并查集中
<span class="math inline">\(x\)</span> 与 <span
class="math inline">\(y\)</span> 不在同一个集合，则 <span
class="math inline">\(x\)</span> 不能到达 <span
class="math inline">\(y\)</span></p>
<span id="more"></span>
<p>接下来就是每辆车最多运送的货物，不难想到最多运送的货物就是 $ (x y)$
路径上权值最小的边。</p>
<p>如果用朴素的算法去求最小的边权，那么复杂度会上天，<span
class="math inline">\(O(n)\)</span>。</p>
<p>联系我们对求 LCA
的倍增优化，可以对求路径上最小的边权进行倍增优化。</p>
<p>设 <span class="math inline">\(d(x,k)\)</span> 为节点 x$ 到它的 <span
class="math inline">\(2^k\)</span> 辈祖先这条路径上最小的边权。</p>
<p>接着不难想到转移 <span class="math display">\[
d(x,k)=\min_{k \le \log_2n}{ \{ d(x,k-1),d(f(x,k-1),k-1) \} }
\]</span> 可以在求 $ f$ 数组的同时求出。</p>
<p>所以，在求 LCA 的过程中不断维护路径上最小的 $ d(x,k)$。</p>
<p>这题毒瘤数据，给出的图不一定联通。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">,</span> t<span class="token punctuation">,</span> o<span class="token punctuation">;</span>
<span class="token keyword">int</span> fr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">pt</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> a<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> g<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token operator">==</span>fr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">?</span> x<span class="token operator">:</span>fr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>fr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>pt a<span class="token punctuation">,</span>pt b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>w<span class="token operator">></span>b<span class="token punctuation">.</span>w<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        x<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            fr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span>
            <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> pre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>dep<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">17</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>pre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">,</span> d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">lca</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">get</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&lt;</span>dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>=</span>dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> res<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> fr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">lca</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>最近公共祖先</tag>
        <tag>生成树</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu2155 沙拉公主的困惑 题解</title>
    <url>/2021/lg2155-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://www.luogu.com.cn/problem/P2155">link</a></p>
<p>由于 <span class="math inline">\(\gcd(x,y) = \gcd(x +
y,y)\)</span>，<span class="math inline">\(m! \mid n!\)</span></p>
<p>所以答案即为 <span class="math inline">\(\frac{n!}{m!} \cdot
\varphi(m!)\)</span></p>
<span id="more"></span>
<p>设 <span class="math inline">\(\gcd(a,m!)=1\)</span>，那么 <span
class="math inline">\(\gcd(a+m!,m!)=1\)</span>，<span
class="math inline">\(\gcd(a+m!+m!,m!)=1\)</span>，最多重复这个过程
<span class="math inline">\(\frac{n!}{m!}\)</span> 次。</p>
<p>简单地说，每找到一个与 <span class="math inline">\(m!\)</span>
互质的数，就有 <span class="math inline">\(\frac{n!}{m!}\)</span> 个与
<span class="math inline">\(m!\)</span> 互质的数。</p>
<p>所以计算上式就可以了。</p>
<p><span class="math inline">\(O(n)\)</span>
求阶乘和线性筛求欧拉函数。</p>
<p><span class="math inline">\(O( \log_2 y!)\)</span>
用快速幂和费马小定理求逆元并回答询问。</p>
<p>实测这种筛法可过加强后的数据。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> p<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> pr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> phi<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>y<span class="token punctuation">;</span>x<span class="token operator">=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>x<span class="token operator">*</span>x<span class="token operator">%</span>p<span class="token punctuation">,</span>y<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> z<span class="token operator">=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>z<span class="token operator">*</span>x<span class="token operator">%</span>p<span class="token punctuation">;</span>
    <span class="token keyword">return</span> z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>phi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1e7</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 这里的phi[i]实际上是 phi[1]*phi[2]*...phi[i]</span>
        <span class="token comment">// 也就是phi[i!]。</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>p<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">%</span>p<span class="token punctuation">;</span> <span class="token keyword">else</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> pr<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>phi<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>
        <span class="token keyword">else</span> phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>phi<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">%</span>p<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>cnt<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>pr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">||</span>pr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">></span><span class="token number">1e7</span><span class="token punctuation">)</span> <span class="token keyword">break</span> <span class="token punctuation">;</span>
            v<span class="token punctuation">[</span>pr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span>p<span class="token operator">&amp;&amp;</span>y<span class="token operator">&lt;</span>p<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">*</span>phi<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token operator">*</span><span class="token function">fp</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu2195 HXY造公园 题解</title>
    <url>/2021/lg2195-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>我最喜欢的紫色水题（</p>
<span id="more"></span>
<p>给出一个森林，有两种操作。</p>
<ol type="1">
<li>询问某个点所在的树的直径</li>
<li>在两个点所在的两棵树间连一条边，最小化其直径</li>
</ol>
<p>显然的，对于第一种操作，DP / DFS / BFS
预处理直径，并查集维护每棵树的点就行了。</p>
<p>问题在于高效维护第二种操作。</p>
<p>不难想到，两棵树之间连一条边，相当于合并两个集合。</p>
<p>而最小化新树的直径，显然要在两树直径的中点处连边。</p>
<p>证明：</p>
<blockquote>
<p>反证法。若最优点不是直径中点，由于 直径有两个端点 且
树上两点有且仅有一条简单路径，若在非直径中点的 <span
class="math inline">\(x\)</span>
点连边，则当其接近直径一端时，直径另一端到达它的距离就大于到达直径中点的距离，反之则显然。这与假设不符，故原命题正确。</p>
</blockquote>
<p>设从 <span class="math inline">\(x\)</span> 与 <span
class="math inline">\(y\)</span> 之间连边，<span
class="math inline">\(l(t)\)</span> 为点 <span
class="math inline">\(t\)</span> 所在的树的直径。</p>
<p>则新树的直径只有三种可能。</p>
<ol type="1">
<li>$ l(x)$</li>
<li><span class="math inline">\(l(y)\)</span></li>
<li>$ + + 1$</li>
</ol>
<p>合并后求最大值就行了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token operator">==</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">?</span> x<span class="token operator">:</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> fr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">dp</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">miku</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">dp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    n<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> x<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">)</span> <span class="token function">miku</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">--</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>树的直径</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu2294 狡猾的商人 题解</title>
    <url>/2022/lg2294-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="solution1-带权并查集">solution1 带权并查集</h2>
<p>给出的信息是区间和的形式，搞个前缀和数组 <span
class="math inline">\(a_i\)</span>，表示 <span
class="math inline">\([1,i]\)</span> 月的总收益。</p>
<p>假如知道 <span class="math inline">\([x,y]\)</span> 月的收益与 <span
class="math inline">\([y,z]\)</span> 月的收益，那么就能推出 <span
class="math inline">\([x,z]\)</span> 月的收益。这时候如果后来的 <span
class="math inline">\([x,z]\)</span>
月的信息产生冲突，那么必定是假的。</p>
<span id="more"></span>
<p>由于不同区间的信息具有可合并性和传递性，考虑带权并查集。</p>
<p>首先明确 <span class="math inline">\(a_i\)</span> 此时表示 <span
class="math inline">\([fa(i),i]\)</span>
的和。这是带权并查集的固定套路。</p>
<p>当给出一个区间信息 <span class="math inline">\((u,v,w)\)</span> 表示
<span class="math inline">\([u,v]\)</span> 这一段的和为 <span
class="math inline">\(w\)</span> 时，找到 <span
class="math inline">\(x=fa(u-1)\)</span>，<span
class="math inline">\(y=fa(v)\)</span>。</p>
<p>如果 <span class="math inline">\(x \neq y\)</span>，那么令 <span
class="math inline">\(fa(y)=x\)</span>，也就是将这两段区间合并。关键在于如果处理合并后区间的和。</p>
<p><img data-src="https://s2.loli.net/2022/06/30/9EuZjHrnCLa7vR2.png" /></p>
<p>很明确了。更新 <span class="math inline">\(a_y =
a_{u-1}+w-a_v\)</span>。</p>
<p>如果上图中 <span class="math inline">\(x\)</span> 在 <span
class="math inline">\(y\)</span> 的右边也没有问题，只不过 <span
class="math inline">\(a_y\)</span> 是个负数，理论上也是讲得通的。</p>
<p>如果 <span class="math inline">\(x=y\)</span>，那么直接判断 <span
class="math inline">\(a_v - a_{u-1}\)</span> 是否等于 <span
class="math inline">\(w\)</span>。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">105</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">5005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">namespace</span> union_set <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>a<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 路径压缩必定要做的事</span>
        <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
    <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> fg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> u<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> w<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>u<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>u<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>w<span class="token punctuation">)</span> fg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">,</span> a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>u<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span>fg<span class="token operator">?</span> <span class="token string">"true"</span><span class="token operator">:</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="solution2-差分约束系统">solution2 差分约束系统</h2>
<p>这个更显然了。但是给出了是 <span class="math inline">\([u,v]\)</span>
区间和一定是 <span class="math inline">\(w\)</span>。那么直接转化 <span
class="math inline">\(X_v - X_{u-1} = z\)</span>，<span
class="math inline">\(X_{u-1} - X_v =
-z\)</span>。由于是直接等于，那么直接添加双向边<code>add(u-1,v,z)</code>和<code>add(v,u-1,-z)</code>。</p>
<p>SPFA 跑最短路，判负环。</p>
<p>图不一定连通，那就搞一个超级源点 <span
class="math inline">\(n+1\)</span>，对于节点 <span
class="math inline">\(i \in
[0,n+1]\)</span>，连接<code>add(n+1,i,0)</code>。注意 <span
class="math inline">\(u-1\)</span> 能取到 0，所以不能用 0
当超级源点。</p>
<p>有负环说明账本是假的。</p>
<h2 id="code-1">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> cfys <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dep<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> to<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">bool</span> <span class="token function">SPFA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>inf<span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        d<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> y<span class="token operator">=</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token comment">// 0到n一共n+1个节点</span>
                    <span class="token comment">// 最短路长度超过n+1说明存在负环</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token function">SPFA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token string">"true"</span><span class="token operator">:</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
        <tag>差分约束系统</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu2403 所驼门王的宝藏 题解</title>
    <url>/2022/lg2403-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>把能够到达的宫室连边。</p>
<span id="more"></span>
<p>具体地，对于一个横天门，将它与同一行中的普通点连单向边，横天门连双向边。对于一个纵寰门，将它与同一列中的普通点连单向边，纵寰门连双向边。对于一个任意门，向周围的
8 个点连单向边（前提是不越界）。</p>
<p>由于只要到达一个强连通分量里，周围的点都能到达，所以求出所有强连通分量，缩点。点权为改强连通分量中点的个数。然后
DP 最长路就行了。</p>
<p>这题主要是实现麻烦。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> dy<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> k<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> num<span class="token punctuation">,</span> top<span class="token punctuation">,</span> scc<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> x<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> op<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> stk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ccnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token comment">// 找到了一个横天门</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token comment">// 连边</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token comment">// 找到了一个纵寰门</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
        <span class="token comment">// 同上</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>dx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>dy<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>dx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>dx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>dy<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果是任意门，那么找有没有对应的位置，有的话连边</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>num<span class="token punctuation">,</span> stk<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">tarjan</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
			low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token operator">++</span>scc<span class="token punctuation">;</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>
		<span class="token keyword">do</span> y<span class="token operator">=</span>stk<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>scc<span class="token punctuation">,</span> <span class="token operator">++</span>ccnt<span class="token punctuation">[</span>scc<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// c[x]: x属于哪个强连通分量</span>
        <span class="token comment">// ccnt[x]: x这个强连通分量有多少个节点</span>
 	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> tc<span class="token punctuation">,</span> hc<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> vc<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> nc<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">addc</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> vc<span class="token punctuation">[</span><span class="token operator">++</span>tc<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nc<span class="token punctuation">[</span>tc<span class="token punctuation">]</span><span class="token operator">=</span>hc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> hc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>tc<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">suodian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">addc</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span>scc<span class="token punctuation">;</span>x<span class="token punctuation">;</span><span class="token operator">--</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>ccnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
		ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>hc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		    <span class="token keyword">int</span> y<span class="token operator">=</span>vc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		a<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// a为同一行，b为同一列。</span>
		mp<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
        <span class="token comment">// map记录(x,y)的节点编号</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">suodian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>强连通分量</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu2446 大陆争霸 题解</title>
    <url>/2021/lg2446-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>每个点都必须在到到达所有保护它的点后才能进入，我们用一种类似拓扑排序的方式求解。</p>
<span id="more"></span>
<p>设 <span class="math inline">\(p(x)\)</span> 为能够到达节点 <span
class="math inline">\(x\)</span> 最早的时间，<span
class="math inline">\(q(x)\)</span> 为能够进入节点 <span
class="math inline">\(x\)</span> 最早的时间，<span
class="math inline">\(d(x)\)</span> 为摧毁 <span
class="math inline">\(x\)</span> 最早的时间。</p>
<p>设 <span class="math inline">\(ind(x)\)</span> 为保护节点 <span
class="math inline">\(x\)</span> 的点的个数。</p>
<p>显然 <span class="math inline">\(p(x)\)</span>
可以直接用最短路算法求出。</p>
<p>设 <span class="math inline">\((x \rightarrow y)\)</span>，则 <span
class="math display">\[
q(y)= \max{\{d(x)\}}
\]</span> <span class="math inline">\(x\)</span> 被摧毁后自然能够到达
<span class="math inline">\(y\)</span>。</p>
<p>当保护节点 <span class="math inline">\(x\)</span>
的点处理完之后，就能进行 <span class="math inline">\(d(x)\)</span>
的转移。</p>
<p>因为有无限多的机器人，所以节点 <span class="math inline">\(x\)</span>
能够到达的那一刻就能够被摧毁。 <span class="math display">\[
d(x)= \max{\{ p(x),q(x) \}}
\]</span> 具体细节看代码。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mp</span> <span class="token expression">make_pair</span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">3e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ind<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>M<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>M<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tc<span class="token punctuation">,</span> hc<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> vc<span class="token punctuation">[</span>M<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nc<span class="token punctuation">[</span>M<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">addc</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> vc<span class="token punctuation">[</span><span class="token operator">++</span>tc<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nc<span class="token punctuation">[</span>tc<span class="token punctuation">]</span><span class="token operator">=</span>hc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> hc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>tc<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dijk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	R <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
	R priority_queue<span class="token operator">&lt;</span>PII <span class="token operator">></span> pq<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">mp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		x<span class="token operator">=</span>pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">,</span> pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
		v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				p<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">;</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ind<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">mp</span><span class="token punctuation">(</span><span class="token operator">-</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>hc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			y<span class="token operator">=</span>vc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>ind<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">mp</span><span class="token punctuation">(</span><span class="token operator">-</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	R <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>ind<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">addc</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">dijk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu2519 problem a 题解</title>
    <url>/2022/lg2519-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>说假话的人最少，可以转化成求说真话的人最多。</p>
<p>考虑按照成绩递增排序的情况，如果第 <span
class="math inline">\(i\)</span> 个人有 <span
class="math inline">\(a_i\)</span> 个人分数比他高，<span
class="math inline">\(b_i\)</span> 个人分数比他低，那么 <span
class="math inline">\([b_i+1,n-a_i]\)</span>
这个区间表示的就是分数和他相等的人。</p>
<span id="more"></span>
<p>令 <span class="math inline">\(l_i = b_i+1\)</span>，<span
class="math inline">\(r_i=n-a_i\)</span>。如果 <span
class="math inline">\(l_i &gt; r_i\)</span>
那么这个人一定说假话。如果存在 <span class="math inline">\(i\)</span> 和
<span class="math inline">\(j\)</span> 两个人，满足 <span
class="math inline">\(l_i = l_j\)</span>，<span
class="math inline">\(r_i =
r_j\)</span>，就相当于这两个人的分数相等。同一分数相等的人不能超过 <span
class="math inline">\(r_i - l_i +1\)</span>。</p>
<p>所以我们把每个 <span class="math inline">\(l_i\)</span> 与 <span
class="math inline">\(r_i\)</span>
看作线段的端点，端点相同（分数相同）的人数看作这天线段的权，那么问题就转化成了尽可能多地选择不相交的线段。因为如果两条线段相交，这与
<span class="math inline">\([l_i,r_i]\)</span>
表示相同分数的区间相矛盾。</p>
<p>以上可以用 Map 来快速实现。</p>
<p>最后设 <span class="math inline">\(f_i\)</span> 表示前 <span
class="math inline">\(i\)</span> 条线段所能获得的最大权值，<span
class="math inline">\(k_i\)</span> 表示与 <span
class="math inline">\(i\)</span> 这个人分数相同的人数，显然 <span
class="math display">\[
f_i = \max_{1 \le j &lt; i}{\{ f_i,f_j + k_j \}}
\]</span> <span class="math inline">\(f\)</span>
显然是单调增的，只要二分查找出第一个大于当前 <span
class="math inline">\(l_i\)</span> 的 <span
class="math inline">\(r_j\)</span>，那么 <span
class="math inline">\(j\)</span> 就是最优决策。最后用 <span
class="math inline">\(n\)</span> 减。</p>
<p>复杂度 <span class="math inline">\(O(n \log_2 n)\)</span>。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pii</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mk</span> <span class="token expression">make_pair</span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> len<span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">edge</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>edge a<span class="token punctuation">,</span>edge b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
map<span class="token operator">&lt;</span>pii<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
		l<span class="token operator">=</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">=</span>n<span class="token operator">-</span>x<span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 第一种不合法</span>
		pii e<span class="token operator">=</span><span class="token function">mk</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">==</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 第二种不合法</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">,</span> a<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>r<span class="token punctuation">;</span>
		<span class="token operator">++</span>mp<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> k<span class="token operator">=</span>mp<span class="token punctuation">[</span><span class="token function">mk</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> k<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>d<span class="token operator">+</span>i<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token operator">-</span>d<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>n<span class="token operator">-</span>f<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu2491 消防 题解</title>
    <url>/2021/lg2491-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>实际上就是 <a
href="https://www.luogu.com.cn/problem/P1099">树网的核</a>
的数据加强版。</p>
<span id="more"></span>
<p>原题暴力枚举即可，本题也可以用复杂度为 <span
class="math inline">\(O(n\log SUM)\)</span>
的二分答案，这里只讲述单调队列的 <span
class="math inline">\(O(n)\)</span> 算法。</p>
<p>题意：在树的直径上选择两个距离不超过 $ s$
的点，最小化「偏心距」。</p>
<p>「偏心距」：树中距离直径最远的节点到直径的距离。</p>
<p>显然，可以用单调队列维护。</p>
<p>设直径为 $ u$，其节点数为 $ o$，直径上两点为 <span
class="math inline">\((u_i,u_j)\)</span>，<span
class="math inline">\(f(x)\)</span> 为从 <span
class="math inline">\(x\)</span>
出发，不经过直径上的其他点，能够到达的最远距离。<span
class="math inline">\(dis(x,y)\)</span> 为 $ (x,y)$ 之间的距离。</p>
<p>不难想到此时偏心距为 <span class="math display">\[
\max_{dis(i,j)\in [1,s]} {\{\max_{i \le k \le j} { \{ f(k)
\},dis(u_1,u_i),dis(u_j,u_s) \} } }
\]</span> 仔细观察不难发现，$ f(k)$ 的定义域为 $
[1,s]$，而无论如何选择两个点，最终一定取到 <span
class="math inline">\(\max_{k \in [1,s]} { \{f(s)\} }\)</span>。</p>
<p>所以上式可化为 <span class="math display">\[
\max_{dis(i,j) \in [1,s]} { \{ \max_{k \in [1,s]}{\{ f(k)
\}},dis(u_1,u_i),dis(u_j,u_o) \} }
\]</span> 而 <span class="math inline">\(\max_{k \in [1,s]} { \{f(s)\}
}\)</span> 是一个定值，设其为 <span
class="math inline">\(K\)</span>。</p>
<p>求出 $ u$ 上节点距离的前缀和数组 <span
class="math inline">\(S\)</span>。</p>
<p>则 <span class="math display">\[
\max_{dis(i,j) \in [1,s]}{ \{ K, \max ( S(i),S(o)-S(j) )  \} }
\]</span> 用单调队列维护队头为 满足 <span
class="math inline">\(S(j)-S(i) \le s\)</span> 的最大的 $ j$ 即可。</p>
<p>写的很麻烦……</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> mx<span class="token punctuation">,</span> o<span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>c<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> w<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 这个是用来找直径的</span>
	f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>fa<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fa<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>mx<span class="token punctuation">)</span> mx<span class="token operator">=</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> o<span class="token operator">=</span>y<span class="token punctuation">;</span>
        <span class="token function">DFS</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 不经过直径上的点</span>
        <span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 找距离</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">ddfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">!=</span>fa<span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">,</span> b<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> <span class="token function">ddfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
    <span class="token comment">// a[]存直径节点编号，b[]存边权</span>
    <span class="token comment">// 这种做法会漏掉直径最后一个点，不过不影响</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ans<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> p<span class="token punctuation">,</span> q<span class="token punctuation">;</span>
    <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token operator">=</span>o<span class="token punctuation">,</span> mx<span class="token operator">=</span>d<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">DFS</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token operator">=</span>o<span class="token punctuation">;</span>
    <span class="token comment">// 这时候f[x]表示x的父亲</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span>q<span class="token punctuation">)</span> v<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> q<span class="token operator">=</span>f<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 标记直径上的点</span>
    <span class="token function">ddfs</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 累加直径上的边</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>t<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这时候f[]表示能到达的最远距离</span>
        k<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>f<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> qq<span class="token punctuation">;</span>
    <span class="token comment">// qq记录到直径最远的距离</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>t<span class="token punctuation">;</span><span class="token operator">++</span>l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>t<span class="token operator">&amp;&amp;</span>sum<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;=</span>s<span class="token punctuation">)</span> <span class="token operator">++</span>r<span class="token punctuation">;</span>
        qq<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>qq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>单调队列优化</tag>
        <tag>树的直径</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu2679 子串 题解</title>
    <url>/2022/lg2679-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>莫名其妙地想把这道题的题解写了。</p>
<p>设 <span class="math inline">\(f(i,j,k)\)</span> 为 A 的前 <span
class="math inline">\(i\)</span> 个字符取出了 <span
class="math inline">\(k\)</span> 段，恰好匹配到 B 中 <span
class="math inline">\(j\)</span> 的位置的方案数。</p>
<span id="more"></span>
<p>如果 <span class="math inline">\(A_i \neq
B_j\)</span>，那么不会产生任何贡献。</p>
<p>如果 <span class="math inline">\(A_i =
B_j\)</span>，那么有两种情况</p>
<ol type="1">
<li><span class="math inline">\(i\)</span> 接着上一段那么 <span
class="math inline">\(f(i-1,j-1,k) \rightarrow f(i,j,k)\)</span></li>
<li><span class="math inline">\(i\)</span>
是下一段的第一个。那么它的前继状态有 <span
class="math inline">\(k-1\)</span> 段，匹配到了 <span
class="math inline">\(B_{j-1}\)</span>，但是 <span
class="math inline">\(i\)</span> 能取 <span
class="math inline">\([1,i-1]\)</span> 中任何一个位置。所以维护 <span
class="math inline">\(g(i,j,k) = \sum_{x=1}^i
f(x,j,k)\)</span>，转移就是 <span class="math inline">\(g(i-1,j-1,k-1)
\rightarrow f(i,j,k)\)</span>。</li>
</ol>
<p>另一种理解，<span class="math inline">\(f(i,j,k)\)</span> 就相当于
<span class="math inline">\(i\)</span> 这个位置必须选的方案数，<span
class="math inline">\(g(i,j,k)\)</span>
则是选不选都可以。后者显然是包含前者的，所以最终答案是后者。</p>
<p>这样会爆内存，可以滚动数组优化掉 <span
class="math inline">\(i\)</span> 这一维。</p>
<h2 id="code">CODE、</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1005</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">205</span><span class="token punctuation">,</span> mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> K<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// f[i][j][0]是上文的g，f[i][j][1]是上文f</span>
<span class="token keyword">char</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%s%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>K<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 简单设初值就够了</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>K<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token comment">// 因为有滚动数组，所以要置为0</span>
        f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
        f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu3092 No Change 题解</title>
    <url>/2022/lg3092-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>直接设状态为花费的钱数是不行的，硬币的使用顺序与购买顺序都会影响答案，复杂度爆炸。</p>
<p>设 <span class="math inline">\(f(S)\)</span> 为使用的硬币为 <span
class="math inline">\(S\)</span> 时，最多能买的物品个数。</p>
<p>对于 <span class="math inline">\(S_0 \subseteq
S\)</span>，显然能够转移，但方程并不是一个简单的多项式。</p>
<p>不难发现，枚举 <span class="math inline">\(S\)</span>
的子集是不行的，不能直接转移，且复杂度过高。那就考虑枚举硬币。</p>
<span id="more"></span>
<p>对于一个集合 <span
class="math inline">\(S\)</span>，枚举枚举其中每一个硬币用或不用。设
<span class="math inline">\(S_0\)</span> 与 <span
class="math inline">\(S\)</span> 中只相差 <span
class="math inline">\(j\)</span> 这个硬币，那么 <span
class="math inline">\(S_0 = S \text{ xor } 2^{j-1}\)</span>，余出来的
<span class="math inline">\(c_j\)</span> 的钱就可以继续往后买。设 <span
class="math inline">\(t(i,j)\)</span> 为用 <span
class="math inline">\(j\)</span> 的钱，从 <span
class="math inline">\(i\)</span>
开始往后买，最多能买到第几个物品。所以转移为 <span
class="math display">\[
f(S) = \max{ \{ f(S),t(f(S_0),c_j) \} }
\]</span> 用前缀和搞一下物品数组，显然 <span
class="math inline">\(t(i,j)\)</span> 是可以二分的。</p>
<p>这一部分复杂度为 <span class="math inline">\(O(2^k \cdot k \log_2
n)\)</span></p>
<p>还是可以的（</p>
<p> </p>
<p>考虑如何计算答案。</p>
<p>设 <span class="math inline">\(g(S)\)</span> 为使用的硬币为 <span
class="math inline">\(S\)</span>
时的最小花费。显然可以采用与上面差不多的转移方式。</p>
<p>注意到 <span class="math inline">\(lowbit(x)\)</span> 可以提取出
<span class="math inline">\(x\)</span> 的二进制表示中最后一个 1
以及后面的 0。</p>
<p>举个例子</p>
<blockquote>
<p>$ (x)_2 = 011010$</p>
<p>$ lowbit(x) = (10)_2 = 2$</p>
</blockquote>
<p>这正好对应了「去掉最后一个硬币」。由于不找零，所以能够直接暴力累加钱数。且因为我们设计了这样的状态，一个状态最多买多少物品是一定的，只需要计算出这些目标状态需要的钱数（也就是
<span class="math inline">\(f\)</span> 的限制）。故可以从 <span
class="math inline">\(g(S-lowbit(S))\)</span> 转移到 <span
class="math inline">\(g(S)\)</span>。</p>
<p>由于 <span class="math inline">\(lowbits\)</span> 运算只能得到 2
的整数次幂，那么我们可以将每个硬币与一个二进制位建立映射关系。</p>
<p>不难想到转移为 <span class="math display">\[
g(S)=g(S-lowbit(S))+c_{lowbit(S)}
\]</span> 最终答案为 <span class="math display">\[
ans = \max{\{ sum_c - g(i) \}} \quad f(i) = m
\]</span></p>
<p>注意实现。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> orz<span class="token punctuation">,</span> U<span class="token punctuation">,</span> ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span><span class="token number">100010</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// ans要初始化为-1</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">lb</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">erfen</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">,</span> r<span class="token operator">=</span>m<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">&lt;=</span>v<span class="token punctuation">)</span> pos<span class="token operator">=</span>mid<span class="token punctuation">,</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> pos<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orz<span class="token operator">+=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token comment">// p建立的映射为: c[1]->二进制最低位，c[2]->二进制倒数第二位，以此类推</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>x<span class="token punctuation">;</span>
    U<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>U<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token function">erfen</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>U<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token function">lb</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token function">lb</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>m<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>orz<span class="token operator">-</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu3166 数三角形 题解</title>
    <url>/2021/lg3166-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://www.luogu.com.cn/problem/P3166">link</a></p>
<p>显然的，在 <span class="math inline">\(N \times M\)</span>
的网格中任选三点的方案数为 <span class="math display">\[
C^3_{n+m} = \frac{(n+m)!}{3! \cdot (n+m-3)!} = \frac{(n+m) \cdot (n+m-1)
\cdot (n+m-2)}{6}
\]</span> 还要减去三点共线的情况。</p>
<span id="more"></span>
<p>三点共线且沿矩形边的方案数 <span class="math display">\[
C_n^3 = \frac{n!}{3! \cdot (n-3)!} = \frac{n \cdot (n-1) \cdot (n-2)}{6}
\]</span></p>
<p><span class="math display">\[
C^3_m= \frac{m!}{3! \cdot (m-3)!} = \frac{m \cdot (m-1) \cdot (m-2)}{6}
\]</span></p>
<p>三点共线且不沿矩形边的方案数</p>
<p>设斜线 $ (0,0) (x,y)$，则其经过点数为 $ (x,y)+1$。</p>
<p>又因为是三点共线，所以有 $ (x,y)-1$ 种可能。</p>
<p>该斜线可以左右平移 $ (n-x)$ 次，上下平移 $ (m-y)$
次，还有正反两种可能。</p>
<p>乘法原理。</p>
<p>实现的时候将 $ n$ 与 $ m $ 都加
1，因为这是坐标，而组合数计算的是点数，并且计算斜边时也要注意边界的变化。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
ll n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
ll <span class="token function">gcd</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> y<span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token operator">%</span>y<span class="token punctuation">)</span><span class="token operator">:</span>x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>n<span class="token punctuation">,</span> <span class="token operator">++</span>m<span class="token punctuation">;</span>
    z<span class="token operator">=</span>n<span class="token operator">*</span>m<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">*</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">*</span>m<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">;</span>
    x<span class="token operator">=</span>n<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">6</span><span class="token operator">*</span>m<span class="token punctuation">;</span>
    y<span class="token operator">=</span>m<span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">6</span><span class="token operator">*</span>n<span class="token punctuation">;</span>
    z<span class="token operator">=</span>z<span class="token operator">-</span>x<span class="token operator">-</span>y<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> z<span class="token operator">-=</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu3216 数学作业 题解</title>
    <url>/2022/lg3216-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>设 <span class="math inline">\(f(i)\)</span> 为 <span
class="math inline">\(Concatenate(i) \bmod m\)</span> 的值。</p>
<p>那么显然有 <span class="math inline">\(f(i) = \Big( f(i-1) \cdot 10^k
+ i \Big) \bmod m\)</span>，其中 <span class="math inline">\(k = \lfloor
\lg i \rfloor +1\)</span>。</p>
<span id="more"></span>
<p>这个直接递推绝对是 T 飞的，<span class="math inline">\(n \in
[1,10^{18}]\)</span>。</p>
<p>但是这明显是个线性递推式，可以用矩阵优化。</p>
<p>定义一个向量为 <span class="math inline">\(\begin{bmatrix} f(i-1) \\
i-1 \\ 1 \end{bmatrix}\)</span>，我们的目标是把它变换成 <span
class="math inline">\(\begin{bmatrix} f(i) \\ i \\ 1
\end{bmatrix}\)</span>，这个 1 是来辅助把 <span
class="math inline">\(i-1\)</span> 变换成 <span
class="math inline">\(i\)</span> 的。</p>
<p>手算不难得到这个矩阵就是 <span class="math inline">\(\begin{bmatrix}
10^k &amp; 1 &amp; 1 \\ 0 &amp; 1 &amp; 1 \\ 0 &amp; 0 &amp; 1
\end{bmatrix}\)</span>，设它为 <span
class="math inline">\(A\)</span>。</p>
<p>那么就有 <span class="math display">\[
\begin{bmatrix} f(i) \\ i \\ 1 \end{bmatrix} =  A \begin{bmatrix} f(i-1)
\\ i-1 \\ 1 \end{bmatrix}
\]</span> 进一步得到 <span class="math display">\[
\begin{bmatrix} f(n) \\ i \\ 1 \end{bmatrix} = A^{n-1} \begin{bmatrix} 0
\\ 0 \\ 1 \end{bmatrix}  
\]</span> 由于 $i +1 $ 在 <span
class="math inline">\([1,9]\)</span>，<span
class="math inline">\([10,99]\)</span>，<span
class="math inline">\([100,999]\)</span>
这一类区间里面都相同，所以可以按照每一段分别处理，具体见代码。</p>
<p>注意上面的矩阵变换！必须保证先处理矩阵的幂，再统计答案。统计答案只需要累乘每一次的结果就行了。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> mod<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Matrix</span> <span class="token punctuation">&#123;</span>
	ll m<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> ans<span class="token punctuation">,</span> f<span class="token punctuation">;</span>
Matrix <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span>Matrix a<span class="token punctuation">,</span>Matrix b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Matrix c<span class="token punctuation">;</span> c<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>
				<span class="token punctuation">(</span>c<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>a<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">.</span>m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span>
	<span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
Matrix <span class="token keyword">operator</span><span class="token operator">^</span><span class="token punctuation">(</span>Matrix x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Matrix z<span class="token punctuation">;</span> z<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> z<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 矩阵快速幂要把m[i][i]置为1	</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>y<span class="token punctuation">;</span>x<span class="token operator">=</span>x<span class="token operator">*</span>x<span class="token punctuation">,</span>y<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> z<span class="token operator">=</span>z<span class="token operator">*</span>x<span class="token punctuation">;</span>
	<span class="token keyword">return</span> z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span>ll p<span class="token punctuation">,</span>ll b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	f<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token operator">%</span>mod<span class="token punctuation">;</span>
	ans<span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token operator">^</span>b<span class="token punctuation">)</span><span class="token operator">*</span>ans<span class="token punctuation">;</span>
    <span class="token comment">// 一定是这样的计算顺序，不然WA</span>
<span class="token punctuation">&#125;</span> 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
	ans<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	f<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// f就是上文的A</span>
	ll r<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span> <span class="token function">solve</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>r<span class="token operator">-</span><span class="token punctuation">(</span>r<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token function">solve</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>n<span class="token operator">-</span>r<span class="token operator">/</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 特殊情况，不是一个完整的形似[10^n,10^(n+1) -1]这样的区间</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu3225 矿场搭建  题解</title>
    <url>/2021/lg3225-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>本题思路还是比较清晰的。</p>
<p>显然的，求出 v-DCC 并缩点，然后判断方案数。</p>
<span id="more"></span>
<p>在本题中，可以只用 Tarjan 算法求出割点。标记割点，从其他的点依次
DFS，统计每颗搜索树上割点的数量（不重复统计）。</p>
<p>若图中没有割点，那么图中任选两个节点都能满足条件，答案 $
(2,C_n^2)$</p>
<p>若搜索树上割点为
1，则由于树上两点之间有且仅有一条简单路径，所以这颗搜索树中一定至少选一个点，累加答案，累乘方案数。</p>
<p>若割点多于 1，那么对答案是没有贡献的。</p>
<p>因为无论哪一个点被破坏，该搜索树都会分裂成为上述两种情况。</p>
<p>这种做法实现细节较多。</p>
<p>姑且算是 $ O(n^2)$？</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SET</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">505</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> num<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> fg<span class="token punctuation">,</span> ans1<span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> ans2<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>c<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>num<span class="token punctuation">,</span> v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// v数组在一定程度上起到了dfn数组的作用，可以少清空一个数组</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&lt;=</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment">// 1为普通点，2为割点。注意v[x]在上面已经初始化为1</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">114514</span><span class="token punctuation">,</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>
    <span class="token comment">// 放置重复搜索，统计节点数</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>w<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span>z<span class="token punctuation">)</span> <span class="token operator">++</span>fg<span class="token punctuation">,</span> w<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">;</span>
        <span class="token comment">// 防止搜索成环</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">SET</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SET</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SET</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    c<span class="token operator">=</span>ans1<span class="token operator">=</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ans2<span class="token operator">=</span><span class="token number">1ll</span><span class="token punctuation">;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        n<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// luogu给出的数据是联通的</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        fg<span class="token operator">=</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">++</span>num<span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>fg<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">++</span>ans1<span class="token punctuation">,</span> ans2<span class="token operator">*=</span>cnt<span class="token punctuation">;</span>
        <span class="token comment">// 从非割点搜索</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ans1<span class="token punctuation">)</span> ans1<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> ans2<span class="token operator">=</span>n<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: %d %lld\n"</span><span class="token punctuation">,</span><span class="token operator">++</span>t<span class="token punctuation">,</span>ans1<span class="token punctuation">,</span>ans2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>m<span class="token punctuation">)</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>双连通分量</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu3267 侦察守卫 题解</title>
    <url>/2021/lg3267-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>本题难点，在于设计「互补」的状态。</p>
<p>每个守卫覆盖的 <span class="math inline">\(d\)</span>
的方向是任意的，不能再像传统树形 DP 那样状态单单表示子树信息。</p>
<span id="more"></span>
<p>定义「上方」为向根的方向，「下方」为子树内。</p>
<p>设 $ f_{x,i}$ 为覆盖 <span class="math inline">\(x\)</span>
下方的关键点，并且<strong>能够</strong>向上方覆盖 <span
class="math inline">\(i\)</span> 范围内的关键点，所需要的最小代价。</p>
<p>设 $ g_{x,i}$ 为覆盖 <span class="math inline">\(x\)</span> 下方
<span class="math inline">\([i,d]\)</span>
范围内的关键点，所需要的最小代价。</p>
<p>这样， <span class="math inline">\(f\)</span> 与 <span
class="math inline">\(g\)</span> 就能拼凑出正确的答案。</p>
<p> </p>
<p>边界 <span class="math display">\[
g_{x,i}=w_x, g_{x,d+1}=\inf \quad i \in [1,d]
\]</span> 考虑转移。 <span class="math display">\[
g_{x,i} = \min_{y \in son(x)}{ \{ f_{y,i}+g_{x,i},f_{x,i+1}+g_{y,i+1}
\}  }
\]</span></p>
<p>因为 <span class="math inline">\([i,d]\)</span> 的代价一定能够覆盖
<span class="math inline">\([i-1,d]\)</span>，所以</p>
<p><span class="math display">\[
g_{x,i} = \min_{i \in [0,d]} { \{  g_{x,i+1}\} }
\]</span></p>
<p>接着不难想到 <span class="math display">\[
f_{x,0}=g_{x,0}
\]</span></p>
<p><span class="math display">\[
f_{x,i}=\sum_{y \in son(x)} {f_{y,i-1}} \quad i \in [1,d+1]
\]</span> 向上覆盖 <span class="math inline">\(i+1\)</span>
的代价，一定能够覆盖 <span class="math inline">\(i\)</span>，所以 <span
class="math display">\[
f_{x,i}=\min_{i \in [1,d+1]}{ \{ f_{x,i-1} \} }
\]</span> 答案 <span class="math inline">\(f_{1,0}\)</span></p>
<p>复杂度 <span class="math inline">\(O(nd)\)</span></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> d<span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>c<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> fr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>d<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">dp</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>d<span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>d<span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注意转移的循环顺序</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu3304 直径 题解</title>
    <url>/2021/lg3304-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>两次 DFS 求出树的直径。</p>
<p>显然多条直径必定交于至少一点，且包含它们的中点。</p>
<span id="more"></span>
<p>则若舍去他们交点之外的边，剩下的边即为所求。</p>
<p>设直径左右端点为 $ l, r$。</p>
<p>在第二次 DFS 时能够求出 $ l$ 到直径每个节点的距离，所以从 $ r$ 向 $
l$ 遍历。</p>
<p>对于直径上的每个点 <span
class="math inline">\(i\)</span>，分别求出在不经过直径上其他点的情况的，所能达到的最远距离，记作
<span class="math inline">\(d\)</span>。设它到直径左端点距离为 $
ld$，到右端点距离为 $ rd$。</p>
<p>若 $ d=rd$，则令 $ r=i$。</p>
<p>若 <span class="math inline">\(d=ld\)</span>，则令 <span
class="math inline">\(l=i\)</span>，且只会进行一次，这是因为我们的遍历顺序是从右到左。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll p<span class="token punctuation">,</span> mxd<span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>c<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> w<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>fa<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fa<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>mxd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> mxd<span class="token operator">=</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token operator">=</span>y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">kawaii</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fa<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>v<span class="token punctuation">[</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>mxd<span class="token punctuation">)</span> mxd<span class="token operator">=</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">kawaii</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> ans<span class="token punctuation">,</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">=</span>p<span class="token punctuation">,</span> mxd<span class="token operator">=</span>d<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token operator">=</span>p<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>mxd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>r<span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 直径上的点打标记</span>
    <span class="token keyword">int</span> l_<span class="token operator">=</span>l<span class="token punctuation">,</span> r_<span class="token operator">=</span>r<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>f<span class="token punctuation">[</span>r_<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">!=</span>l_<span class="token punctuation">;</span>i<span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> ld<span class="token operator">=</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rd<span class="token operator">=</span>d<span class="token punctuation">[</span>r_<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// </span>
        mxd<span class="token operator">=</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">kawaii</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mxd<span class="token operator">==</span>rd<span class="token punctuation">)</span> r<span class="token operator">=</span>i<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mxd<span class="token operator">==</span>ld<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>fg<span class="token punctuation">)</span> fg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">!=</span>l<span class="token punctuation">;</span>i<span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>树的直径</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu3349 小星星 题解</title>
    <url>/2021/lg3349-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>设 $ f_{i,j}$ 为以 <span class="math inline">\(i\)</span>
为根的子树中，节点 <span class="math inline">\(i\)</span> 映射到图中节点
<span class="math inline">\(j\)</span> 的方案数。</p>
<p>转移 <span class="math display">\[
f_{x,i} = \prod_{y \in son(x)} \sum_{j \in G}{f_{y,j}}
\]</span> <span id="more"></span></p>
<p>答案为 <span class="math inline">\(\sum_{i \in [1,n]}
f_{1,i}\)</span></p>
<p>复杂度是 $ O(3^n n)$ 的，考虑优化。</p>
<p>题目给出了两条限制</p>
<ol type="1">
<li>每条树边都要在图中出现</li>
<li>每个编号仅出现 1 次</li>
</ol>
<p>不难发现，DP 枚举点的过程已经满足了条件 1。</p>
<p>考虑第二个条件。如果有编号出现不止一次，那么一定有编号没有出现，等价于有点没有被选到。我们无法直接求出答案，但可以构造容斥。0
个点没有被选的方案数-至少 1 个点没有被选的方案数+至少 2
个节点没有被选的方案数……</p>
<p>枚举每个点被选的情况，容斥一下，最后就是正确答案了。</p>
<p>复杂度 $ O(2^n n^3)$</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> tot<span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tc<span class="token punctuation">,</span> hc<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> vc<span class="token punctuation">[</span>N<span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> nc<span class="token punctuation">[</span>N<span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll ans<span class="token punctuation">,</span> dlt<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">addc</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> vc<span class="token punctuation">[</span><span class="token operator">++</span>tc<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nc<span class="token punctuation">[</span>tc<span class="token punctuation">]</span><span class="token operator">=</span>hc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> hc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>tc<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> fr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> fg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">dp</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">>></span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 特判</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">>></span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token punctuation">;</span>j<span class="token operator">=</span>nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>fr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            y<span class="token operator">=</span>ver<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            ll o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>hc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>k<span class="token punctuation">;</span>k<span class="token operator">=</span>nc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> o<span class="token operator">+=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>vc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*=</span>o<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">addc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">addc</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        tot<span class="token operator">=</span>dlt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">>></span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> dlt<span class="token operator">+=</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tot<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">-=</span>dlt<span class="token punctuation">;</span> <span class="token keyword">else</span> ans<span class="token operator">+=</span>dlt<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形DP</tag>
        <tag>容斥原理</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu3489 WIE-Hexer 题解</title>
    <url>/2022/lg3489-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>预处理出每个铁匠能够打造的剑能够打败的怪物集合 <span
class="math inline">\(s(x)\)</span> 与每条道路上的怪物集合 <span
class="math inline">\(u(x)\)</span>。还是正常连边。</p>
<p>设 <span class="math inline">\(f(i,S)\)</span> 为从起点到节点 <span
class="math inline">\(i\)</span>，能够打败的怪物集合为 <span
class="math inline">\(S\)</span> 时，花费的最小时间。状态是一张图，用
Dijkstra 算法转移。</p>
<span id="more"></span>
<p>边界自然是 <span class="math inline">\(f(1,s(1)=0)\)</span>。考虑
<span class="math inline">\(x\)</span> 的子节点 <span
class="math inline">\(y\)</span>，<span class="math inline">\(i\)</span>
为 <span class="math inline">\(x \rightarrow y\)</span> 的边。如果 <span
class="math inline">\(u(i)\)</span> 中包含 <span
class="math inline">\(S_x \cup s(x)\)</span> 中不包含的元素，那么在
<span class="math inline">\(x\)</span>
打造的剑和之前的剑就不能打败路上的怪物，不能转移。更数学一点，若 <span
class="math inline">\(S_0 =S_x \cup s(x)\)</span>，<span
class="math inline">\(S_0 \cup u(i) \neq
S_0\)</span>，那么不能转移。然后就是板子了。</p>
<p>答案：第一次到达 <span class="math inline">\(n\)</span>
时的最小时间。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">205</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">6005</span><span class="token punctuation">,</span> O<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p<span class="token punctuation">,</span> k<span class="token punctuation">,</span> ans<span class="token operator">=</span>inf<span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>O<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>O<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 节点编号，集合，最小时间</span>
<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span>node b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>z<span class="token operator">></span>b<span class="token punctuation">.</span>z<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
priority_queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">,</span><span class="token keyword">int</span> s0<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> u<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>s0<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> s0<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ans<span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s0<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token comment">// 答案</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s0<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s0<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> S<span class="token operator">=</span>s0<span class="token operator">|</span>s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 造完剑后的集合</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>S<span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">(</span>S<span class="token operator">|</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span>S<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token comment">// 已经到达或不合法</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>S<span class="token punctuation">]</span><span class="token operator">></span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s0<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>S<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s0<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">;</span>
                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>y<span class="token punctuation">,</span>S<span class="token punctuation">,</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>S<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>v<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">|=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>w<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 预处理一定要-1</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>u<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> w<span class="token operator">|=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>v<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token operator">!=</span>inf<span class="token operator">?</span> ans<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>最短路</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu3574 FarmCraft 题解</title>
    <url>/2021/lg3574-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>树形 DP。</p>
<p>设 <span class="math inline">\(f_x\)</span> 为完成以 <span
class="math inline">\(x\)</span> 为根的配送的最短时间。</p>
<p>引入 <span class="math inline">\(g_x\)</span> 作为遍历以 <span
class="math inline">\(x\)</span> 为根的子树并回到 <span
class="math inline">\(x\)</span>，所需要的时间。</p>
<span id="more"></span>
<p>首先考虑 <span class="math inline">\(g\)</span>
的求法，因为每遍历完一棵子树都要回到 <span
class="math inline">\(x\)</span>，所以有 <span class="math display">\[
g_x = \sum_{y \in son(x)} g_y+2
\]</span> 而 <span class="math inline">\(g_x\)</span> 对求出 <span
class="math inline">\(f_x\)</span> 有用，当且仅当 <span
class="math inline">\(g_x\)</span> 处于 <span
class="math inline">\(f_x\)</span> 的前一棵子树的阶段。</p>
<p>具体地说，设 <span class="math inline">\(x\)</span> 子节点集合为
<span class="math inline">\(son(x)\)</span>，则 <span
class="math display">\[
y \in son(x) \quad g_x \text{ 处于 $y-1$ 阶段，} f_x \text{ 处于 $y$
阶段}
\]</span> 转移为 <span class="math display">\[
f_x = \max{ \{  c_x,f_y+g_x+1 \} } \quad y \in son(x)
\]</span> <span class="math inline">\(+1\)</span> 是因为 <span
class="math inline">\(g_x\)</span> 表示的状态已经回到了 <span
class="math inline">\(x\)</span>，但还没有到 <span
class="math inline">\(f_y\)</span> 表示的 <span
class="math inline">\(y\)</span>，所以要加上一条路的时间。</p>
<p>而取最大值，则是配置电脑可以在配送的同时进行，如果能处理完时间更长的状态，那么时间更短的状态一定被处理完了。</p>
<p>特别的，当 $ x=1$ 时，不能先在比特安萨尔处安装，所以 <span
class="math display">\[
f_1 = \max{ \{ c_1+g_1,f_y+g_1+1 \}} \quad y \in son(1)
\]</span> 答案 <span class="math display">\[
\max{ \{ f_1,c_1+g_1 \} }
\]</span> 如何实现有顺序地遍历子树呢？贪心。</p>
<p>用邻项交换证明，此处省略。</p>
<p>按照 <span class="math display">\[
g_x-f_x
\]</span> 递减排序。</p>
<p>理论复杂度 $ O(nk _2 k)<span class="math inline">\(，\)</span> k$ 是
$ son(x)$ 的平均值。</p>
<p>实际比 $ O(n^2 _2 n)$ 低很多，可以 AC 本题。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&lt;</span>g<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> fr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fr<span class="token punctuation">)</span> <span class="token function">dp</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fr<span class="token punctuation">)</span> u<span class="token punctuation">[</span><span class="token operator">++</span>k<span class="token punctuation">]</span><span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>u<span class="token operator">+</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>g<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu3620 数据备份 题解</title>
    <url>/2022/lg3620-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>很容易发现选择不相邻的两个办公楼是不划算的。</p>
<p>所以记 <span class="math inline">\(d_i\)</span> 为第 <span
class="math inline">\(i\)</span> 与第 <span
class="math inline">\(i+1\)</span> 个办公楼之间的距离。</p>
<span id="more"></span>
<p>由于任一个办公楼都属于唯一的配对组，所以一旦选择了 <span
class="math inline">\(d_i\)</span>，<span
class="math inline">\(d_{i-1}\)</span> 与 <span
class="math inline">\(d_{i+1}\)</span> 也就不能再选择。</p>
<p>考虑特殊情况，当 <span class="math inline">\(k=1\)</span>
的时候，答案是就 <span class="math inline">\(\min{\{ d_i
\}}\)</span>。</p>
<p>当 <span class="math inline">\(k=2\)</span> 的时候，设最小的是 <span
class="math inline">\(d_a\)</span>，那么答案一定是</p>
<ol type="1">
<li><span class="math inline">\(d_a\)</span> 加上除了 <span
class="math inline">\(d_a\)</span>，<span
class="math inline">\(d_{a-1}\)</span>，<span
class="math inline">\(d_{a+1}\)</span> 之外的最小值，</li>
<li><span class="math inline">\(d_{a-1}\)</span> 与 <span
class="math inline">\(d_{a+1}\)</span>。</li>
</ol>
<p>两种决策其中一个。</p>
<p>为什么会出现这种情况呢？因为选择 <span
class="math inline">\(a\)</span>，<span
class="math inline">\(a-1\)</span> 与 <span
class="math inline">\(a+1\)</span> 便不能再选。可是如果 <span
class="math inline">\(d_a\)</span> 加上除了上述三者之外的最小值后还不如
<span class="math inline">\(d_{a-1}\)</span> 加上 <span
class="math inline">\(d_{a+1}\)</span> 小，那么就是另一种答案了。</p>
<p>那么就有一个结论，<span class="math inline">\(a-1\)</span> 与 <span
class="math inline">\(a+1\)</span>，在 <span
class="math inline">\(a\)</span> 不被选择时同时不选，在 <span
class="math inline">\(a\)</span> 不选时一定同时被选择。</p>
<p>感性理解一下，对于任何 <span class="math inline">\(k \ge
2\)</span>，这个都是成立的。</p>
<p>单纯地贪心不能保证当前最优就是全局最优，可是能够修改某一个决策的方式维护全局最优，这其实是一个反悔贪心。</p>
<p>所以维护 <span class="math inline">\(d_i\)</span> 的集合 <span
class="math inline">\(S\)</span>，贪心地将最小值 <span
class="math inline">\(d_a\)</span> 加入答案，同时删去 <span
class="math inline">\(d_a\)</span>，<span
class="math inline">\(d_{a-1}\)</span>，<span
class="math inline">\(d_{a+1}\)</span>。加入一个新的元素 <span
class="math inline">\(a&#39;\)</span>，其中 <span
class="math inline">\(d_{a&#39;}=d_{a-1}+d_{a+1}-d_a\)</span>。</p>
<p>这样当取出的最小值为 <span class="math inline">\(d_{a&#39;}\)</span>
时，实际上表明第 2 种决策优于第 1 种决策，加入 <span
class="math inline">\(d_{a&#39;}\)</span> 后也相当于一步反悔，把加入的
<span class="math inline">\(d_a\)</span> 消去了。</p>
<p>既然要快速查找相邻元素，可以用链表维护，用优先队列实现贪心。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">,</span> inf<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> pre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// v[x]代表x是否被删去了</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> val<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span>node b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>val<span class="token operator">></span>b<span class="token punctuation">.</span>val<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> 
priority_queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">updata</span><span class="token punctuation">(</span>node t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> l<span class="token operator">=</span>pre<span class="token punctuation">[</span>t<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token operator">=</span>nxt<span class="token punctuation">[</span>t<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
	v<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	pre<span class="token punctuation">[</span>t<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token operator">=</span>pre<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
    nxt<span class="token punctuation">[</span>t<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token operator">=</span>nxt<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>nxt<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
    t<span class="token punctuation">.</span>val<span class="token operator">=</span>d<span class="token punctuation">[</span>t<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">&amp;&amp;</span>r<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>t<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>inf<span class="token punctuation">)</span><span class="token operator">:</span>inf<span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span>x<span class="token punctuation">,</span>t<span class="token punctuation">.</span>val<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    nxt<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    	<span class="token keyword">while</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment">// 优先队列不方便删除元素，可以额外标记已经被删除的</span>
		node t<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     
        ans<span class="token operator">+=</span>t<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        <span class="token function">updata</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新链表</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu3648 序列分割 题解</title>
    <url>/2022/lg3648-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>根据小学学的乘法分配律，并且手算一下，能够发现，如果要把整个序列分成若干段，那么不同的分割顺序不会对最终得分产生影响。</p>
<p>比如样例的方法是<code>1 3 5</code>，如果我们按照<code>5 3
1</code>来分，答案也是一样的。</p>
<p>然后划分方法就没有后效性了，我们可以定义一个固定的划分顺序。按照习惯都是从左往右去分。</p>
<span id="more"></span>
<p>设 <span class="math inline">\(f_{i,k+1}\)</span> 为前 <span
class="math inline">\(i\)</span> 个数字，划分成 <span
class="math inline">\(k+1\)</span>
段的最大得分。状态看起来是没有错的，但是怎么去转移呢？如果像样例一样做的话，不还要记录某一块区间的长度吗？看数据范围，如果加一维的话肯定是不行的。</p>
<p>不知道是因为我太弱还是太长时间不做 OI
题了，我竟然连这么简单的问题都考虑很久……</p>
<p>后来想到，大可不必像样例一样分。</p>
<p>对于一个 <span class="math inline">\(f_{i,j+1}\)</span>，找到一个
<span class="math inline">\(j\)</span>，满足 <span
class="math inline">\(j &lt; i\)</span>，把从 <span
class="math inline">\(j\)</span>
分割开看作第一次划分，这样就能准确地计算对答案的贡献，也不用关心区间。再者，规定之后只能在
<span class="math inline">\([1,j]\)</span>
这个区间里划分。而这一部分就是 <span
class="math inline">\(f_{j,k}\)</span>。这样就不需要记录划分的那个区间的长度了。</p>
<p>所以转移为 <span class="math display">\[
f_{i,k+1} = \min _ {j \in [1,i)}{\{ f_{j,k} + s_j \cdot (s_i-s_j) \}}
\]</span>
其中右边那一项就是把这一次划分看作第一次划分产生的贡献，剩下的就由之前的状态转移过来。相当于把划分顺序颠倒了，而事实上根据开头的讨论，这是正确的。</p>
<p>复杂度 <span class="math inline">\(O(n^2k)\)</span>，显然不够。</p>
<p>然后就是斜率优化的套路了。</p>
<p>对于一个决策 <span class="math inline">\(j&#39;\)</span> 优于 <span
class="math inline">\(j\)</span>，则有 <span class="math display">\[
f_{j&#39;,k} + s_{j&#39;} \cdot (s_i-s_{j&#39;}) &lt; f_{j,k} + s_j
\cdot (s_i-s_j)
\]</span></p>
<p><span class="math display">\[
f_{j&#39;,k} + s_is_{j&#39;} -s^2_{j&#39;} &lt; f_{j,k} + s_is_j - s_j^2
\]</span></p>
<p><span class="math display">\[
f_{j&#39;,k} - f_{j,k} + s_j^2 -s^2_{j&#39;} &lt; s_is_j - s_is_{j&#39;}
\]</span></p>
<p><span class="math display">\[
\frac{f_{j&#39;,k} - f_{j,k} + s_j^2 -s^2_{j&#39;}}{s_j - s_{j&#39;}}
&lt; s_i
\]</span></p>
<p>套路地去维护下凸包就好了。</p>
<p>内存不太足，滚动数组优化。开 long long。</p>
<p>复杂度 <span class="math inline">\(O(nk)\)</span>。</p>
<h2 id="code">code</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> K<span class="token operator">=</span><span class="token number">205</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> k_<span class="token punctuation">,</span> p<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll <span class="token function">squ</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">double</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">?</span> <span class="token number">1.0</span><span class="token operator">*</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>p<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span>f<span class="token punctuation">[</span>p<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token function">squ</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">squ</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1e18</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token function">solve</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k_<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>k_<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">,</span>p<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		q<span class="token punctuation">[</span>l<span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token operator">&amp;&amp;</span><span class="token function">calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>l<span class="token punctuation">;</span>
			f<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>p<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token operator">&amp;&amp;</span><span class="token function">calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token function">calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">--</span>r<span class="token punctuation">;</span>
			q<span class="token punctuation">[</span><span class="token operator">++</span>r<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>p<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">solve</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>k_<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span>k_<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu3953 逛公园 题解</title>
    <url>/2021/lg3953-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>首先跑最短路，本题并不卡那个死掉的算法。</p>
<p>求出 1 号节点到每个点的最短路 $ d$。</p>
<p>然后考虑计数。</p>
<span id="more"></span>
<p>计数可以考虑 DP，但是必须满足无后效性。</p>
<p>设计一个类似于分层图的状态。</p>
<p><span class="math inline">\(f(x,k)\)</span> 为 1 号节点到 <span
class="math inline">\(x\)</span> 号节点，距离为 <span
class="math inline">\(d(x)+k\)</span> 的方案数。</p>
<p>考虑转移，假定 <span class="math inline">\(f(y,k_2)\)</span> 能转移到
$ f(x,k_1)$。</p>
<p>设 $ (x y)$ 边权为 $ z$，则有 <span class="math display">\[
d(y)+z+k_2=d(x)+k_1
\]</span> <span class="math display">\[
k_2=d(x)-d(y)-z+k_1
\]</span></p>
<p>转移为 <span class="math display">\[
f(x,k)= \sum_{x \rightarrow y} {f(y,d(x)-d(y)+k-z)}
\]</span> 对于 <span class="math inline">\((x \rightarrow
y)\)</span>，关于 <span class="math inline">\(x\)</span>
的状态反而依赖关于 <span class="math inline">\(y\)</span>
的状态。那么必定是建反图，然后记忆化搜索。</p>
<p>边界 $ f(1,0)=1$</p>
<p>答案 <span class="math display">\[
\sum_{0 \le i \le K} f(n,i)
\]</span>  </p>
<p>考虑无解的情况。</p>
<p>题目描述中告诉我们有 0 边。</p>
<p>我们发现，有无穷多条合法路径，当且仅当有边权为 0 的环。</p>
<p>又因为没有负边权，所以 0 环一定由若干 0 边构成。</p>
<p>如何找出 0 环呢？</p>
<p>观察我们的转移，不难想到，在 0 边上，$ k=d(x)-d(y)+k-z$，即会递归到 $
f(y,k)$</p>
<p>如果有 0 环，那么一定又会再次访问到 $ f(x,k)$。</p>
<p>所以对于每个 $ f(x,k)$，用 $ v(x,k)$
来记录访问情况。每访问到一个状态，将其记为 1，访问完之后就改回
0。如果访问到 1 的状态，就证明有 0 环，无解。</p>
<p>这也恰好说明了，这个状态是“无环”的。并不是真的不可能存在环，但是如果访问一圈回到
<span
class="math inline">\(f(x,k)\)</span>，说明存在环，也就直接无解了，不需要再考虑别的。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mp</span> <span class="token expression">make_pair</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SET</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> K<span class="token punctuation">,</span> P<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> QwQ<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> fa<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt2<span class="token punctuation">,</span> h2<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver2<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt2<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w2<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver2<span class="token punctuation">[</span><span class="token operator">++</span>cnt2<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> w2<span class="token punctuation">[</span>cnt2<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> nxt2<span class="token punctuation">[</span>cnt2<span class="token punctuation">]</span><span class="token operator">=</span>h2<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h2<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt2<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dijk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	priority_queue<span class="token operator">&lt;</span>PII <span class="token operator">></span> q<span class="token punctuation">;</span>
	<span class="token function">SET</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">mp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
		v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">;</span>
				q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">mp</span><span class="token punctuation">(</span><span class="token operator">-</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>	
	<span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> QwQ<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h2<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> y<span class="token operator">=</span>ver2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">(</span>ans<span class="token operator">+=</span><span class="token function">dp</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%=</span>P<span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>QwQ<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		n<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> K<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> P<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token function">r_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add2</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">dijk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>K<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span><span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>P<span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>QwQ<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
		QwQ<span class="token operator">=</span>cnt<span class="token operator">=</span>cnt2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">SET</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SET</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SET</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SET</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SET</span><span class="token punctuation">(</span>h2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu3959 宝藏 题解</title>
    <url>/2022/lg3959-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="这题我只想称之为神">这题我只想称之为神</h3>
<p>最优解中，开凿的道路一定联通，且一定是一棵树。这是因为如果最终不连通，那么显然不符合题意；如果最后不是一棵树，那么删去若干一条边后，不仅仍然可能连通，而且会减少代价。</p>
<p>暴搜显然不合适，那就考虑状压 DP。</p>
<span id="more"></span>
<p>DP 需要一定的顺序。和树形 DP
一样设子树信息为状态？不行，一开始并不是一棵树，直接 pass
掉。节点编号？也不行，根本转移不动。考虑到最后求出的实际上是一棵生成树，那么可以用生成树高度作为顺序，将免费打通的节点看作根。</p>
<p>于是就有了状态。设 <span class="math inline">\(f(i,S)\)</span>
为联通的节点集合为 <span
class="math inline">\(S\)</span>，当前生成树高度为 <span
class="math inline">\(i\)</span>
时，需要的最小代价。由于可以免费打通一个点，不难想到边界为 <span
class="math display">\[
f(i,S) = \begin{cases}
0 &amp; i=1, |S|=1 \\
\infty &amp; \text{otherwise}
\end{cases}
\]</span> 设全集为 <span class="math inline">\(U\)</span>，答案为 <span
class="math inline">\(\min \limits_{i \in [1,n]}{ \{ f(i,U) \}
}\)</span></p>
<p> </p>
<p>接下来就是转移了。显然，设 <span class="math inline">\(S_0 \subseteq
S\)</span>，一定能从 <span class="math inline">\(f(i-1,S_0)\)</span>
转移到 <span class="math inline">\(f(i,S)\)</span>。</p>
<p>因为不管高度为 <span class="math inline">\(S_0\)</span>
的这一棵树是怎么打通的，只要打通 <span
class="math inline">\(S-S_0\)</span> 中的所有点，就一定能够达到 <span
class="math inline">\(S\)</span> 这个状态。我们可以枚举每一个子集 <span
class="math inline">\(S_0\)</span>，然后将这个状态加上转移所需要的最小代价，满足最优子结构性，这样一定是正确的。</p>
<p>代价怎么计算呢？道路长度可以贪心地选择最小的。由于是按照树高由低到高的顺序计算，所以经过的节点数就是<code>i-1</code>。那么所有新打通的边的
<span class="math inline">\(K\)</span> 都是相同的（就是题目中的 <span
class="math inline">\(K\)</span>）。所以设 <span
class="math inline">\(d(i,j)\)</span> 为状态 <span
class="math inline">\(i\)</span> 转移到状态 <span
class="math inline">\(j\)</span> 的最小边权和。</p>
<p>转移为 <span class="math display">\[
f(i,j) = \min \limits_{k \subseteq j} { \{ f(i-1,k)+ (i-1) \cdot d(k,j)
\} }
\]</span> <span class="math inline">\(d(i,j)\)</span>
可以直接预处理，参考下面代码。</p>
<h3 id="复杂度分析">复杂度分析</h3>
<p>预处理要枚举子集，枚举能够打通的点，复杂度为 <span
class="math inline">\(O(n^23^n)\)</span>。</p>
<p>DP 时要枚举树高，枚举子集，复杂度为 <span
class="math inline">\(O(n3^n)\)</span>。</p>
<p>总复杂度为 <span class="math inline">\(O(n^23^n)\)</span>。</p>
<p>当然你也可以用 预处理完一个 <span
class="math inline">\(d(i,j)\)</span> 后马上转移 来降低常数。</p>
<p>不过这也完全足够了，而且看着思路很清晰。</p>
<p>关于如下枚举子集的两个循环复杂度为何是 <span
class="math inline">\(3^n\)</span>，这里不做赘述。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token punctuation">;</span>j<span class="token operator">=</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="code">code</h3>
<p>这题实现并不显然，注意代码，具体看注释。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SET</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>N<span class="token punctuation">,</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> U<span class="token punctuation">,</span> ans<span class="token operator">=</span>inf<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    U<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">SET</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SET</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>U<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token punctuation">;</span>j<span class="token operator">=</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> fg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> u<span class="token operator">=</span>i<span class="token operator">^</span>j<span class="token punctuation">;</span>
        <span class="token comment">// j这个循环意思是枚举i的所有子集</span>
        <span class="token comment">// u是j关于i的补集，就是j->i要打通的节点集</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token operator">>></span>k<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 枚举u的每一位，如果是1的话就找到达这个节点的最短边</span>
            <span class="token comment">// 这个点记为a</span>
            <span class="token keyword">int</span> t<span class="token operator">=</span>inf<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>o<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>o<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">>></span>o<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token comment">// 枚举j的每一位，如果是1的话，就记录这个点到达p的边权</span>
            <span class="token comment">// 记为b，取b->a的最小值</span>
                t<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>a<span class="token punctuation">[</span>o<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            	<span class="token comment">// 注意这里o和k都是要+1的，因为上面枚举的是二进制位。</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span>inf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
            <span class="token comment">// t=inf 不存在b->a的边</span>
            d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>t<span class="token punctuation">;</span>
            <span class="token comment">//直接累加</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fg<span class="token punctuation">)</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>inf<span class="token punctuation">;</span>
        <span class="token comment">// 不存在的话，自然是inf了</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 预处理</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>U<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token punctuation">;</span>k<span class="token punctuation">;</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>j<span class="token punctuation">)</span>
        <span class="token comment">// 枚举树高，状态以及它的子集</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>inf<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    		<span class="token comment">// d[k][j]!=inf 可以转移</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>U<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 很友好，不会爆int</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu4139 上帝与集合的正确用法 题解</title>
    <url>/2021/lg4139-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://www.luogu.com.cn/problem/P4139">link</a></p>
<p>设 $ S=2<sup>{2</sup>{2 }}$</p>
<p>由扩展欧拉定理得欧拉降幂公式</p>
<p><span class="math display">\[  \forall k &gt; \varphi(p) \quad a^k
\equiv a^{k \, \bmod \, \varphi (p) + \varphi (p)} \, (\bmod p)
\]</span></p>
<p>对于本题</p>
<p><span class="math display">\[  2^S \equiv 2^{S \, \bmod \, \varphi
(p) + \varphi (p)} \, (\bmod p) \]</span></p>
<span id="more"></span>
<p>仔细观察不难发现</p>
<p><span class="math display">\[  S \bmod \varphi(p) \]</span></p>
<p>实际上又是一个这样的式子，我们采用递归的方法求解。</p>
<p>在不断递归的过程中，要膜的欧拉函数是越来越小的，并且最多递归 $ _2p$
次。</p>
<p>不要傻乎乎地去预处理欧拉函数（确信</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
ll t<span class="token punctuation">,</span> p<span class="token punctuation">;</span>
ll <span class="token function">fp</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">,</span>ll p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ll z<span class="token operator">=</span><span class="token number">1ll</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>y<span class="token punctuation">;</span>x<span class="token operator">=</span>x<span class="token operator">*</span>x<span class="token operator">%</span>p<span class="token punctuation">,</span>y<span class="token operator">>>=</span><span class="token number">1ll</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&amp;</span><span class="token number">1ll</span><span class="token punctuation">)</span> z<span class="token operator">=</span>z<span class="token operator">*</span>x<span class="token operator">%</span>p<span class="token punctuation">;</span>
    <span class="token keyword">return</span> z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
ll <span class="token function">phi</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ll y<span class="token operator">=</span>x<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">/=</span>i<span class="token punctuation">,</span> y<span class="token operator">*=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> x<span class="token operator">/=</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">)</span> y<span class="token operator">/=</span>x<span class="token punctuation">,</span> y<span class="token operator">*=</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
ll <span class="token function">f</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0ll</span><span class="token punctuation">;</span>
    ll y<span class="token operator">=</span><span class="token function">phi</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> x<span class="token operator">!=</span><span class="token number">1ll</span><span class="token operator">?</span> <span class="token function">fp</span><span class="token punctuation">(</span><span class="token number">2ll</span><span class="token punctuation">,</span><span class="token function">f</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">+</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">0ll</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">--</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">f</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>欧拉函数</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu4155 国旗计划 题解</title>
    <url>/2022/lg4155-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>既然区间没有包含关系，那么把所有区间按照左端点递增排序，这样右端点也是递增的。</p>
<span id="more"></span>
<p>断环为链，当区间 <span class="math inline">\([l_i,r_i]\)</span>
被强制选择时，只要贪心地选择靠右的区间，记录达到 <span
class="math inline">\(l_i+m\)</span>
位置时经过的区间数量。（也就是把环覆盖一遍）</p>
<p>这个算法是没问题的，但是要求出每个区间的情况，复杂度 <span
class="math inline">\(O(n^2)\)</span>，不能承受。</p>
<p>要优化的是暴力求固定边界的区间数量，可以用倍增。</p>
<p>设 <span class="math inline">\(f(x,i)\)</span> 为区间 <span
class="math inline">\(x\)</span> 经过 <span
class="math inline">\(2^i\)</span> 个区间所能达到的区间编号。</p>
<p>注意最后要加上 2，自己和最后一个区间统计不到。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> len<span class="token punctuation">,</span> ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Interval</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> id<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>Interval a<span class="token punctuation">,</span>Interval b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>l<span class="token operator">!=</span>b<span class="token punctuation">.</span>l<span class="token operator">?</span> a<span class="token punctuation">.</span>l<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>l<span class="token operator">:</span>a<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ed<span class="token operator">=</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>m<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>ed<span class="token punctuation">)</span> ans<span class="token operator">+=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">,</span> x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> ans<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token operator">=</span>n<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">+=</span>m<span class="token punctuation">;</span>
     	<span class="token comment">// 特殊处理，此时是l>m，r&lt;m</span>
		<span class="token keyword">else</span> a<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>m<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">+</span>m<span class="token punctuation">,</span>i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token comment">// 断环为链</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	a<span class="token punctuation">[</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token number">0x7fffffff</span><span class="token punctuation">;</span> <span class="token comment">// 这里一定要足够大</span>
	<span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&lt;=</span>len<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">++</span>r<span class="token punctuation">;</span>
		f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span> ans<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">solve</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d%c"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">" \n"</span><span class="token punctuation">[</span>i<span class="token operator">==</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu4381 Island 题解</title>
    <url>/2021/lg4381-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>不难发现，给出的是一个基环树森林。</p>
<p>渡船的使用条件，实际上是：离开一颗基环树后，就不能再回来。</p>
<p>题目要求走过的路最长，不难想到是基环树的直径。</p>
<span id="more"></span>
<p>显然基环树的直径有两种可能</p>
<ol type="1">
<li>在去掉环后的某棵子树中（若有负边权）</li>
<li>两端在在去掉环后的两颗子树中 / 把环断开后，树的直径</li>
</ol>
<p>（但在本题中只有第二种就是了）</p>
<p>最终答案为每颗基环树直径的和。</p>
<p>对于第一种情况，找到环后，以环上的每个节点为根，在它的子树中跑 DP
求最长链就行了。</p>
<p>设以环上节点 $ x$ 为根，不经过换上节点，能够到达的最远距离为 <span
class="math inline">\(d(x)\)</span>，两点间距离为 <span
class="math inline">\(dis(x,y)\)</span>。</p>
<p>第二种情况仅仅是：选择两个环上的点 $ (i,j)$，最大化 <span
class="math inline">\(d(i)+d(j)+dis(i,j)\)</span>。</p>
<p>考虑环形 DP
的处理方案，我们将环断开并复制一倍，用单调队列优化点的枚举。</p>
<p>用前缀和处理两点间的距离，设其为 <span
class="math inline">\(S\)</span>。</p>
<p>设环为 $ u$。</p>
<p>在队头维护：满足 <span
class="math inline">\(d(u_i)+d(u_j)+S(u_j)-S(u_i)\)</span> 的最大的 $
u_j$。</p>
<p>在队尾维护：$ d(u_r)-S(u_r)$ 单调减。</p>
<p>环上两点有顺时针和逆时针两个距离，本题无负权，所以其中一个距离一定大于另一个。</p>
<p>若环上有 $ p$ 个节点，则在队头排除距离小于 $ i-p$ 的决策。</p>
<p>实现时注意细节。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> num<span class="token punctuation">,</span> p<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>
<span class="token keyword">int</span> dfn<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> fr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll ans<span class="token punctuation">,</span> ANS<span class="token punctuation">;</span>
ll d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">fc</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    st<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>y<span class="token punctuation">)</span> s<span class="token punctuation">[</span><span class="token operator">++</span>p<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> st<span class="token punctuation">[</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>w<span class="token punctuation">[</span>fr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>fr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    s<span class="token punctuation">[</span><span class="token operator">++</span>p<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>p<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> v<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>p<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>p<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">=</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>p<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>st<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>num<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> fr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span>fr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">fc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">DP</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
    v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">DP</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">korekara</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    p<span class="token operator">=</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>p<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">DP</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    R <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>p<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;=</span>i<span class="token operator">-</span>p<span class="token punctuation">)</span> <span class="token operator">++</span>l<span class="token punctuation">;</span>
        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>d<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>s<span class="token punctuation">[</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>st<span class="token punctuation">[</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>d<span class="token punctuation">[</span>s<span class="token punctuation">[</span>q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span>st<span class="token punctuation">[</span>q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>d<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span>r<span class="token punctuation">;</span>
        q<span class="token punctuation">[</span><span class="token operator">++</span>r<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    ANS<span class="token operator">+=</span>ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">korekara</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ANS<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>基环树</tag>
        <tag>单调队列优化</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu4588 数学计算 题解</title>
    <url>/2022/lg4588-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>比较巧妙的题目。</p>
<p>乘上一个数再除以它，相当于在 <span class="math inline">\(x\)</span>
中去掉了这个因子。我们的目的是快速找到那个因子并且快速维护 <span
class="math inline">\(x\)</span> 的值。</p>
<span id="more"></span>
<p>在 <span class="math inline">\([1,q]\)</span>
上建一颗线段树，起初每个节点值为 1，根节点表示这 <span
class="math inline">\(q\)</span>
个数的积。因为每个节点最多操作两次（一次乘一个数，一次去掉），所以对于第
<span class="math inline">\(i\)</span> 个操作<code>1 m</code>，就把第
<span class="math inline">\(i\)</span> 个节点改为 <span
class="math inline">\(m\)</span>，更新根节点；对于操作<code>2
pos</code>，把 <span class="math inline">\(pos\)</span> 位置的节点改为
1，更新根节点，相当于除以这个数。</p>
<p>你甚至只需要写建树和单点查询……</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> T<span class="token punctuation">,</span> q<span class="token punctuation">,</span> mod<span class="token punctuation">;</span>
ll t<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> o<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    t<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span>o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">build</span><span class="token punctuation">(</span>o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> o<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token function">update</span><span class="token punctuation">(</span>o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    t<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>t<span class="token punctuation">[</span>o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> op<span class="token punctuation">,</span> m<span class="token punctuation">,</span> pos<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span><span class="token operator">&amp;</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token punctuation">,</span>i<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token punctuation">,</span>pos<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>T<span class="token operator">--</span><span class="token punctuation">;</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu4766 Outer space invaders 题解</title>
    <url>/2022/lg4766-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>满足 $n $ 和 <span class="math inline">\(a_i,b_i \in
[1,10000]\)</span>，这都不离散化，那还是人么（）。</p>
<p>没有明显的线性更新顺序，「时间」则是一个天然的序，且区间信息可以合并，所以设
<span class="math inline">\(f(l,r)\)</span> 为在时间 <span
class="math inline">\([l,r]\)</span> 内，消灭所有
aliens，所需要的最小代价。</p>
<span id="more"></span>
<p>将时间离散化，数组就能开的下了。此时设所有不重复的 <span
class="math inline">\(a_i\)</span> 与 <span
class="math inline">\(b_i\)</span> 将总时间划分成 <span
class="math inline">\(m\)</span> 段（也即是离散化后 <span
class="math inline">\(a_i\)</span> 与 <span
class="math inline">\(b_i\)</span> 的总数）。</p>
<p>边界 <span class="math inline">\(f(i,j) = \inf\)</span>。</p>
<p>答案 <span class="math inline">\(f(1,m)\)</span>。</p>
<p>由于一次会消灭所有距离 <span class="math inline">\(R\)</span> 以内的
aliens，所以优先攻击最远的。对于区间 <span
class="math inline">\([i,j]\)</span>，找到区间内距离最大的 <span
class="math inline">\(x\)</span>。如果没有，那么 <span
class="math inline">\(f(i,j) = 0\)</span>。如果有的话，那么我们可在
<span class="math inline">\([a_x,b_x]\)</span>
任意一个时刻消灭它，可以取最小值。</p>
<p>转移 <span class="math display">\[
f(i,j) = \min { \{  f(i,k-1)+f(k+1,j)+d_x\} }
\]</span> 要注意枚举元区间长时应从 1
开始，因为不能直接处理这部分信息。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">605</span><span class="token punctuation">,</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> t<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">[</span><span class="token operator">++</span>m<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token operator">++</span>m<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>t<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>t<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>t<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>t<span class="token punctuation">;</span>
        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>t<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>t<span class="token punctuation">;</span>
        <span class="token comment">// 直接预处理下标</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>l<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">+</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 从l=1开始</span>
        <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">>=</span>i<span class="token operator">&amp;&amp;</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&lt;=</span>j<span class="token operator">&amp;&amp;</span>d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">></span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> x<span class="token operator">=</span>k<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token operator">||</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token comment">// a[x]==b[x]的情况不会出现，但是强迫症还是特判一下</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>
            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>T<span class="token operator">--</span><span class="token punctuation">;</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>区间DP</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu4819 杀人游戏 题解</title>
    <url>/2021/lg4819-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="update-2022.2.9-修改了代码">update 2022.2.9 修改了代码</h2>
<p>不妨假设平民为白点，杀手为黑点，认识的关系为一条有向边。</p>
<p>求不访问黑点并且知道黑点的最小代价。</p>
<p>若有 <span class="math inline">\(n\)</span>
个点，显然每个点为黑的概率为 <span
class="math inline">\(\frac{1}{n}\)</span>。</p>
<p>而每访问一个白点，都能得知与它出边相连的点的颜色。</p>
<p>考虑强连通分量。</p>
<span id="more"></span>
<p>不难发现，对于每个强连通分量，只要以概率增加 <span
class="math inline">\(\frac{1}{n}\)</span>
为代价访问其中一个点，就能得知整个强连通分量的颜色情况。。</p>
<p>所以求出强连通分量后进行缩点，我们就得到了一个 DAG。</p>
<p>为了减少总访问次数，访问入度不为 0 的 SCC 是不划算的。</p>
<p>简单证明：设缩点后存在 <span class="math inline">\((x \rightarrow
y)\)</span> 的边，则访问完 <span class="math inline">\(x\)</span>
中所有的点后，必定能知道 <span class="math inline">\(y\)</span>
中一个点的信息，所以对于 <span
class="math inline">\(y\)</span>，不需要增加 <span
class="math inline">\(\frac{1}{n}\)</span> 的访问代价。</p>
<p>所以设缩点后入度为 0 的点的数量为 <span
class="math inline">\(s\)</span>，则访问到黑点的概率为 <span
class="math inline">\(\frac{s}{n}\)</span>，答案为 $ $。</p>
<p> </p>
<p>考虑只含一个点的 SCC，设其为 <span
class="math inline">\(c\)</span>，若其入度为
0，且其能够到达的点的入度均大于 1，那么若最后访问 <span
class="math inline">\(c\)</span>，整张图的情况已经被确定了。若未找到黑点，则
$ c$ 为黑点。如果包含超过 1
个节点，那么必须再访问它再能确定黑点。这样可以减少一次访问，且对于任意图，能且仅能减少一次。</p>
<p>所以若存在 <span class="math inline">\(c\)</span>，令 <span
class="math inline">\(s-1\)</span> 即可。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> num<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> scc<span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> deg<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sz<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tc<span class="token punctuation">,</span> hc<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> vc<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> nc<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">adc</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> vc<span class="token punctuation">[</span><span class="token operator">++</span>tc<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nc<span class="token punctuation">[</span>tc<span class="token punctuation">]</span><span class="token operator">=</span>hc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> hc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>tc<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>num<span class="token punctuation">,</span> st<span class="token punctuation">[</span><span class="token operator">++</span>k<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">++</span>scc<span class="token punctuation">;</span>
        <span class="token keyword">do</span> y<span class="token operator">=</span>st<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>scc<span class="token punctuation">,</span> <span class="token operator">++</span>sz<span class="token punctuation">[</span>scc<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>deg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">||</span>sz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>hc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>deg<span class="token punctuation">[</span>vc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    	<span class="token function">memset</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        	<span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        	<span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>v<span class="token punctuation">[</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				v<span class="token punctuation">[</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">++</span>deg<span class="token punctuation">[</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">adc</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>scc<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>deg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>scc<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">--</span>ans<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.6lf\n"</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span>ans<span class="token punctuation">)</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>DAG</tag>
        <tag>强连通分量</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu4852 yyf hates choukapai 题解</title>
    <url>/2022/lg4852-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>不是那么显然的 DP。</p>
<p>对于每一次连抽，只会累计开始连抽的那张卡的欧气值，损失之后 <span
class="math inline">\(c-1\)</span>
张卡的欧气值。而单抽则不会损失欧气值。题目要求最大化欧气值，那么就是要尽量减小连抽损失的欧气值。</p>
<span id="more"></span>
<p>形式化地，对于一次在 <span class="math inline">\(i\)</span>
位置开始的连抽，得到 <span class="math inline">\(a_i\)</span>，损失
<span class="math inline">\(\sum_{j=i+1}^{i+c-1} a_i\)</span>
的欧气。对于 <span class="math inline">\(j\)</span> 位置的单抽，只会得到
<span class="math inline">\(a_j\)</span> 的欧气值。设 <span
class="math inline">\(b_i = \sum_{j=i+1}^{i+c-1}
a_i\)</span>，那么目标为最小化选出的 <span
class="math inline">\(n\)</span> 个 <span
class="math inline">\(b_i\)</span>。可以用前缀和预处理。</p>
<p>设 <span class="math inline">\(f(i,j)\)</span> 为进行了 <span
class="math inline">\(j\)</span> 次连抽，其中第 <span
class="math inline">\(j\)</span> 次连抽从 <span
class="math inline">\(i\)</span> 开始，且 <span
class="math inline">\([1,i-1]\)</span> 已经抽完了，所能选出 <span
class="math inline">\(j\)</span> 个 <span
class="math inline">\(\{b\}\)</span> 中元素的最小值。</p>
<p>思路是枚举上一次连抽的位置，由于两次连抽中间必然全是单抽且不成超过
<span class="math inline">\(d\)</span> 次，而连抽必须抽 <span
class="math inline">\(c\)</span> 个，那么对于 <span
class="math inline">\(f(i,j)\)</span>，上一次连抽的位置 <span
class="math inline">\(i&#39; \in
[i-c-d,i-c]\)</span>。确定位置之后，直接加上 <span
class="math inline">\(b_i\)</span> 就行。 <span class="math display">\[
f(i,j) = \min_{i&#39; \in [i-c-d,i-c]} \{ f(i&#39;,j-1)  + b_i \}
\]</span> 设 <span class="math inline">\(len = n \times c +
m\)</span>，则复杂度为 <span class="math inline">\(O(n \cdot
len^2)\)</span>。</p>
<p>对于 <span class="math inline">\(i &gt; i_0\)</span>，<span
class="math inline">\(i\)</span> 的合法决策区间的左右端点必然严格大于
<span class="math inline">\(i\)</span>
的合法决策区间，直接单调队列优化。</p>
<p>对于能够成为答案的 <span
class="math inline">\(f(i,n)\)</span>，必须满足<span
class="math inline">\(i \in [1,len-c+1]\)</span> 且 <span
class="math inline">\(len-(i+c-1) \le
d\)</span>，即最后一次连抽后单抽不能超过 <span
class="math inline">\(d\)</span> 次。</p>
<p>最终答案 <span class="math inline">\(\sum_{i=1}^n a_i -
\max\{f(i,n)\}\)</span>。</p>
<p>复杂度 <span class="math inline">\(O(n \cdot len)\)</span> 。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">200005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>i<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token operator">=</span>c<span class="token operator">*</span>n<span class="token operator">+</span>m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token operator">-</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意第一次连抽的位置区间是[1,d+1]</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token operator">-</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;</span>i<span class="token operator">-</span>c<span class="token operator">-</span>d<span class="token punctuation">)</span> <span class="token operator">++</span>l<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>i<span class="token operator">-</span>c<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>f<span class="token punctuation">[</span>q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span>r<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">-</span>c<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> q<span class="token punctuation">[</span><span class="token operator">++</span>r<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">-</span>c<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">>=</span>i<span class="token operator">-</span>c<span class="token operator">-</span>d<span class="token operator">&amp;&amp;</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;=</span>i<span class="token operator">-</span>c<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    ll ans<span class="token operator">=</span><span class="token number">1e15</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token operator">-</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">-</span>j<span class="token operator">&lt;=</span>d<span class="token operator">&amp;&amp;</span>ans<span class="token operator">></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token operator">-</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu4926 倍杀测量者 题解</title>
    <url>/2022/lg4926-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>首先明确，对于 <span class="math inline">\(o=1\)</span> 的选手 <span
class="math inline">\(A\)</span>，他不用女装的条件是 <span
class="math inline">\(X_A \ge X_B \cdot(k-T)\)</span>。对于 <span
class="math inline">\(o=2\)</span> 的选手 <span
class="math inline">\(A\)</span>，他不用女装的条件是 <span
class="math inline">\(X_A \cdot (k+T) &gt; X_B\)</span>。</p>
<p>这样是不能用差分约束系统来求解的，因为变量之间的关系是乘法，但是如果将它们换成同底数的对数，那么相对大小不变且乘法就转化成了加法。<span id="more"></span>所以
<span class="math display">\[
X_A \ge X_B \cdot(k-T)
\]</span></p>
<p><span class="math display">\[
\log_2 (X_A) - \log_2 (X_B) \ge  \log2 (k-T)
\]</span></p>
<p>从 <span class="math inline">\(B\)</span> 向 <span
class="math inline">\(A\)</span> 连一条权值为 <span
class="math inline">\(\log2 (k-T)\)</span> 的边。 <span
class="math display">\[
X_A \cdot (k+T) &gt; X_B
\]</span></p>
<p><span class="math display">\[
\log_2 (X_A) + \log_2 (k+T) &gt; \log_2 (X_B)
\]</span></p>
<p><span class="math display">\[
\log_2(X_A) - \log_2 (X_B) &gt; - \log_2(k+T)
\]</span></p>
<p>从 <span class="math inline">\(B\)</span> 向 <span
class="math inline">\(A\)</span> 连一条权值为 <span
class="math inline">\(- \log_2 (k+T)\)</span> 的边。</p>
<p>虽然两个式子一个是大于等于一个是大于，但是允许 <span
class="math inline">\(10^{-4}\)</span>
的精度误差存在，所以这样连边是没问题的。</p>
<p>注意这样连边要用 SPFA
跑最长路判断正环（其实和最短路判断负环完全一样）。</p>
<p>还要建立一个虚拟源点 <span
class="math inline">\(n+1\)</span>，保证图连通。</p>
<p> </p>
<p>要找到最大的 <span
class="math inline">\(T\)</span>，显然二分答案，值域是 <span
class="math inline">\([0,\min{\{ k \}}]\)</span>，否则 <span
class="math inline">\(k-T\)</span> 就会出现负数。</p>
<p>题目中还给出了一些人的分数，一种方法是直接向虚拟源点 <span
class="math inline">\(n+1\)</span>
连边。但是这么做的致命缺陷在于会导致一个节点有过多的子节点，会严重影响
SPFA 算法的速度。<del>说不定还会卡掉 DFS-SPFA</del>。</p>
<p>所以再建一个虚拟节点 <span class="math inline">\(0\)</span>，对于每个
<span class="math inline">\(C,x\)</span>，由 <span
class="math inline">\(0\)</span> 向 <span
class="math inline">\(C\)</span> 连一条权值为 <span
class="math inline">\(\log_2(x)\)</span> 的边，由 <span
class="math inline">\(C\)</span> 向 <span
class="math inline">\(0\)</span> 连一条权值为 <span
class="math inline">\(-\log_2(x)\)</span>
的边。这是常见的维护差分约束系统中已知量与未知量相对大小的套路。</p>
<p>这样做比直接连 <span class="math inline">\(n+1\)</span> 要快大概
200ms。</p>
<p>由于 <span class="math inline">\(T\)</span>
是二分确定的，所以加边的时候加的是原来的权值，通过 <span
class="math inline">\(o\)</span> 的不同分类讨论确定边权。</p>
<p>最后，如果有正环，说明不全成立，一定有人要女装。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5005</span><span class="token punctuation">,</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-4</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
<span class="token keyword">int</span> tot<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> nxt<span class="token punctuation">,</span> to<span class="token punctuation">,</span> type<span class="token punctuation">;</span> <span class="token keyword">double</span> w<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> e<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// type1是o=1，type2是o=2，type3是特殊边</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">double</span> z<span class="token punctuation">,</span><span class="token keyword">int</span> typ<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	e<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token operator">=</span>y<span class="token punctuation">,</span> e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">=</span>z<span class="token punctuation">,</span> e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token operator">=</span>typ<span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token keyword">double</span> dlt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>inf<span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
	d<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span> <span class="token keyword">double</span> z<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> z<span class="token operator">=</span><span class="token function">log2</span><span class="token punctuation">(</span>z<span class="token operator">-</span>dlt<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> z<span class="token operator">=</span><span class="token operator">-</span><span class="token function">log2</span><span class="token punctuation">(</span>z<span class="token operator">+</span>dlt<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">&lt;</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>z<span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token comment">// 最长路中包含超过n+1条边，说明有正环</span>
                <span class="token comment">// 比判断入队次数更快</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">double</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> op<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> <span class="token keyword">double</span> x<span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>x<span class="token punctuation">,</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> r<span class="token operator">=</span><span class="token function">fmin</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>t<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> c<span class="token punctuation">;</span> <span class="token keyword">double</span> x<span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token function">log2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token function">log2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">spfa</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token comment">// 最小的T还不成立，无解</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">></span>eps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">double</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">spfa</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> l<span class="token operator">=</span>mid<span class="token punctuation">;</span> <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.6lf\n"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>差分约束系统</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu5008 锦鲤抄 题解</title>
    <url>/2021/lg5008-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="update-2022.6.28-修改了证明部分">update 2022.6.28
修改了证明部分</h2>
<p>在 DAG 中，必然有入度为 0
的点，这些点是不能选择的。而其他的点则可以选择。</p>
<p>用 Tarjan 算法缩点，得到一个 DAG。</p>
<span id="more"></span>
<p>讨论每个 SCC 内部的选择。</p>
<p>若存在入度为不为 0 的 SCC，设其为 <span
class="math inline">\(x\)</span>。</p>
<p>那么 <span class="math inline">\(x\)</span> 内的点可以随便选。</p>
<p>证明：</p>
<blockquote>
<p>如果 <span class="math inline">\(x\)</span> 的入度不为
0，分以下情况讨论。</p>
<p>对于 <span class="math inline">\(x\)</span> 中只有 1
个点的情况，显然成立。</p>
<p>否则，<span class="math inline">\(x\)</span>
至少由一个简单环构成，且一定存在入度 <span class="math inline">\(\ge
2\)</span> 的点，设其为 <span class="math inline">\(u\)</span>。</p>
<p>对于 <span class="math inline">\(x\)</span>
中的每个简单环，设其入度最大的点为 $ u$，则至少可以删去 1 条 <span
class="math inline">\(u\)</span> 的入边，断开这个简单环。而只要 <span
class="math inline">\(u\)</span> 的入度不为
0，就不会影响到点的选择。最终可以得到一个多了若干条入边的 DAG。</p>
<p>因为 <span class="math inline">\(x\)</span> 入度不为 0，所以这个 DAG
不存在入度为 0 的点，那么都可以删去，命题得证。</p>
</blockquote>
<p> </p>
<p>考虑入度为 0 的 SCC，设其为 <span
class="math inline">\(y\)</span>。</p>
<blockquote>
<p>仿照上述证明思路，我们仍以 <span class="math inline">\(y\)</span>
内每个简单环删去若干边为代价，得到一个 DAG。</p>
<p>它是一个普通 DAG，而我们不能选择删去一个入度为 0 的点，设其为 <span
class="math inline">\(v\)</span>。</p>
<p>通过不同的修改简单环能够让不同的节点入度为 0，所以最优解让入度为 0
的节点权值最小，除了它其他的都能删掉。</p>
<p>更进一步地说，以上关于 SCC 的删边策略，最终得到的都是 SCC
的搜索树，搜索树一定是 DAG。</p>
<p>不同的是前者没有入度为 0 的点，后者有且仅有一个。</p>
</blockquote>
<p>所以我们按照上述操作之后，把能够选择的点集（决策集合）排个序，取前
<span class="math inline">\(k\)</span> 大就可以。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">2e6</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> num<span class="token punctuation">,</span> tp<span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> scc<span class="token punctuation">,</span> o<span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> deg<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>num<span class="token punctuation">,</span> st<span class="token punctuation">[</span><span class="token operator">++</span>tp<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">++</span>scc<span class="token punctuation">;</span>
        <span class="token keyword">int</span> y<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
			y<span class="token operator">=</span>st<span class="token punctuation">[</span>tp<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>scc<span class="token punctuation">,</span> f<span class="token punctuation">[</span>scc<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>scc<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// f[scc]表示scc里面最小的点权</span>
            p<span class="token punctuation">[</span>scc<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>deg<span class="token punctuation">[</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span>scc<span class="token punctuation">;</span><span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">bool</span> fg<span class="token operator">=</span><span class="token punctuation">(</span>deg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> y<span class="token operator">=</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>fg<span class="token punctuation">)</span> fg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">else</span> ans<span class="token punctuation">[</span><span class="token operator">++</span>o<span class="token punctuation">]</span><span class="token operator">=</span>w<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 当w[y]==f[x]且fg==1，保留入度为0的点y，因为它的点权最小</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> Ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token operator">&lt;=</span>k<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>o<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> Ans<span class="token operator">+=</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>ans<span class="token operator">+</span>o<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>o<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>o<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> Ans<span class="token operator">+=</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>Ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>DAG</tag>
        <tag>强连通分量</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu5588 小猪佩奇爬树 题解</title>
    <url>/2022/lg5588-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>分类讨论一下。</p>
<p>对于颜色 <span class="math inline">\(w_i\)</span></p>
<p>若 <span class="math inline">\(w_i
=0\)</span>，随便选两个点都可以，<span class="math inline">\(\frac{n
(n-1)}{2}\)</span>。</p>
<p>若 <span class="math inline">\(w_i = 1\)</span>，设这个点为 <span
class="math inline">\(x\)</span>，那么只要两个点之间的路径经过 <span
class="math inline">\(x\)</span>，就是合法的。<span id="more"></span>为了不重不漏，要按照一定的顺序去计算。对于一条边
<span class="math inline">\((x \rightarrow y)\)</span>，我们先令答案累加
<span class="math inline">\(sz_x \cdot sz_y\)</span>，再将 <span
class="math inline">\(sz_x\)</span> 加上 <span
class="math inline">\(sz_y\)</span>。最后累加 <span
class="math inline">\(sz_x \cdot
(n-sz_x)\)</span>。手算一下就知道是对的，可以直接处理任何一个节点的颜色数量为
1 的情况，直接查询即可。</p>
<p>可是对于其他情况就不是那么好处理了。不难想到对于 <span
class="math inline">\(w_i
&gt;1\)</span>，由于两点间有且仅有一条简单路径，所以想要经过所有这个颜色的点，就必须保证这些点全部都在同一条链上，也就是端点数量为
2。</p>
<p>图中的蓝色就无法找到合法的点对，贡献为 0。</p>
<figure>
<img data-src="https://s2.loli.net/2022/04/30/UcuIbZlRiQXEoMT.png"
alt="没有贡献" />
<figcaption aria-hidden="true">没有贡献</figcaption>
</figure>
<p>图中红色的分布就在一条链上，不难发现贡献是左端点的子树大小乘右端点子树大小。</p>
<figure>
<img data-src="https://s2.loli.net/2022/04/30/QAXMYjbgv6ma3ky.png"
alt="能够产生贡献" />
<figcaption aria-hidden="true">能够产生贡献</figcaption>
</figure>
<p> </p>
<p>如何快速统计同一种颜色的分布情况呢？对于每种颜色单独处理是不行的。</p>
<p>在 dfs 的过程中，设当前节点为 <span
class="math inline">\(x\)</span>，颜色为 <span
class="math inline">\(c_x\)</span>，设 <span
class="math inline">\(pre_{c_x}\)</span> 为 颜色 <span
class="math inline">\(c_x\)</span> 的链上，到 <span
class="math inline">\(x\)</span>
的位置时经过的点数。用一个变量<code>fg</code>维护信息。（因为非链就不会产生贡献，不影响答案）</p>
<p>如果 <span class="math inline">\(x\)</span> 是端点且此时 <span
class="math inline">\(pre_{c_x}=0\)</span>，那么搜索完与 <span
class="math inline">\(x\)</span> 直接相连的边后最多让颜色 <span
class="math inline">\(c_x\)</span> 的点的个数
+1。相邻节点有颜色相同的，让<code>fg+=1</code>。</p>
<p>如果 <span class="math inline">\(pre_{c_x} \neq 0\)</span> 或者不是
<span class="math inline">\(c_x\)</span>
的最后一个节点，那么就让<code>fg+=1</code>，这两种情况都会让 <span
class="math inline">\(x\)</span>
可能为端点。（硬说的话前者是有机会成为后搜索到的端点，后者是有机会成为先搜索到的端点）</p>
<p>可以对着下面的图理解。</p>
<p>这样如果 <span
class="math inline">\(fg=1\)</span>，那么就一定是一个端点了。</p>
<p>然后记录左右端点，设它们为 <span
class="math inline">\((x,y)\)</span>。</p>
<p>对于下图情况，直接让 <span class="math inline">\(sz_x \cdot
sz_y\)</span></p>
<p><img data-src="https://s2.loli.net/2022/04/30/KeP5mGdpYcBb69A.png" /></p>
<p>对于下图情况，设 <span
class="math inline">\(dep_x&gt;dep_y\)</span>，<span
class="math inline">\(x\)</span> 到 <span
class="math inline">\(y\)</span> 的链上第一个经过点是 <span
class="math inline">\(z\)</span>，那么答案是 <span
class="math inline">\(sz_y \cdot (n-sz_z)\)</span></p>
<p><img data-src="https://s2.loli.net/2022/04/30/zniNcKvrRAsLkjW.png" /></p>
<p>实现的时候要用好多映射，就不一一写了。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> col<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sz<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> ans1<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ans2<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cc<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> nxt<span class="token punctuation">,</span> to<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> e<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	e<span class="token punctuation">[</span><span class="token operator">++</span>cc<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cc<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// cnt[i]，颜色i的总数</span>
<span class="token comment">// col[i]，i的颜色</span>
<span class="token comment">// pre[i]，颜色为i的链上已经经过的点数</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> c<span class="token operator">=</span>col<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token operator">=</span>pre<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	sz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">==</span>fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> lst<span class="token operator">=</span>pre<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 这里没有算上x</span>
		<span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		ans1<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1ll</span><span class="token operator">*</span>sz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">*</span>sz<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
		sz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>sz<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>lst<span class="token operator">!=</span>pre<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>fg<span class="token punctuation">,</span> z<span class="token operator">=</span>y<span class="token punctuation">;</span>
        <span class="token comment">// 搜到了相同的颜色，记录z</span>
	<span class="token punctuation">&#125;</span>
	ans1<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1ll</span><span class="token operator">*</span>sz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span>sz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">||</span>pre<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">!=</span>cnt<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>fg<span class="token punctuation">;</span>
	<span class="token operator">++</span>pre<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// x也在pre[c]的链上</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>fg<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> s<span class="token operator">=</span>z<span class="token operator">?</span> n<span class="token operator">-</span>sz<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token operator">:</span>sz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// n-sz[z]的情况实际是搜索到的第一个这个颜色的节点就是端点</span>
			ans2<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1ll</span><span class="token operator">*</span>sz<span class="token punctuation">[</span>p<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span>s<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token operator">++</span>v<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 端点数量</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token operator">++</span>cnt<span class="token punctuation">[</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token number">1ll</span><span class="token operator">*</span>n<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans1<span class="token punctuation">[</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注意i是颜色，要用p[i]映射过去</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 有两个端点</span>
		<span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>树上问题</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu5658 括号树 题解</title>
    <url>/2022/lg5658-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>水一篇题解，明天写 CSP-S2021 T2 括号序列。</p>
<span id="more"></span>
<p>考虑序列上的情况，设 <span class="math inline">\(f_i\)</span>
为序列中以 <span class="math inline">\(i\)</span>
结尾的合法序列的数量（注意是以 <span class="math inline">\(i\)</span>
结尾，不是 <span class="math inline">\([1,i]\)</span>
中的合法序列数量）。那么如果 <span class="math inline">\(s_i\)</span>
是左括号，那么将它入栈，<span class="math inline">\(f_i
=0\)</span>。如果 <span class="math inline">\(s_i\)</span>
为右括号，则有 <span class="math display">\[
f_i = f_{l_i-1} + 1
\]</span> 其中 <span class="math inline">\(l_i\)</span> 是与 <span
class="math inline">\(i\)</span> 配对的左括号位置。</p>
<p>最终答案为 <span class="math inline">\(\sum_{i=1}^n
f_i\)</span>。</p>
<p>现在考虑树上的情况。由于是一棵树，两点之间有且仅有一条简单路径，所以我们每次都是处理一条链的情况。在链上，<span
class="math inline">\(l_i-1\)</span> 就变成了 <span
class="math inline">\(l_i\)</span> 的父亲节点，其他都是一样的。</p>
<p>还是一样，遇到左括号就将它入栈。否则就如果栈顶元素是左括号，维护信息；如果是右括号，那就把它入栈。处理完一个节点要回溯时，撤销当前节点的操作，不影响下一条链的信息。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> tp<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> fr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll ans<span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>c<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>ll res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span> sk<span class="token punctuation">[</span><span class="token operator">++</span>tp<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tp<span class="token operator">||</span>s<span class="token punctuation">[</span>sk<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">')'</span><span class="token punctuation">)</span> sk<span class="token punctuation">[</span><span class="token operator">++</span>tp<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
        <span class="token keyword">else</span> y<span class="token operator">=</span>sk<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>fr<span class="token punctuation">[</span>sk<span class="token punctuation">[</span>tp<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    res<span class="token operator">+=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token operator">^=</span><span class="token number">1ll</span><span class="token operator">*</span>x<span class="token operator">*</span>res<span class="token punctuation">;</span>
    <span class="token comment">// 统计答案</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> sk<span class="token punctuation">[</span><span class="token operator">++</span>tp<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">--</span>tp<span class="token punctuation">;</span>
    <span class="token comment">// 撤销本次操作</span>

<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>fr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>fr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu5664 Emiya 家今天的饭 题解</title>
    <url>/2022/lg5664-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>这题很有启发意义：不要为了 DP 而去
DP。对于一个计数问题，应当灵活地去划分。</p>
<p>题目中的三个条件，如果直接去计数做的话，信息冗余太多，很难理清思路。但是注意到我们能极其容易地求出满足前两个条件的方案数，而且三个条件都满足的方案一定在满足前两个条件的方案数中。所以如果我们能够单独求出不满足第三个条件的数量，就能够求出满足三个条件的方案数。这是一种常见的套路。</p>
<span id="more"></span>
<p>显然对于一种烹饪方法 <span class="math inline">\(i\)</span>，能够做出
<span class="math inline">\(A_i = \sum_{j=1}^m a_{i,j}\)</span>
道不同的菜。</p>
<p>由于每一种烹饪方法都可以不选，但是又不能每一种都不选，所以满足前两个条件的方案数为
<span class="math display">\[
\prod_{i=1}^n (A_i+1) -1
\]</span> 接下来单独考虑第三个条件。</p>
<p>这个可以 DP，但不是直接用 DP
统计目标方案数。因为太过苛刻的转移条件会大大增加复杂度，而加入可承受范围内的冗余信息有时是能够简化问题的。</p>
<p>所以，设 <span class="math inline">\(f_{i,j,k}\)</span> 为前 <span
class="math inline">\(i\)</span> 种方法，选择了 <span
class="math inline">\(j+k\)</span> 种方法，其中 <span
class="math inline">\(j\)</span> 次用到了当前食材 <span
class="math inline">\(x\)</span>。</p>
<p>转移比较简单 <span class="math display">\[
f_{i,j,k} = f_{i-1,j,k}+a_{i,x} \cdot f_{i-1,j-1,k} + (A_i-a_{i,x} )
\cdot f_{i-1,j,k-1}
\]</span> 最终答案 <span class="math inline">\(\sum f_{n,j,k} \quad j
&gt; k\)</span>。</p>
<p>这样状态数为 <span class="math inline">\(n^3\)</span>，转移为 <span
class="math inline">\(O(1)\)</span>，但是还要对于 <span
class="math inline">\(m\)</span> 种食材分别计算，所以复杂度为 <span
class="math inline">\(O(n^3m)\)</span>。这个不够优秀。</p>
<p>转移和枚举是优化不了的，只能从状态下手。可以看到，对于食材 <span
class="math inline">\(x\)</span>，我们只关心使用它的方案数是否占到一半以上，不关心具体选择方案。这也有一种常见的优化技巧。</p>
<p>设 <span class="math inline">\(f_{i,j}\)</span> 为前 <span
class="math inline">\(i\)</span> 种方法，其中选择食材 <span
class="math inline">\(x\)</span> 的方法数量减去其他方法数量结果是 <span
class="math inline">\(j\)</span>，若 <span class="math inline">\(j &gt;
0\)</span>，那么就说明占到了一半以上。但是这个下标可能为负数，所以要加上一个偏移量。</p>
<p>这样状态数降到了 <span class="math inline">\(n^2\)</span>，转移呢？
<span class="math display">\[
f_{i,j} = f_{i-1,j}+a_{i,x} \cdot f_{i-1,j-1} + (A_i-a_{i,x}) \cdot
f_{i-1,j+1}
\]</span> 依旧是 <span class="math inline">\(O(1)\)</span>。</p>
<p>所以这个 DP 的复杂度为 <span
class="math inline">\(O(n^2m)\)</span>。</p>
<p>答案为 <span class="math inline">\(\prod_{i=1}^n (A_i+1) -1 -\sum
f_{n,j} \quad j&gt;0\)</span></p>
<p>具体细节见代码。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">114</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">2006</span><span class="token punctuation">,</span> mod<span class="token operator">=</span><span class="token number">998244353</span><span class="token punctuation">,</span> dlt<span class="token operator">=</span><span class="token number">102</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll <span class="token function">g</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ll S<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
    	<span class="token punctuation">&#125;</span>
    	<span class="token punctuation">(</span>S<span class="token operator">*=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token punctuation">(</span>S<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 边界，什么都不选只有1种方案</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>n<span class="token operator">-</span>j<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token operator">+</span>j<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>
            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token operator">+</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token function">g</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
        <span class="token comment">// i是食材，j是方法</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">(</span>ans<span class="token operator">+=</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span>
        <span class="token comment">// f第二维平移n位，取正下标。</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>S<span class="token operator">-</span>ans<span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu5687 网格图 题解</title>
    <url>/2022/lg5687=solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>直接建图跑最小生成树只有 <span
class="math inline">\(64pts\)</span>。</p>
<p>注意到对于一个节点 <span class="math inline">\((i,j)\)</span>，同在第
<span class="math inline">\(i\)</span>
行的节点向它们的右边节点连边的代价都是 <span
class="math inline">\(a_i\)</span>，同在 <span
class="math inline">\(j\)</span> 列的节点向它们的下方节点连边的代价都是
<span class="math inline">\(b_j\)</span>。那么把 <span
class="math inline">\(\{a\}\)</span> 与 <span class="math inline">\(\{
b\}\)</span> 递增排序，此时就相当于把网格图交换了行与列。</p>
<span id="more"></span>
<p>这时候 <span class="math inline">\((1,1)\)</span> 既对应着最小的
<span class="math inline">\(a_1\)</span>，又对应着最小的 <span
class="math inline">\(b_1\)</span>，那么第一行与第一列都是要选择的，否则一定不是最小的。同时也可以推广到对于一个
<span class="math inline">\(a_i\)</span> 或 <span
class="math inline">\(b_j\)</span>，要么不连，要么能连的连起来，才能保证最优性。</p>
<p>最小生成树不能有环。画图不难发现，在第一行和第一列都被选择的情况下，如果在格子图中出现了环（格子图中的最简单环是个正方形），那么一定存在
<span
class="math inline">\((i,j)\)</span>，在某个时刻（不关心先后顺序）既选择了所有
<span class="math inline">\(a_i\)</span>，又选择了所有 <span
class="math inline">\(b_j\)</span>，其中 <span
class="math inline">\(i,j\)</span> 均不为
1。为了防止出现这种情况，已经考虑过的部分不能被后面的决策影响。</p>
<p>所以就很明确了，维护变量 <span class="math inline">\(row\)</span>
记录当前行，<span class="math inline">\(col\)</span>
记录当前列，维护指针 <span class="math inline">\(p1\)</span> 表示 <span
class="math inline">\(a_{p1}\)</span>，<span
class="math inline">\(p2\)</span> 表示 <span
class="math inline">\(b_{p2}\)</span>。</p>
<p>当 <span class="math inline">\(a_{p1} \le b_{p2}\)</span>
时，连起来这一行能连的边，前 <span class="math inline">\(col\)</span>
列已经使用过了，贡献为 <span class="math inline">\(a_{p1} \cdot
(m-col)\)</span>，这一行不能再考虑，<span
class="math inline">\(a_{p1}\)</span> 不能再使用，<span
class="math inline">\(row+1\)</span>，<span
class="math inline">\(p1+1\)</span>。反之贡献为 <span
class="math inline">\(b_{p2} \cdot (n-row)\)</span>，<span
class="math inline">\(col+1\)</span>，<span
class="math inline">\(p2+1\)</span>。</p>
<p>当 <span class="math inline">\(p1&gt;n\)</span> 或者 <span
class="math inline">\(p2&gt; m\)</span>
的时候，图已经连通，也就求出了最小生成树。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	ans<span class="token operator">+=</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> c1<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c2<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>c1<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>c2<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token operator">&lt;=</span>b<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token operator">+=</span>a<span class="token punctuation">[</span>c1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">-</span>col<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>row<span class="token punctuation">;</span>
		<span class="token keyword">else</span> ans<span class="token operator">+=</span>b<span class="token punctuation">[</span>c2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span>row<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>col<span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu5858 Golden Sword 题解</title>
    <url>/2022/lg5858-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>设 $ f_{i,j}$ 为放入第 $ i$ 个原料，炼金锅中共有 $ j$
个原料时的耐久度之和。</p>
<span id="more"></span>
<p>边界 <span class="math display">\[
f_{i,j}= \begin{cases}
0 &amp;  i=0,j=0 \\
-\inf &amp; \text{otherwise}
\end{cases}
\]</span> 考虑 $ j$ 的取值范围。因为最少一个也不拿走，最多拿走 $ s$
个，锅中最多有 $ w$ 个原料，所以对于状态 $ f_{i,j}$ 的一个决策 <span
class="math inline">\(k\)</span> <span class="math display">\[
j-1 \le k \le \min{\{w,j-1+s\}}
\]</span> 转移为 <span class="math display">\[
f_{i,j}=\max{\{ f_{i-1,k} + a_i \times j\}}
\]</span> 答案为 $ i $</p>
<p>交上去，光荣地 TLE 了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e3</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> w<span class="token punctuation">,</span> s<span class="token punctuation">;</span>
ll ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1e15</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>w<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1e15</span>
    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>w<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>t<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>w<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>考虑优化。</p>
<p>注意原转移方程中，<span class="math inline">\(a_i\times j\)</span>
是个定值，将其提出后，我们要做的就是快速查找 <span
class="math inline">\(\max{\{ f_{i-1,k} \}}\)</span></p>
<p>使用单调队列维护 <span class="math inline">\(f_{i-1,k}\)</span>
单调减，队首即为最优决策。用 <span class="math inline">\(q_l\)</span>
表示队首，则转移方程为 <span class="math display">\[
f_{i,j}=\max_{j \in [1,\min(i,w)]}{\{ f_{i-1,j-1},f_{i-1,q_l} \}}
\]</span> 前者为「不拿走」，后者为「拿就拿波大的」</p>
<p>注意，为了保证队列中的决策都是 <span
class="math inline">\(f_{i-1,j}\)</span> 时状态， <span
class="math inline">\(j\)</span> 这一维必须倒序循环。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e3</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> w<span class="token punctuation">,</span> s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1e15</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>w<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1e15</span><span class="token punctuation">;</span>
    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>s<span class="token operator">&lt;</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>l<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span>r<span class="token punctuation">;</span>
            q<span class="token punctuation">[</span><span class="token operator">++</span>r<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>
            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>j<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>w<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu6185 序列 题解</title>
    <url>/2022/lg6185-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p><del>好像这种加一减一无限次操作的都有差不多的套路。</del></p>
<p>把每个位置 <span class="math inline">\(i\)</span> 看作点，把 <span
class="math inline">\(\{a_i\}\)</span> 与 <span
class="math inline">\(\{b_i\}\)</span> 做差作为点权。</p>
<span id="more"></span>
<p>对于 2 操作，一加一减，那么它们的和不变。所以对于 2 操作的 <span
class="math inline">\((u,v)\)</span>，从 <span
class="math inline">\(u\)</span> 向 <span
class="math inline">\(v\)</span>
连一条边。这样，在每一个连通块中，所有点权的总和不变，按照连通块缩点
。</p>
<p>对于 1 操作，同时加减
1，那么他们的奇偶性同时变化。在缩点后的图中，对于操作 1 的 <span
class="math inline">\((u,v)\)</span>，从 <span
class="math inline">\(f_u\)</span> 向 <span
class="math inline">\(f_v\)</span>
连一条边。（也就是缩点后它们所在的连通块）</p>
<p>将这张图黑白染色，如果这张图是二分图，那么由于每对点都只能同加减，若左部点权和不等于右部点权和，那么肯定不能把点权全部变为
0。</p>
<p>如果不是二分图，那如果总点权是奇数，也不能全部变为 0。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token operator">==</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">?</span> x<span class="token operator">:</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">,</span> c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">bool</span> fg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> y<span class="token operator">:</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>k<span class="token punctuation">)</span> fg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> fg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> fg<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> op<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> u<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">,</span> v<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> s<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnt<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>i<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">bool</span> fg<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>fg<span class="token operator">&amp;&amp;</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fg<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu6186 冒泡排序 题解</title>
    <url>/2022/lg6186-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>手算一下不难发现，一轮冒泡排序会让所有逆序对个数大于 1 的位置减少 1
个逆序对，逆序对为 0 的则不受影响。</p>
<span id="more"></span>
<p>设 <span class="math inline">\(f_i\)</span> 表示位置 <span
class="math inline">\(i\)</span> 的逆序对数，那么经过 <span
class="math inline">\(k\)</span> 轮冒泡排序后，逆序对的个数为 <span
class="math display">\[
\sum_{ i=1  \text{ and } f_i &gt; k}^n f_i - k \cdot \sum_{i \in [1,n]}
[f_i &gt; k]
\]</span> 树状数组维护之，具体见代码。交换的操作分类讨论就行了。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll sum<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">BIT</span> <span class="token punctuation">&#123;</span>
	ll c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">memset</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token comment">// 放置下标为0</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>x<span class="token operator">+=</span>x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>y<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	ll <span class="token function">query</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		ll y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>x<span class="token punctuation">;</span>x<span class="token operator">-=</span>x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> y<span class="token operator">+=</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> y<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		t1<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>t1<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span>t1<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//		printf("%lld\n",f[i]);</span>
		t2<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token punctuation">&#125;</span>
    <span class="token comment">// 先利用t1求出原本的逆序对，再维护f[i]的权值数列</span>
    <span class="token comment">// t2维护t1对应的和</span>
	t1<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> t1<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> op<span class="token punctuation">,</span> x<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			t1<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			t2<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span>f<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 把交换的这两个数先从树状数组中删了</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span>f<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// a[x]>a[x+1]，交换后x+1这个位置的逆序会减少1</span>
            <span class="token comment">// 反之，x这个位置逆序对会增加1。</span>
			<span class="token function">swap</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 交换他们的值</span>
			t1<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			t2<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 重新插入回去</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
			<span class="token keyword">int</span> cnt<span class="token operator">=</span>t1<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span>t1<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>t2<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span>t2<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1ll</span><span class="token operator">*</span>cnt<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 注意1ll*cnt</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu6669 组合数问题 题解</title>
    <url>/2022/lg6669-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>显然，如果 <span class="math inline">\(k \mid C_i^j\)</span>，那么
<span class="math display">\[
C^j_i \equiv 0  \; \; (\bmod k)
\]</span> <span id="more"></span></p>
<p>在本题中 <span class="math inline">\(n\)</span> 和 <span
class="math inline">\(m\)</span> 特别大，而质数 <span
class="math inline">\(k\)</span> 特别小，所以可以使用 Lucas
定理化简。注意，这里的 <span class="math inline">\(n\)</span> 与 <span
class="math inline">\(m\)</span> 只是用两个数举例。 <span
class="math display">\[
C^m_n \equiv C_{n / p}^{m /p}  C^{m \% k}_{n \% k} \; \; ( \bmod k )
\]</span> 但是一次化简后 <span class="math inline">\(n/p\)</span> 和
<span class="math inline">\(m / p\)</span> 依然很大，所以我们要再用
Lucas 定理不断化简它。最后这个同余式就变成了 <span
class="math display">\[
C^m_n \equiv \prod_{i=0}^d C_{n_i}^{m_i} \; \; ( \bmod k )
\]</span> 其中 <span class="math inline">\(n = n_d \cdot k^d + n_{d-1}
\cdot k^{d-1} + \cdots + n_1 \cdot k + n_0\)</span>，<span
class="math inline">\(m\)</span> 同理。</p>
<p>为什么是这样的？因为我们让 <span class="math inline">\(n\)</span> 与
<span class="math inline">\(m\)</span>
不断取模并缩小的过程中就相当于把它们转化成了 <span
class="math inline">\(k\)</span>
进制，每一个常数项都是一位，上式实际是用这个 <span
class="math inline">\(k\)</span> 进制数表示 <span
class="math inline">\(n\)</span> 与 <span
class="math inline">\(m\)</span>。</p>
<p>这样的话，要想使它为 0，只需要其中一项为 0 即可。更进一步的说，存在
<span class="math inline">\(m_i &gt; n_i\)</span>。</p>
<p>所以如果一组 <span class="math inline">\((i,j)\)</span> 合法，那么把
<span class="math inline">\((i,j)\)</span> 像上面一样转化成 <span
class="math inline">\(k\)</span> 进制，就一定有上面的情况。</p>
<p>用数位 DP 求出所有不能被 <span class="math inline">\(k\)</span>
整除的 <span
class="math inline">\((i,j)\)</span>，最后用总数量减去就是答案。</p>
<p>按照转化成 <span class="math inline">\(k\)</span>
进制后的位数去计算。设 <span class="math inline">\(f(i,j,k)\)</span>
为第 <span class="math inline">\(i\)</span> 位，其中 <span
class="math inline">\(C_i^j\)</span> 中的 <span
class="math inline">\(i,j\)</span> 是否达到上限的方案数。</p>
<p>转移不太好写，见代码。</p>
<p>总方案数 <span class="math display">\[
\frac{(m+1) \cdot (m+2)}{2} + (n-m) \cdot (m+1)
\]</span> 可以理解为，当 <span
class="math inline">\(C_{n&#39;}^{m&#39;}\)</span> 中的 <span
class="math inline">\(n&#39;\)</span> 为 0 时有 1 种，为 1 时有 2 种，为
2 时有 3种，为 m 时有 m+1 种。求和就是第一项了。当 <span
class="math inline">\(n&#39; \in[m+1,n]\)</span> 时，因为 <span
class="math inline">\(m&#39; \le \min(n&#39;,m)\)</span> 所以都只有
<span class="math inline">\(m+1\)</span> 种取值，就是第二项。</p>
<p>嗯，我自己都感觉写得牵强。初学者，希望不要取笑。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span> inv<span class="token operator">=</span><span class="token number">500000004</span><span class="token punctuation">;</span> <span class="token comment">// inv是2%(10^9+7)的逆元</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> k<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> S<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// len是k进制下的位数</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1ll</span><span class="token punctuation">;</span> <span class="token comment">// 边界，没有位数，只能是0</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
	ll F<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> l<span class="token operator">=</span>c<span class="token operator">?</span> a<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token operator">:</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">=</span>d<span class="token operator">?</span> b<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token operator">:</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果上一位没有达到边界，那么这一位可以随便取，由于是k进制下，所以边界是k-1</span>
    <span class="token comment">// 如果达到边界了，这一位最多就取到这一位的数字上。</span>
    <span class="token comment">// 边界，指的是读入的n和m在k进制下的第len位。</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>l<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// i,j就是C(i,j)中的i,j，保证j&lt;=i</span>
		<span class="token punctuation">(</span>F<span class="token operator">+=</span><span class="token function">dp</span><span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">==</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>j<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span>    
        <span class="token comment">// 只有一路从dp(c1,1,1)递归过来c和d才取1</span>
        <span class="token comment">// 所以如果c或d=1，那么一定是达到了n和m的k进制中第len-1位，也就是a和b数组</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> f<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">=</span>F<span class="token operator">%</span>mod<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c1<span class="token operator">=</span>c2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">memset</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	m<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保证m&lt;=n</span>
	ll S1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token operator">*</span>inv<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
	ll S2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">-</span>m<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
	S<span class="token operator">=</span><span class="token punctuation">(</span>S1<span class="token operator">+</span>S2<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
    <span class="token comment">// 一定注意，每一次运算都要取模，不然……</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token operator">++</span>c1<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token operator">%</span>k<span class="token punctuation">,</span> n<span class="token operator">/=</span>k<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> b<span class="token punctuation">[</span><span class="token operator">++</span>c2<span class="token punctuation">]</span><span class="token operator">=</span>m<span class="token operator">%</span>k<span class="token punctuation">,</span> m<span class="token operator">/=</span>k<span class="token punctuation">;</span>
    <span class="token comment">// 转化k进制</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>S<span class="token operator">-</span><span class="token function">dp</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>组合数学</tag>
        <tag>Lucas定理</tag>
        <tag>数位DP</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu7514 卡牌游戏 题解</title>
    <url>/2022/lg7514-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>要求极差尽量小，也就是让最小值尽量大，最大值尽量小。</p>
<p>套路就是固定一个值，然后贪心地去扩展另一个值。</p>
<span id="more"></span>
<p>把 <span class="math inline">\(a_i\)</span> 与 <span
class="math inline">\(b_i\)</span> 放在一起排序，记为 <span
class="math inline">\(c_i\)</span>。不难发现每一个区间 <span
class="math inline">\([l,r]\)</span>，都能用 <span
class="math inline">\(c_r - c_l\)</span>
表示它的极差。而如果要满足最小值尽量大，最大值尽量小，可以固定最大值
<span class="math inline">\(r&#39;\)</span>，尽量让 <span
class="math inline">\(l&#39;\)</span> 提前。</p>
<p>这也就意味着我们已经确定了 <span
class="math inline">\([l&#39;,r&#39;]\)</span>
内元素的值（也就是每一张牌的正反）。反过来，也确定了 <span
class="math inline">\([1,l&#39;]\)</span> 与 <span
class="math inline">\([r&#39;,n]\)</span> 的值。所以开一个标记数组 <span
class="math inline">\(v\)</span>，如果 <span class="math inline">\(v_i =
1\)</span> 说明第 <span class="math inline">\(i\)</span>
张牌已经被确认了，一张牌不能确认两次。</p>
<p>如果确定了一张牌，那么如果确定的值是正面，那么使用的翻转次数为
0，反之为 1。总的翻转次数不超过 <span
class="math inline">\(m\)</span>。</p>
<p>这样就可以用双指针求解了。维护两个指针 <span
class="math inline">\(l\)</span> 和 <span
class="math inline">\(r\)</span>。</p>
<p>开始先尽可能把 <span class="math inline">\(r\)</span>
往后放，接着再尽可能把 <span class="math inline">\(l\)</span>
提前。最后不断让 <span class="math inline">\(r\)</span> 向前，贪心地提前
<span class="math inline">\(l\)</span>，记录答案就好了。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> ans<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">card</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> id<span class="token punctuation">,</span> fg<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> c<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 数字，属于的牌的编号，翻到反面操作几次</span>
<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>card a<span class="token punctuation">,</span>card b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>fg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">,</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">+</span>c<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>fg<span class="token operator">&lt;=</span>m<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>v<span class="token punctuation">[</span>c<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cnt<span class="token operator">+=</span>c<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>fg<span class="token punctuation">,</span> v<span class="token punctuation">[</span>c<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token operator">--</span>r<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">+</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>fg<span class="token operator">&lt;=</span>m<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>v<span class="token punctuation">[</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cnt<span class="token operator">+=</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>fg<span class="token punctuation">,</span> v<span class="token punctuation">[</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token operator">++</span>l<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
    <span class="token comment">// 有标记数组v的存在，不用担心l>r的情况</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>c<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>	
		cnt<span class="token operator">-=</span>c<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fg<span class="token punctuation">,</span> v<span class="token punctuation">[</span>c<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token operator">++</span>r<span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">+</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>fg<span class="token operator">&lt;=</span>m<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>v<span class="token punctuation">[</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cnt<span class="token operator">+=</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>fg<span class="token punctuation">,</span> v<span class="token punctuation">[</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">++</span>l<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>c<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里少比较了一次，所以最后要取min</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu7913 廊桥分配 题解</title>
    <url>/2022/lg7913-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="前言">前言</h2>
<p>我几乎搞砸了 2021 年 8 月 31 日之后的所有事。</p>
<p>无论是 OI 与 文化课，还是人际关系与整个自己。</p>
<p>我根本不配参加 CSP 与
NOIP，最终的结果也在预料之中。更何况在那之后的</p>
<p>那些煎熬着，逃避着的日子啊……</p>
<span id="more"></span>
<h2 id="分析">分析</h2>
<p>不难发现国际区与国内区完全没有关系，分开处理就行了。</p>
<p>注意到当某个区只有一个廊桥的时候，就等价于选择最多数量的不相交区间问题。</p>
<p>那么如果廊桥数量更多呢？</p>
<p>显然如果在廊桥数量为 1 时选择了最多数量的不相交区间，那么当廊桥数量为
2 时仍然能够选取这么多，方法是钦定选出来的飞机只能用第 1
个廊桥。多出来的这个廊桥又能够再对剩下的的飞机做一次选择最多数量的不相交区间。这样一定是最多的。</p>
<p>归纳一下就得到</p>
<ul>
<li>廊桥越多，所容纳的飞机数量单调不减，且具有最优子结构性质，可以直接贪心。</li>
<li>如果某个区有 <span class="math inline">\(n_0\)</span>
个廊桥，那么最多容纳的飞机数量就是做 <span
class="math inline">\(n_0\)</span> 次选择最多不相交区间。</li>
</ul>
<p>因为只有 <span class="math inline">\(n\)</span> 个廊桥，那么国内去分
<span class="math inline">\(n_0\)</span> 个，国外区一定有 <span
class="math inline">\(n - n_0\)</span> 个。这样只要预处理出每个区分配
<span class="math inline">\(k \in[0,n]\)</span>
个廊桥最多能容纳的飞机数量，那么就能 <span
class="math inline">\(O(n)\)</span> 取最大值了。</p>
<p>维护每个区的飞机用<code>std::set</code>，它本身是有序的，自带<code>lower_bound</code>而且还支持删除操作。</p>
<p>廊桥分配情况是 <span class="math inline">\(O(n)\)</span>
的，每个飞机最多进出<code>set</code>一次。</p>
<p>复杂度 <span class="math inline">\(O(n \log_2 n)\)</span>。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
set<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
		s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 先继承i-1个廊桥的数量</span>
		<span class="token keyword">int</span> lst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">auto</span> p<span class="token operator">=</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
			lst<span class="token operator">=</span>p<span class="token operator">-></span>second<span class="token punctuation">,</span> <span class="token operator">++</span>ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">,</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu7914 括号序列 题解</title>
    <url>/2022/lg7914-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>明显是一个区间 DP，但是合法串情况比较多，所以要仔细分类。</p>
<p>设 <span class="math inline">\(f(l,r)\)</span> 为区间 <span
class="math inline">\([l,r]\)</span> 内的合法串的数量，<span
class="math inline">\(q(l,r)\)</span> 为 <span
class="math inline">\([l,r]\)</span> 能否变成不超过 <span
class="math inline">\(k\)</span> 个<code>*</code>组成的串。</p>
<span id="more"></span>
<p>以下转移都是在满足 <span class="math inline">\(l\)</span>
能够成为左括号，<span class="math inline">\(r\)</span>
能够成为右括号的前提下。</p>
<p> </p>
<ol type="1">
<li><code>()</code></li>
</ol>
<p>显然，特判 <span class="math inline">\(l+1=r\)</span> 就好了。 <span
class="math display">\[
1 \rightarrow f(l,r)
\]</span></p>
<ol start="2" type="1">
<li><code>(S)</code></li>
</ol>
<p>这种情况只会发生在 <span class="math inline">\(l+1 \neq r\)</span>
的时候。左右括号都已经确定了，只要里面的能构成一整个长度合法的<code>*</code>串，就能贡献
1 个方案数。而 <span class="math inline">\([l+1,r-1]\)</span>
不管怎么样都能产生 <span class="math inline">\(f(l+1,r-1)\)</span>
的贡献。 <span class="math display">\[
f(l+1,r-1) + q(l+1,r-1) \rightarrow f(l,r)
\]</span></p>
<ol start="3" type="1">
<li><code>(SA)</code></li>
</ol>
<p>枚举<code>S</code>最后一个字符的位置 <span
class="math inline">\(k\)</span>，如果 <span
class="math inline">\(q(l,k)=1\)</span>，那么就转移。 <span
class="math display">\[
q(l,k) \cdot f(k+1,r) \rightarrow f(l,r)
\]</span></p>
<ol start="4" type="1">
<li><code>(AS)</code></li>
</ol>
<p>与上一步相同，枚举 <span class="math inline">\(A\)</span>
的最后一个字符的位置 <span
class="math inline">\(k\)</span>，可以与上一步一起转移。 <span
class="math display">\[
f(l,k) \cdot q(l+1,k) \rightarrow f(l,r)
\]</span></p>
<ol start="5" type="1">
<li><code>AB</code></li>
</ol>
<p>枚举断点 <span class="math inline">\(k\)</span>，暴力转移。 <span
class="math display">\[
f(l,k) \cdot f(k+1,r) \rightarrow f(l,r)
\]</span> 且慢！</p>
<p><code>()()()</code></p>
<p>这个串是不是被重复计算了？<span class="math inline">\([1,2]\)</span>
与 <span class="math inline">\([3,6]\)</span>，<span
class="math inline">\([1,4]\)</span> 与 <span
class="math inline">\([5,6]\)</span>。</p>
<blockquote>
<p>至理名言：当你想到一个 fAKe 的思路时，想想它为什么是 fAKe 的。</p>
</blockquote>
<p>由于从不同的断点断开组成了相同的串，所以重复计算了。</p>
<p>如何避免？如果强制让 <span class="math inline">\(A\)</span> 是由上面
4 种转移方式得到的串，那么 <span class="math inline">\([1,4]\)</span>
这个区间就不合法了。因为以上 4
种方法要求左右端点组成<code>()</code>，所以<code>()()</code>里面的<code>)(</code>是不合法的，因此
<span class="math inline">\([1,4]\)</span>
这个种断开方法不会产生贡献。如果不这样，那么<code>()()</code>可以看作<code>A=()</code>，<code>B=()</code>组成的<code>AB</code>形式的合法串，就重复了。</p>
<p>所以设 <span class="math inline">\(g(l,r)\)</span> 为前 4 种转移对
<span class="math inline">\(f(l,r)\)</span>
产生的贡献，能够在处理完后直接求出。</p>
<p>转移 <span class="math display">\[
g(l,k) \cdot f(k+1,r) \rightarrow f(l,r)
\]</span></p>
<ol start="6" type="1">
<li><code>ASB</code></li>
</ol>
<p>同上，枚举 <span class="math inline">\(A\)</span> 的最后一位 <span
class="math inline">\(i\)</span> 和 <span
class="math inline">\(B\)</span> 的第一位 <span
class="math inline">\(j\)</span>。</p>
<p>那么 <span class="math inline">\(A = [l,i]\)</span>，<span
class="math inline">\(S=[i+1,j-1]\)</span>，<span
class="math inline">\(B[j,r]\)</span>。</p>
<p>转移 <span class="math display">\[
\sum_{i=l+1}^{i&lt;r} \sum_{j=i+2}^{j&lt;r} g(l,i) \cdot q(i+1,j-1)
\cdot f(j,r)
\]</span> 单是这个转移就是 <span class="math inline">\(O(n^2)\)</span>
的，考虑优化。</p>
<p>首先，<code>S</code>这个串必须是连续的，而只有能够出现一个<code>S</code>才能产生贡献。所以，能够产生贡献的一定是一个连续的区间。（想象一下“滑动窗口”）。</p>
<p>所以一定能找到一个 <span class="math inline">\(p\)</span>，满足 <span
class="math inline">\(\forall k \in[i,p]\)</span>，都有 <span
class="math inline">\(q(i,k)=1\)</span>。</p>
<p>所以提一下公因式 <span class="math inline">\(g(l,i)\)</span>，得到
<span class="math display">\[
\sum_{i=l+1}^{i&lt;r} \Big(  g(l,i) \cdot \sum_{j=i+2}^{j \le p} f(j,r)
\Big)
\]</span> 关于 <span class="math inline">\(j\)</span> 的那一项是能够
<span class="math inline">\(O(1)\)</span>
计算的。右端点固定，左端点不同，可以使用后缀和优化。这个可能不太熟悉，但就是把前缀和对
<span class="math inline">\([1,k]\)</span> 求和改为对 <span
class="math inline">\([k,n]\)</span> 求和。</p>
<p>设 <span class="math inline">\(S_k\)</span> 为 <span
class="math inline">\([k,r]\)</span> 这一段的和，于是转移就有了 <span
class="math display">\[
\sum_{i=l+1}^{i&lt;r} \Big(  g(l,i) \cdot (S_{i+2}-S_{p+1} ) \Big)
\rightarrow f(l,r)
\]</span>  </p>
<p>最终答案 <span class="math inline">\(f(1,n)\)</span></p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">505</span><span class="token punctuation">,</span> mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">')'</span><span class="token operator">||</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'?'</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">')'</span><span class="token operator">||</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断是否合法</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>l<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token operator">=</span>l<span class="token punctuation">;</span>r<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'*'</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'?'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>k<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 长度不超过k</span>
		q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>len<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>len<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> r<span class="token operator">=</span>l<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span> <span class="token comment">// 1</span>
			<span class="token keyword">else</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">+=</span>f<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>q<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span> <span class="token comment">// 2</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>r<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">+=</span>f<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>q<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>q<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span>
                <span class="token comment">// 3和4放到一块转移了</span>
			<span class="token punctuation">&#125;</span>
			g<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>r<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">+=</span>g<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>f<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span>
            <span class="token comment">// 5</span>
			<span class="token function">memset</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>r<span class="token punctuation">;</span>k<span class="token operator">>=</span>l<span class="token punctuation">;</span><span class="token operator">--</span>k<span class="token punctuation">)</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>sum<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span>
            <span class="token comment">// 后缀和数组</span>
			<span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>r<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				p<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>p<span class="token punctuation">;</span> 
				<span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">+=</span>g<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span>
                <span class="token comment">//就和前缀和数组求区间和要a[r]-a[l-1]一样，这里p要+1</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>区间DP</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu7915 回文 题解</title>
    <url>/2022/lg7915-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="前言">前言</h2>
<p>这题是真的暴力。</p>
<p>可是怎么就是做不出来呢？</p>
<p>是你会的从来都只是套路性的表面功夫，还是你从来就没有静下心来好好提高思维水平呢？</p>
<p>面对现实吧，二者皆有。</p>
<span id="more"></span>
<h2 id="分析">分析</h2>
<p>首先明确，字典序最小是操作序列的字典序。</p>
<p>只剩下最后一个数的时候，操作 1 和 2
是等价的。由于要求字典序最小，所以操作序列最后一个必定是<code>L</code>。</p>
<p>再考虑第一个操作。因为第一次只能操作序列 <span
class="math inline">\(a\)</span>
中的第一个数或最后一个数，且最后它必将留在序列 <span
class="math inline">\(b\)</span> 的第一个位置。而回文序列 <span
class="math inline">\(b\)</span>
中最后一个数必然和第一个数相同。那么就能知道一定是枚举 <span
class="math inline">\(a_1\)</span> 和 <span
class="math inline">\(a_{2n}\)</span> 两种操作选择，再通过满足 <span
class="math inline">\(a_i = a_1\)</span> 或 <span
class="math inline">\(a_i = a_{2n}\)</span> 的位置 <span
class="math inline">\(i\)</span> 作为一个操作的临界点。</p>
<p>一旦确定了 <span class="math inline">\(i\)</span>，那么 <span
class="math inline">\(i\)</span>
必定是最后一个操作。我们可以将顺序的操作与倒序的操作的数相对应，满足最终得到回文串。于是考虑搜索。</p>
<p>建议玩一下样例。 <span class="math display">\[
[4, 1, 2, 4, 5, 3, 1 ,2, 3, 5 ]
\]</span></p>
<p><span class="math display">\[
[ 4, 5, 3, 1, 2, 2, 1, 3, 5, 4 ]
\]</span></p>
<p>不难发现每一次只能操作两个数，左边的位置单调增，右边的位置单调减。不妨设为
<span class="math inline">\(L\)</span> 与 <span
class="math inline">\(R\)</span>。一开始 <span
class="math inline">\(L=1\)</span>，<span
class="math inline">\(R=2n\)</span>。而倒序操作也只能操作两个数，左边的位置单调减，右边的位置单调增，且一开始始终是
<span class="math inline">\(i-1\)</span> 与 <span
class="math inline">\(i+1\)</span>。记为 <span
class="math inline">\(l\)</span> 与 <span
class="math inline">\(r\)</span>。</p>
<p>这里默认一开始操作的是 4。</p>
<p>第一步用 1 操作把 4 放到第一位，那么 <span
class="math inline">\(L+1\)</span>，<span
class="math inline">\(R\)</span> 不变，此时可以操作的数为靠左的 1
与靠右的 5。这个时候要选择能与 <span class="math inline">\(a_l\)</span>
与 <span class="math inline">\(a_r\)</span>
对应的数，否则绝对不是回文序列。那么显然就是 <span
class="math inline">\(a_r\)</span>，靠左的 5。所以要使用操作 2 加入
5，<span class="math inline">\(R-1\)</span>，<span
class="math inline">\(L\)</span> 不变。 由于 <span
class="math inline">\(r\)</span> 在 <span
class="math inline">\(i\)</span> 右边，最后一定是用 2 操作将 <span
class="math inline">\(a_r\)</span> 归位的。此时 <span
class="math inline">\(a_r\)</span> 已经不可使用，<span
class="math inline">\(r+1\)</span>，<span
class="math inline">\(l\)</span> 不变。当然，要记录每个操作。</p>
<p>接下来是将 <span class="math inline">\(a_r\)</span> 与 <span
class="math inline">\(a_R\)</span> 配对，<span
class="math inline">\(a_l\)</span> 与 <span
class="math inline">\(a_R\)</span> 配对。</p>
<p>相信大家都看出来套路了。就是择优配对，先考虑可行性，然后贪心选择。<code>L</code>必须尽可能靠前，因此优先度递减排序为
<span class="math inline">\(L\)</span> 与 <span
class="math inline">\(l\)</span>、<span class="math inline">\(L\)</span>
与 <span class="math inline">\(r\)</span>、<span
class="math inline">\(R\)</span> 与 <span
class="math inline">\(l\)</span>、<span class="math inline">\(R\)</span>
与 <span class="math inline">\(r\)</span>。</p>
<p>当 <span class="math inline">\(l=L\)</span> 并且 <span
class="math inline">\(r=R\)</span> 时操作结束。</p>
<p>但是还有一些小边界问题。这是由于边界的增减且不能越界造成的。</p>
<ol type="1">
<li>当 <span class="math inline">\(L \le l\)</span> 时，必须满足 <span
class="math inline">\(L &lt; l\)</span> 才能让 <span
class="math inline">\(L\)</span> 与 <span
class="math inline">\(l\)</span> 配对，满足 <span
class="math inline">\(r \le R\)</span> 时就能让 <span
class="math inline">\(L\)</span> 与 <span
class="math inline">\(r\)</span> 配对。</li>
<li>当 <span class="math inline">\(r \le R\)</span> 时，满足 <span
class="math inline">\(L \le l\)</span> 就能让 <span
class="math inline">\(R\)</span> 与 <span
class="math inline">\(l\)</span> 配对，必须满足 <span
class="math inline">\(r &lt; R\)</span> 时才能让 <span
class="math inline">\(R\)</span> 与 <span
class="math inline">\(r\)</span> 配对。</li>
</ol>
<p>由于只有能够成为回文串才贪心操作，所以第一次到达 <span
class="math inline">\(l = L\)</span> 且 <span class="math inline">\(r =
R\)</span> 时一定是字典序最小的回文串。</p>
<p>复杂度 <span class="math inline">\(O(Tn)\)</span></p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// l与r，L与R同上文</span>
    <span class="token comment">// p表示序列b中有多少个数</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>L<span class="token operator">&amp;&amp;</span>r<span class="token operator">></span>R<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">></span>n<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>L<span class="token operator">&lt;</span>l<span class="token operator">||</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>R<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'L'</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>L<span class="token operator">&lt;</span>l<span class="token punctuation">)</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>L<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>L<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;=</span>R<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>L<span class="token operator">&lt;=</span>l<span class="token operator">||</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;</span>R<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'R'</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>L<span class="token operator">&lt;=</span>l<span class="token punctuation">)</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>L<span class="token punctuation">,</span>R<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>L<span class="token punctuation">,</span>R<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	s<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'L'</span><span class="token punctuation">;</span> <span class="token comment">// 一定的</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'L'</span><span class="token punctuation">;</span>
        <span class="token comment">// 一开始用1操作位置1，对应的最后一次操作位置是i</span>
        <span class="token comment">// 顺序操作区间[2,2n]</span>
		<span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'R'</span><span class="token punctuation">;</span>
        <span class="token comment">// 一开始用2操作位置1，对应的最后一次操作位置是i</span>
        <span class="token comment">// 顺序操作区间[1,2n-1]</span>
		<span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu7960 报数 题解</title>
    <url>/2022/lg7960-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="前言">前言</h2>
<p>那段时间里，一直过着双面生活。</p>
<p>一面，是在学校里苦于愈发紧张的文化课，对考试名次嗤之以鼻。</p>
<p>一面，是梦已破碎、逃避现实，有疑问无人解答，有肺腑之言无处倾诉的彷徨。</p>
<p>在学校，我是一个在“重点班”，文化课成绩一直下降却无动于衷的“怪人”。</p>
<p>在家中，我是一个迷茫颓废的失败者。</p>
<p>究竟持续了几个月，早已记不清了。</p>
<span id="more"></span>
<h2 id="分析">分析</h2>
<p>首先判断某个数十进制中是否含有 7 这个很简单。</p>
<p>然后用筛子把它的倍数筛掉就行了。</p>
<p>瓶颈在于，如何快速回答下一个要报出的数。枚举的话只有 70pts。</p>
<p>考虑一个数 <span class="math inline">\(x\)</span>，满足 <span
class="math inline">\(p(x)=0\)</span> 且不存在 <span
class="math inline">\(y\)</span>，满足 <span
class="math inline">\(p(y)=1\)</span> 且 <span class="math inline">\(y
\mid x\)</span>，它一定是某个数“下一个要报出的数”。</p>
<p>而每一个数“下一个要报出的数”一定是单调增的。</p>
<p>所以设 <span class="math inline">\(r_x\)</span> 为 <span
class="math inline">\(x\)</span>
下一个要报出的数，如果它本身不合法，那么就是 -1。</p>
<p>我们可以在筛数的过程中，维护 <span
class="math inline">\(lst\)</span>。如果 <span
class="math inline">\(x\)</span> 满足条件，直接令 <span
class="math inline">\(r_{lst}=x\)</span>，<span
class="math inline">\(lst = x\)</span>。因为 <span
class="math inline">\((lst,x)\)</span>
这个区间里的数都是不合法的，否则与 <span
class="math inline">\(x\)</span> 为“下一个要报出的数”相矛盾。</p>
<p>注意当 <span class="math inline">\(x=10^7\)</span> 时，答案为 <span
class="math inline">\(10^7+1\)</span>。</p>
<p>预处理之后就可以直接输出 <span
class="math inline">\(r_x\)</span>。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> r<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">pd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">7</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
		x<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// pd(x)=1表示x十进制中有7或者是7的倍数</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> lst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token comment">// v[i]=1就代表i不合法</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pd</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">+=</span>i<span class="token punctuation">)</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> r<span class="token punctuation">[</span>lst<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> lst<span class="token operator">=</span>i<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 	freopen("d:\\number\\number4.in","r",stdin);</span>
<span class="token comment">// 	freopen("d:\\number\\out.out","w",stdout);</span>
	t<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu7961 数列 题解</title>
    <url>/2022/lg7961-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="前言">前言</h2>
<p>好强的状态设计啊，从来没有见过。</p>
<p>可是暴力分竟然给到了一半，连一半都拿不到吗？</p>
<p>那个时候连记忆化搜索都写不熟练，总是止步于似懂非懂的家伙。</p>
<p>我承认，那时候的遗憾，和我即将面临的抉择，没有任何关系。但是，连续地与期望失之交臂，真的会感觉自己是彻头彻尾地废物。</p>
<p>25 号，什么时候到来啊！马上要见分晓了！</p>
<p>卷王同学们在一次迷惑的提前批招生后安定下来，只有一面之缘的朋友的情况也渐入佳境。</p>
<p>我只能不去关心“他们”的事情，这般沉溺于夏日，沉溺在自己的世界中。</p>
<span id="more"></span>
<h2 id="暴力">暴力</h2>
<h3 id="分析">分析</h3>
<p>首先明确 <span class="math inline">\(a_i \in [0,m]\)</span>。</p>
<p>设 <span class="math inline">\(f(x,S)\)</span> 为当前 <span
class="math inline">\(\{a_i\}\)</span> 有 $ x$ 项，其中 <span
class="math inline">\(S = \sum_{i=1}^x
2^{a_i}\)</span>，还能够产生的权值和。</p>
<p>状态总数为 <span
class="math inline">\(O(2^{m}nm)\)</span>，只要保证转移在 <span
class="math inline">\(O(m)\)</span> 之内实现就可行。</p>
<p>这个状态明显是记忆化搜索。</p>
<p>如果多选 <span class="math inline">\(a_{x+1}=k\)</span>，那么必然
<span class="math inline">\(k \in [0,m]\)</span>，同时 <span
class="math inline">\(S+2^k\)</span>，状态变成了 <span
class="math inline">\(f(x+1,S+2^k)\)</span>，对 <span
class="math inline">\(f(x,S)\)</span> 产生的贡献为 <span
class="math inline">\(f(x+1,S+2^k) \cdot
v_k\)</span>。这个状态的每一个前继状态都必定要在算权值的时候乘上 <span
class="math inline">\(v_k\)</span>，由于乘法结合律与分配律，只要边界设置对了，这样做就是对的。枚举
<span class="math inline">\(k\)</span>，转移 <span
class="math inline">\(O(m)\)</span>。 <span class="math display">\[
f(x,S) = \sum_{i=0}^m f(x+1,S+2^{m}) \cdot v_i
\]</span> 然后就是边界，如果上面我们这么干，那么必须 <span
class="math inline">\(x=n\)</span> 且 1 的个数小于 <span
class="math inline">\(k\)</span> 的状态的贡献为 1，否则为 0。</p>
<p>最终答案 <span class="math inline">\(f(0,0)\)</span></p>
<p>复杂度 <span class="math inline">\(O(2^m m^2 n)\)</span></p>
<p>期望得分 <span class="math inline">\(50pts\)</span></p>
<h3 id="code">CODE</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">35</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">105</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll mod<span class="token operator">=</span><span class="token number">998244353</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">123000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cnt<span class="token operator">+=</span>x<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> cnt<span class="token punctuation">;</span>	
<span class="token punctuation">&#125;</span>
<span class="token comment">// 统计x中1的个数</span>
ll <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>ll s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>
	ll dlt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">(</span>dlt<span class="token operator">+=</span><span class="token function">dp</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span>
	<span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>dlt<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="正解">正解</h2>
<h3 id="分析-1">分析</h3>
<p>暴力状态无论如何优化都无法承受了，考虑重新设计状态。</p>
<p>暴力状态瓶颈的原因在与状态数量太多，十进制下 <span
class="math inline">\(S\)</span>
实在是太大了。那么可以试着按照二进制位设计状态。</p>
<p>建议好好品一下<strong>样例解释 #1</strong>……</p>
<p>当一个 <span class="math inline">\(a_i\)</span> 确定时，只会发生 2
种情况。</p>
<ol type="1">
<li><span class="math inline">\(a_i\)</span> 这个数首次出现，那么 <span
class="math inline">\(S\)</span> 的二进制中 1 的个数增加 1。</li>
<li><span class="math inline">\(a_i\)</span> 这个数之前出现过了，那么
<span class="math inline">\(S\)</span> 的二进制中那一位就要向前一位进
1，同时变成 0。由于不知道下一位是啥所以无法预测 1 的数量变化。</li>
</ol>
<p>但是对于任何一位，他只能向更高的一位进，至于最后到了那里不重要，可以到更高位的时候再考虑。从高位状态转移到低位状态无后效性，还是记忆化搜索。</p>
<p>那么一个神级状态就要产生了！</p>
<p><span class="math inline">\(f(k,i,x,y)\)</span>，表示已经确定了 <span
class="math inline">\(S\)</span> 二进制的 <span
class="math inline">\(k\)</span> 位，其中 <span
class="math inline">\(\{a\}\)</span> 数列确定了 <span
class="math inline">\(i\)</span> 项，有 <span
class="math inline">\(x\)</span> 个 1，同时第 <span
class="math inline">\(k-1\)</span> 位进了 <span
class="math inline">\(y\)</span> 个 1 到 <span
class="math inline">\(k\)</span> 位，还能够产生的贡献。</p>
<p>为什么这么设计呢？首先它能够唯一确定地表示 <span
class="math inline">\(S\)</span> 与 <span
class="math inline">\(\{a\}\)</span>，并且状态数量级别是 <span
class="math inline">\(O(mn^3)\)</span>。要知道测试点中 <span
class="math inline">\(m \in [7,100]\)</span>，<span
class="math inline">\(n \in
[5,30]\)</span>，这是相当大的优化了。而且样例的做法启发我们用组合数求出方案，用
<span class="math inline">\(v_k\)</span> 的不同次方来统计贡献。</p>
<p><span class="math inline">\(k\)</span> 其实隐式代表着 <span
class="math inline">\(v_k\)</span>。转移的时候枚举 <span
class="math inline">\(j \in [0,n-i]\)</span>，表示剩下的 <span
class="math inline">\(n-i\)</span> 项中，<span
class="math inline">\(k\)</span> 用几项。那么从 <span
class="math inline">\(n-i\)</span> 个位置里任选 <span
class="math inline">\(j\)</span> 个为 <span
class="math inline">\(k\)</span>，方案数为 <span
class="math inline">\(C_{n-i}^j\)</span>，都会产生 <span
class="math inline">\(v_k^j\)</span> 的贡献。</p>
<p>最关键的是剩下两个状态如何表示。</p>
<p>上一位进了 <span class="math inline">\(y\)</span> 个 1，这一位多了
<span class="math inline">\(j\)</span> 个
1，二进制下满二进一，那么就是进 <span class="math inline">\(\lfloor
\frac{y+j}{2} \rfloor\)</span> 个 1 到 <span
class="math inline">\(k+1\)</span> 位。</p>
<p>由于规定了进位顺序，当 <span class="math inline">\(y+j\)</span>
是奇数时，<span class="math inline">\(k\)</span> 位上必定留下 1，<span
class="math inline">\(x+1\)</span>，否则 <span
class="math inline">\(x\)</span> 不变。</p>
<p>好的！转移 <span class="math inline">\(O(n)\)</span>！ <span
class="math display">\[
f(k,i,x,y) = \sum_{j=0}^{n-i} f(k+1,i+j,x+d(y+j),\lfloor \frac{y+j}{2}
\rfloor) \cdot C^j_{n-i} \cdot v_k^j
\]</span> 当 <span class="math inline">\(t\)</span> 为奇数时，<span
class="math inline">\(d(t)\)</span> 为 1，反之为 0。</p>
<p>边界依然很重要。当 <span class="math inline">\(k&gt;m\)</span>
时，不存在这样的 <span
class="math inline">\(S\)</span>，这个状态直接返回 0。</p>
<p>当 <span class="math inline">\(i=n\)</span> 的时候，此时 <span
class="math inline">\([1,k]\)</span> 位上有 <span
class="math inline">\(x\)</span> 个 1，前面进了 <span
class="math inline">\(y\)</span> 个 1。由于 <span
class="math inline">\((k,m]\)</span> 此时全为 0，那么 <span
class="math inline">\(y\)</span> 个 1 最后产生的 1 数量是它的二进制中 1
的个数。所以就像暴力方法一样，如果 1 的数量合法，那么返回 1，否则返回
0。</p>
<p>答案 <span class="math inline">\(f(0,0,0,0)\)</span></p>
<p>复杂度 <span class="math inline">\(O(mn^4)\)</span></p>
<p>期望得分 <span class="math inline">\(100pts\)</span></p>
<h3 id="code-1">CODE</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">35</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">105</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll mod<span class="token operator">=</span><span class="token number">998244353</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> kk<span class="token punctuation">;</span>
ll c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// c[i][j]是组合数，v[i][j]是v[i]的j次幂</span>
ll <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ll a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cnt<span class="token operator">+=</span>x<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> cnt<span class="token punctuation">;</span>	
<span class="token punctuation">&#125;</span>
ll <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token operator">+</span><span class="token function">count</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">&lt;=</span>kk<span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">></span>m<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
	ll dlt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token operator">-</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">(</span>dlt<span class="token operator">+=</span><span class="token function">dp</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">+</span>j<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>y<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span>c<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token operator">*</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span>
	<span class="token keyword">return</span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>dlt<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kk<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
    <span class="token comment">// 预处理组合数与次幂</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>关于OI，不知所言</title>
    <url>/2021/oi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>我认为我是一个真实的人。</p>
<p>我一直在追寻，我的「真物」。</p>
<p>我最讨厌口是心非的行为，总是不加掩饰地流露自己最真实的想法。</p>
<p>我总是毫不保留地对那些仅仅算是认识的「朋友」诉以奇怪的碎碎念。</p>
<p>我瞧不起恶性竞争的制造者与参与者。</p>
<p>我尽力选择自己所喜欢的，抵制不喜欢的。</p>
<p>我想保持自己的本色，自己的思想，自己的世界。成为那个遥远的自己。</p>
<p> </p>
<p>我是一个虚伪的人。</p>
<p>所谓「真物」，不过是我逃避现实的借口罢了。</p>
<p>表露自己，等于被大多数人孤立。</p>
<p>极其依赖朋友，却总止步于普通朋友。</p>
<p>总想着改变无法改变的事。</p>
<p>选择权，也许仅仅是掌权者的恩赐。</p>
<p>那些东西，无数次地让我与自己渐行渐远。</p>
<span id="more"></span>
<p> </p>
<p>我曾因为玩过几部刺客信条，看过一些历史，便崇拜着「自由、平等、博爱」和人文主义的理念。</p>
<p>我曾因为听过几首 AVICII 的音乐，看过它们的歌词，便坚信着「live your
life」这种生活方式。</p>
<p>进而有了我这种古怪的性格。</p>
<p>所以才在条件如此困难的情况下，我选择了 OI。</p>
<p> </p>
<p>然而我总是在骗自己。</p>
<p>每一篇作文，我都在套模板，一个我自己都不信的模板。自己的事，终究写不下去。</p>
<p>我总是按照自以为正确的计划来学习
OI，写自己认为好的题目，不断复习自己认为合适的书和课件。这一切，都只是自欺欺人罢了。</p>
<p>完全没有比赛的经验，完全不熟悉比赛的题目风格，注定了我必将失败，败给自己。</p>
<p>我仅仅只有周末和放假时才能学
OI，不可能与那些有着几年经验的人相提并论，更是败给了时间。</p>
<p>然而我却依然骗自己，骗自己能做到。</p>
<p>或许是鼠目寸光吧。</p>
<p> </p>
<p>我的环境更是可笑。</p>
<p>别人的高中，应当是参加竞赛的黄金时期。</p>
<p>而我呢？</p>
<p>进入那个所谓「重点高中」。</p>
<blockquote>
<p>update 2022.6.29</p>
<p>貌似这个学校的老师要求校长为 OI
提供支持，无奈学的人少，水平较低。但是既然这样做了，那就不要带着有色眼镜去看待了。</p>
</blockquote>
<p>那个靠着压榨学生，疯狂应试换取升学率的学校。</p>
<p>那个剥夺普通班所有资源，全力培养重点班，因而导致成绩虎头蛇尾的学校。</p>
<blockquote>
<p>有意思的是，所谓重点班有好多个名字。招生方式是在初三上学期期末考试前，联系前几次考试每个学校前十左右的学生，让他们单独去考试。考上之后，所有周末都要去它那里上课，单独布置作业。考不上，即使中考成绩再好，也无法进入。中考后还有一次考试，但是和前面的又不是一个等级的班了。</p>
<p>这些重点班单独分区，单独吃饭，校服也不一样。这些重点班只出不进，考差一次就被踢，并且任何普通班学生都无法进入。把学生划分成
ABCD 四个等级，不同等级在管理方面都有相当大的不同。</p>
<p>对于竞赛，就是自生自灭。有的资源，仅仅是挂名字的老师，并且什么学习时间都不给，更不要说停课集训。</p>
<p>我认识一个高一学生，上高中前接触过
OI。进入高中后，只能在每月一次的假期自学 OI。</p>
</blockquote>
<p>那个在 CSP 第一轮集体作弊的学校。</p>
<p>那个完全不给竞赛活路的学校。</p>
<p>一旦进入这个学校，我的竞赛生涯，就彻底到头了。而除了这个学校，其他的高中根本没有竞赛这一说。</p>
<p>我的中考，通往的是噩梦。</p>
<p>这种客观条件，更是无可奈何。</p>
<p> </p>
<p>我已经无法再这样学下去了，闭门造车终究是死路。</p>
<p>我失去了方向，自学的局限性实在太过巨大，在如此有限的条件下无法解决。</p>
<p>没有未来。</p>
<p>高中就是终点。</p>
<p> </p>
<p>完全做不到啊。</p>
<p> </p>
<p>其实，我早就做好了接受一个并不乐观的结局的准备。</p>
<p>只是</p>
<p>我放不下 OI。</p>
<p>根本放不下啊。</p>
<p>如果不是真心喜欢的话……</p>
<p>说不出再见啊</p>
<p>昨夜</p>
<p>不止的雨</p>
<p>无尽的愁绪</p>
<p>一夜未眠</p>
<p>终究是无法告别</p>
<p> </p>
<p>OI 让我学会了很多，很多</p>
<p>数不胜数</p>
<p>还有</p>
<p>这一度是我单调生活唯一的点缀</p>
<p>是我虚假人生唯一的光。</p>
<p>从始至终，我都是孑然一身，独自走着 OI 的路。</p>
<p>OI 能给我带来，那么多的幻想与希望。</p>
<p>让我找回了</p>
<p>与我无数次失之交臂的「勇气」</p>
<blockquote>
<p>眩しくても　目を開けて</p>
<p>即使暄目耀眼，也要张开双眼</p>
<p>歌の在処を　辿っていけば</p>
<p>若是能够抵达，歌所在的彼端</p>
<p>柔らかな心に　触れられる</p>
<p>便能够触碰到，那颗柔软的心</p>
</blockquote>
<p> </p>
<p>谢谢你，OI</p>
<blockquote>
<p>ねぇ いつか届く</p>
<p>呐，总有一天能传达到</p>
<p>君と僕との この物語</p>
<p>你和我的这个故事</p>
</blockquote>
<p>谢谢你不到一年的陪伴</p>
<p> </p>
<p>即使只能用强挤出的笑容掩饰自己的彷徨</p>
<p>我会好好生活下去的</p>
<p> </p>
<p>有缘再见吧</p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>暑假day09/10/11</title>
    <url>/2021/natsu-day09-10-11/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="鬼知道我这三天经历了什么">鬼知道我这三天经历了什么。。。</h3>
<hr />
<span id="more"></span>
<h3 id="section">7.9</h3>
<p>我记得好像是因为前一天熬夜凌晨两点，然后九点多起床，起床后就是一顿颓废。。。上b站玩游戏</p>
<p>白天只切掉了<a
href="https://www.luogu.com.cn/problem/P2629">好消息，坏消息</a>，一道断环为链，单调队列的题目（当然不用也可以）</p>
<p> </p>
<p>而晚上一直在做<a
href="https://www.luogu.com.cn/problem/P1462">通往奥格瑞玛的道路</a>，我用的SPFA，结果两个WA，一个TLE。当时很想骂这个题，然鹅刚刚AC了。。。</p>
<h3 id="section-1">7.10</h3>
<p><a href="https://www.luogu.com.cn/problem/P1967">货车运输</a></p>
<p>用边建最大生成树，然后 <span class="math inline">\(lca\)</span></p>
<p> </p>
<p>EZEC round 10 因为网络原因，只做了不到50分钟，惨。。。</p>
<h3 id="section-2">7.11</h3>
<p>今天切了6道题</p>
<p><a href="https://www.luogu.com.cn/problem/P3478">station</a></p>
<p>树形换根dp</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P3574">FarmCraft</a></p>
<p>贪心（邻项交换）+树形dp。很有不错的一道题，状态的设计和转移感觉很有意思，还有贪心的证明</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P2330">繁忙的都市</a></p>
<p>最小生成树最大的那条边权（也就是第 <span
class="math inline">\(n-1\)</span> 条边）</p>
<p> </p>
<p><a
href="https://www.luogu.com.cn/problem/solution/P4047">部落划分</a></p>
<p>二分/贪心
最小生成树，我用的贪心。策略：每次连最小的边，这样里的最近的两个部落之间的距离就会增大</p>
<h3 id="不需要证明-3">不需要证明！ (○｀ 3′○)</h3>
<p>顺便学到了<strong>只给出坐标，建一张图边的集合</strong>的方法</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P1991">无线通讯网</a></p>
<p>与<a
href="https://www.luogu.com.cn/problem/P2330">繁忙的都市</a>同</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P1966">火柴排队</a></p>
<p>通过邻项交换证明是求逆序对个数，归并排序/树状数组</p>
<p>这里后者更好写</p>
<hr />
<p>笑死，两周作业一点没写，被老师查水表了，。。</p>
<p>突然好喜欢<a
href="http://music.163.com/song?id=487527981&amp;userid=564152236">あの夏に咲け</a>和<a
href="http://music.163.com/song?id=1854474192&amp;userid=564152236">あいつら全員同窓会</a></p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>2021的暑假</tag>
      </tags>
  </entry>
  <entry>
    <title>暑假day12</title>
    <url>/2021/natsu-day012/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="今日切掉5道题">今日切掉5道题</h3>
<p>下雨了，一直呆在家没出门</p>
<span id="more"></span>
<hr />
<p><a href="https://www.luogu.com.cn/problem/P2654">原核生物培养</a></p>
<p><a href="https://www.luogu.com.cn/problem/P1090">合并果子</a>与<a
href="https://www.luogu.com.cn/problem/P1880">石子合并</a>的缝合怪。。形象一点说就是把若干堆石子合并成一堆，放在哈夫曼树上，形成一个果子，然后再把果子进行合并。</p>
<p>是不是很形象呀~ ο(=•ω＜=)ρ⌒☆</p>
<p>好吧一点都不好笑，呵呵。</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P6082">salesman</a></p>
<p>很不错的贪心+树形dp。巧妙之处在于贪心策略和判断解是否唯一的推理过程。</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P3745">期末考试</a></p>
<p>有dalao用三分求解这道题，orz</p>
<p>这题单纯枚举时间就行了，<del>时间 <span
class="math inline">\(t_i\)</span> 和 <span
class="math inline">\(b_i\)</span> 那么小是有原因的</del>。</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P2865">Roadblocks</a></p>
<p>次短路，我用的dij。</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P1841">重要的城市</a></p>
<p>这道题主要是对 Floyd
“松弛”的理解，明白了它的原理，这道题就迎刃而解了</p>
<p>用 spfa 也能做，但我 <del>看不懂</del> 莫名其妙RE好多次。。</p>
<p><strong>不要Trick   ---阮行止</strong></p>
<hr />
<p>题目基本都是在<a
href="https://www.luogu.com.cn/team/33750">睡前组团拉香香</a>这个奇妙的团队题单里找的
ˋ( ° ▽、° )</p>
<p>感觉我暑假每一天的博客越来越单调了。</p>
<hr />
<p>说好的7.10出成绩，现在还没出！</p>
<p>7.15就要去参加SD夏令营了，rp++。好像人数不是很多，，，不知道能不能见到省队队员</p>
<p>每天都要和一个准高一的初学oi的sb斗图，然鹅他永远不会知道他面对的是一个表情包多到找不过来的人</p>
<figure>
<img data-src="https://i.loli.net/2021/07/12/9VMoqFHws6TtaUO.jpg"
alt="久违的表情包" />
<figcaption aria-hidden="true">久违的表情包</figcaption>
</figure>
<p>作业好多啊orz，同学都在卷文化课，，只有我在学oi</p>
<p><img data-src="https://i.loli.net/2021/07/12/5cqoD48bstJlC6y.jpg" /></p>
<p><strong>还是OI有意思</strong> ╰(￣ω￣ｏ)</p>
<p><img data-src="https://i.loli.net/2021/07/12/dwltBvCPrXxfkKO.gif" /></p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>2021的暑假</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu5052 GO 题解</title>
    <url>/2022/lg5052-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>这题评紫确实过了。很容易看出来是套路的区间 DP。</p>
<p>设 <span class="math inline">\(f(i,j,t,0/1)\)</span> 表示抓到了区间
<span class="math inline">\([i,j]\)</span> 的宝可梦，花费的时间为 <span
class="math inline">\(t\)</span>，在 <span
class="math inline">\(i\)</span> 或 <span
class="math inline">\(j\)</span> 的位置，所获得的最大收益。</p>
<span id="more"></span>
<p>转移情况比较多，用刷表法比较方便，而且要注意时间限制，否则下面的
<span class="math inline">\(B\)</span> 是不能加的。 <span
class="math display">\[
f(i-1,j,t +\Delta t,0) =
\max \begin{cases}
f(i,j,t,0) + B_{i-1}
\\
f(i,j,t,1) + B_{i-1}
\end{cases}
\]</span></p>
<p><span class="math display">\[
f(i,j+1,t +\Delta t,1) =
\max \begin{cases}
f(i,j,t,0) + B_{j+1}
\\
f(i,j,t,1) + B_{j+1}
\end{cases}
\]</span></p>
<p>计算 <span class="math inline">\(\Delta t\)</span>
只需要将对应的编号相减就行了。</p>
<p>注意状态中的 <span class="math inline">\([i,j]\)</span>
指的是按照编号排序后排名为 <span class="math inline">\([i,j]\)</span>
的宝可梦，而不是房子编号，不然复杂度不对。这一步就相当于离散化。</p>
<p>边界为 <span class="math display">\[
f(i,j,t,0/1) =
\begin{cases}
0 &amp; i=j=k
\\
-\infty &amp; \text{otherwise}
\end{cases}
\]</span> 复杂度 <span class="math inline">\(O(m^2 \max
T)\)</span>。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">105</span><span class="token punctuation">,</span> maxt<span class="token operator">=</span><span class="token number">2005</span><span class="token punctuation">,</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> T<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>maxt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">qwq</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> num<span class="token punctuation">,</span> v<span class="token punctuation">,</span> t<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>qwq a<span class="token punctuation">,</span>qwq b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>num<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
		T<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	a<span class="token punctuation">[</span><span class="token operator">++</span>m<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>qwq<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>k<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 原点</span>
	<span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">==</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> p<span class="token operator">=</span>i<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	f<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>t<span class="token operator">&lt;=</span>T<span class="token punctuation">;</span><span class="token operator">++</span>t<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>len<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>len<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span>inf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">int</span> tt<span class="token operator">=</span>t<span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token operator">&lt;=</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">int</span> dlt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
					<span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">)</span> dlt<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
					f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>dlt<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">int</span> tt<span class="token operator">=</span>t<span class="token operator">+</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token operator">&lt;=</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">int</span> dlt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
					<span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">)</span> dlt<span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
					f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>dlt<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span>inf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">int</span> tt<span class="token operator">=</span>t<span class="token operator">+</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token operator">&lt;=</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">int</span> dlt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
					<span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">)</span> dlt<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
					f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dlt<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">int</span> tt<span class="token operator">=</span>t<span class="token operator">+</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">-</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token operator">&lt;=</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">int</span> dlt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
					<span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">)</span> dlt<span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
					f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dlt<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>区间DP</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu4778 Counting swaps 题解</title>
    <url>/2021/solution-lg4778/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://www.luogu.com.cn/problem/P4778">link</a></p>
<p>将给定的排列 $ P={p_1,p_2, p_k}$ 中 $ i$ 与 $ p_i$
连一条边，这样就构成了由若干个环构成的图。</p>
<p>而要求的就是把这张图变成 $ k$ 个自环最少需要的操作次数。</p>
<span id="more"></span>
<p>设 $ f(n)$ 为长度为 $ n$ 的环变成若干个自环的最少需要的操作次数。</p>
<p>设 $ g(n,x,y)$ 为长度为 $ n$ 的环变成长度为 <span
class="math inline">\(x\)</span> 与 $ y$ 的两个环的方案数。</p>
<p>不难发现 <span class="math display">\[
g(n,x,y)=
\begin{cases}
\frac{n}{2} \quad \text{$n$ 是偶数且 $x=y$} \\
n \quad \text{ $n$ 是奇数或 $x \neq y$}
\end{cases}
\]</span> 而 <span class="math display">\[
f(n)=\sum_{x+y=n}{g(n,x,y) \times f(x) \times f(y) \times
\frac{(n-2)!}{(x-1)!(y-1)!}}
\]</span> 上式实际是 <span class="math display">\[
\large \text{累加（方案数 $\times$ 操作方法数 $\times$ 多重集全排列）}
\]</span> 通过奇怪的手段可以发现通项公式 $ f_n=n^{n-2}$ 。</p>
<p>这样我们就不必计算上式了。</p>
<p>设排列 <span class="math inline">\(P\)</span> 由长度为 <span
class="math inline">\(l_1,l_2,\dots l_k\)</span> 的 <span
class="math inline">\(\large k\)</span> 个环组成，那么答案为 <span
class="math display">\[
(\prod_{1\le i \le k} {f(l_i)}) \times \frac{(n-k)!}{\prod_{1 \le i \le
k}{(l_i-1)!}}
\]</span> 后面的东西还是多重集全排列。</p>
<p>然后注意实现的细节就可以了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">,</span> P<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> t<span class="token punctuation">,</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> fac<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1ll</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll <span class="token function">fp</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ll z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>y<span class="token punctuation">;</span>x<span class="token operator">=</span>x<span class="token operator">*</span>x<span class="token operator">%</span>P<span class="token punctuation">,</span>y<span class="token operator">>>=</span><span class="token number">1ll</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&amp;</span><span class="token number">1ll</span><span class="token punctuation">)</span> z<span class="token operator">=</span>z<span class="token operator">*</span>x<span class="token operator">%</span>P<span class="token punctuation">;</span>
    <span class="token keyword">return</span> z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ll i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1e5</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>fac<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">%</span>P<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">--</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        ll ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            ll dlt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">!=</span>i<span class="token punctuation">;</span>j<span class="token operator">=</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">++</span>dlt<span class="token punctuation">;</span>
            <span class="token operator">++</span>k<span class="token punctuation">;</span>
            <span class="token punctuation">(</span>ans<span class="token operator">*=</span><span class="token punctuation">(</span>dlt<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">fp</span><span class="token punctuation">(</span>dlt<span class="token punctuation">,</span>dlt<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%=</span>P<span class="token punctuation">;</span>
            <span class="token punctuation">(</span>ans<span class="token operator">*=</span><span class="token function">fp</span><span class="token punctuation">(</span>fac<span class="token punctuation">[</span>dlt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>P<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%=</span>P<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token operator">*</span>fac<span class="token punctuation">[</span>n<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token operator">%</span>P<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title>致2021的夏</title>
    <url>/2021/to-Natsu2021/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img data-src="https://i.loli.net/2021/08/14/ZSxuCsmGoNb4dv7.jpg" /></p>
<span id="more"></span>
<h2 id="section">2020.5.5</h2>
<p>夏天开始了。</p>
<p>我还记得体育课下课之后，回想着 <span
class="math inline">\(henceforth\)</span>​​​ 的每一句歌词。</p>
<blockquote>
<p>あぁ！ 夏を今もう一回 啊啊！ 夏日如今再度</p>
<p> </p>
<p>君がいなくても笑って迎えるから 就算你不在我也会欢笑迎接</p>
<p> </p>
<p>だから今絶対に君も歩みを止めないで 所以现在你也绝对不要停下脚步</p>
</blockquote>
<p>正如歌名一样，「从今往后」……</p>
<p>从今往后，便是期待已久的夏天了。</p>
<p>那时候，是那么憧憬未来。</p>
<p> </p>
<h2 id="section-1">2021.8.6</h2>
<p>夏天的最后一天。</p>
<p>当时不在本市，没法打学校组织的疫苗，8.8就要回去了。</p>
<p>也就是在回去时候啊，我才注意到，一度响彻着的蝉鸣，与我已经渐行渐远了。</p>
<p>尽管气温不减，却仍难掩夏日已经悄然溜去的现实……</p>
<p>和我的现实。</p>
<p> </p>
<p>或许我认为自己凭借仅仅不到一年的学习 OI 的时间就能在 CSP/NOIP
拿到一个不错的成绩是错误的。</p>
<p>但我在资源严重不足的情况下，已经拼尽全力了。</p>
<p>然而，OI 太过看重积累，学的越早越有优势。</p>
<p>我费尽心思去钻研图论、DP。</p>
<p>最后考大模拟，构造，字符串。</p>
<p>模拟，我没有把握，我的码力严重不足，这是缺乏练习时间的必然后果。</p>
<p>构造，到现在只做过两道题。</p>
<p>字符串，昨晚刚学会简单的 KMP 和 Trie。</p>
<p>截至现在，线段树就写过4遍。</p>
<p>就连我真正下功夫的图论和 DP 来说。</p>
<p>前几天刚会了一点 Tarjan。</p>
<p>数位 DP 和状压 DP 的练习寥寥可数，斜率优化半懂不懂。</p>
<p>日复一日地学习、练习，最终或许会在出题人不经意间，全部木大。</p>
<p>而很多我的同龄人，已经学了两三年，不谈实力，学的内容远远比我多。</p>
<p>别人在「复习」，我在「赶进度」。</p>
<p>可笑的是，一边赶进度，一边学习思维。这样题量根本上不去，可题量对现在的我没有意义。</p>
<p>我在学校基本没有时间，更不会停课。</p>
<p>而报名提高组的，学习时间估计都比我长。</p>
<p>可能我是真的菜。</p>
<p>又或许只是单纯的输给了时间，败给了客观因素。</p>
<p> </p>
<h2 id="前几天的清晨第一场秋雨">前几天的清晨，第一场秋雨</h2>
<p>不再像祈祷夏雨冲刷这个世界那般单纯乐观。</p>
<p>如果被雨滴沾湿双眼的话，会不会轻松一些呢？</p>
<blockquote>
<p>五月蠅い もううざい くらいにCryを掻き消す様な</p>
<p>吵死了 真的麻烦死了 如此 将哭泣声 消抹掉似的</p>
<p> </p>
<p>世界なら 抗ってたいのに</p>
<p>这般的世界 我明明就想要去与之抵抗</p>
<p> </p>
<p>降り出した空の泣き声は透明で</p>
<p>降雨的天空的 哭泣声却是透明的</p>
<p> </p>
<p>「わかんない、もうわかんないよ！」を何遍も。</p>
<p>「我不懂啊，我不管了啊！」无数次这样说到。</p>
<p> </p>
<p>                           ————雨き声残響</p>
</blockquote>
<p> </p>
<p>我也想到了，自己一年的努力不会有好的结果。</p>
<p>日思夜想的，永远是天马行空。</p>
<p>安慰自己是没有用的。</p>
<p>若然一切只能以梦作结，我做不到哨戒班那样洒脱。</p>
<blockquote>
<p>夢で終わってしまうのならば</p>
<p>若然一切只能以夢作結</p>
<p> </p>
<p>昨日を変えさせて</p>
<p>那就讓我去改變昨天吧</p>
<p> </p>
<p>なんて言わないから</p>
<p>這樣的說話我才不會說</p>
<p> </p>
<p>また明日も君とこうやって</p>
<p>所以明天亦能再次與你如此</p>
<p> </p>
<p>笑わせて</p>
<p>一同嬉鬧歡笑</p>
</blockquote>
<p>而是会将责任推向昨天的自己，将这个梦永远地藏起来。</p>
<p>我仅仅是个菜比。</p>
<p> </p>
<h2 id="所谓碎碎念">所谓碎碎念</h2>
<p>前几天做了这样一道题</p>
<p><a href="https://www.luogu.com.cn/problem/CF372C">Watching Fireworks
is Fun</a></p>
<p>看烟花很有趣</p>
<p>单调队列优化 DP</p>
<p>我突然想起，<a
href="https://music.163.com/#/song?id=454966322">ホタライズ -2015 Summer
Edition-</a></p>
<p>这首歌的封面，是也是烟花。</p>
<p>这首歌是我在 SD 夏令营里 yamf
讲基础算法下课的时候，在网易云的日推上听到的，（当时用的别人的流量</p>
<p>觉得旋律很不错，就点了红心。</p>
<p>却没想到这首歌在那以后几乎陪伴了我的每一天。</p>
<blockquote>
<p>今にも枯れそうな涙が   足元にぽつり落ちた</p>
<p>马上就要干透的泪水在眼前一滴滴落下</p>
<p> </p>
<p>ひとり寂しい思いが僕の胸を締め付けるんだ</p>
<p>独自一人寂寞的心情紧紧地揪住了我的心</p>
<p> </p>
<p>嗚咽する心がもう涙も出ないと 心が口ずさむ</p>
<p>呜咽着在心里说“快流不出眼泪了”</p>
</blockquote>
<p>这段歌词，很有穿透力</p>
<p> </p>
<p>孤独却又只能独自黯然神伤</p>
<p>这种心情穿插在这个夏天每一个角落</p>
<p>接触了那么多人，发现自己真的只是井底之蛙</p>
<p>敏感悲观的我经常胡思乱想，认为人人都比自己强。</p>
<p>但那更多时候是为一种自欺欺人的行为。</p>
<p>若是现实的话，才会把自己吓一跳，造成的心灵创伤也远远大于这件事本身
(^^ゞ</p>
<p>所以洛谷开学术，控制住自己不去看别人的主页。</p>
<p>大佬们都说打 CF，可我 CF 没参加过任何一场比赛。</p>
<p>洛谷的比赛，心情去参加。报名了，看看题目就走。</p>
<p>和 OI 群里那些人也聊不来。</p>
<p>我真是菜啊！</p>
<p> </p>
<p>这个夏天</p>
<p>我没有体会到浸没在蝉鸣中的日常</p>
<p>我没有好好享受雨丝扬起的自然的气息</p>
<p>我没有感受晚风掠过四肢，我没有仰望天边白昼与残夜的交融</p>
<p>更没有看到游离于浩瀚夜幕中的星辰</p>
<p>换来的，却是全力赌两场比赛。</p>
<p> </p>
<p>可是，这种矛盾不仅仅是一句「我做不到」能够解决的。</p>
<p>能做的，也仅仅只有祈祷。</p>
<p> </p>
<p><a
href="http://music.163.com/song?id=691506&amp;userid=564152236">秋姉妹のなく頃に
in the autumn sky</a></p>
<p>初秋，只有荡漾着的蝉鸣……</p>
<p> </p>
<p>但愿我能做到吧。</p>
<blockquote>
<p>蛍、舞い上がる空で   笑ってた君に届け</p>
<p>萤火虫在天空飞舞着   我要传达给笑着的你</p>
<p> </p>
<p>煙たい灯りが僕に滲ませてくれるから</p>
<p>因为让人不安的灯光让我流露出</p>
<p> </p>
<p>君のあのときの笑顔を再び思い出せるから</p>
<p>一定会再次回忆起你那时的笑脸</p>
<p> </p>
<p>思い出せるから・・・</p>
<p>一定会回忆起・・・</p>
<p> </p>
<p>           ————ホタライズ -2015 Summer Edition-
（歌词已按评论区修改）</p>
</blockquote>
<p> </p>
<p>最后放一首去年暑假给我留下回忆的一首歌</p>
<blockquote>
<p>夏の夢に染まっていたいだけ</p>
<p>想要只做着夏日的梦</p>
<p> </p>
<p>お願いどうか覚めないでよ</p>
<p>拜托了请不要让我醒过来</p>
<p> </p>
<p>消え去った木陰は　泣き止んだ空は</p>
<p>消散不见的树荫 不再哭泣的天空</p>
<p>何処へ行ったの？　この声は何なの？</p>
<p>到底往何处而去了? 这道声音是什么?</p>
<p>泣き声に溺れた　夏の隅で</p>
<p>沉溺于那呜声 仿如在夏日的一角</p>
<p>笑うような</p>
<p>欢笑一样</p>
<p> </p>
<p>このまま今日に染まっていたいだけ</p>
<p>只想此般活在今天</p>
<p>何か欲しがってしまう度に　何か失ってしまうならば</p>
<p>若然每当有所欲求 就会有何失去的话</p>
<p>なんて願ってしまう僕はもういないから</p>
<p>在祈求着些什么的我已不复存在了</p>
<p>明日何を失っても　未来へ向かうと誓うからさ</p>
<p>所以发誓即使明天失去了些什么 亦依然要面对未来</p>
<p> </p>
<p>あの夏の色を忘れてしまうくらいなら</p>
<p>若是将要忘记那夏日的景色的话</p>
<p>この涙も代償と　笑顔で歌える僕でまた　いられるといいな</p>
<p>那就以这泪水作为代价 但愿我能再次 脸带笑容歌唱呢</p>
<p> </p>
<p>                                  ————<a
href="http://music.163.com/song?id=1384286542&amp;userid=564152236">イヤホンと蝉時雨</a></p>
</blockquote>
<p>非本家，但是最先听且最喜欢的是这个版本。</p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>2021的夏天</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ3017 Cut the Sequence 题解</title>
    <url>/2021/poj3017-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>设 $ f_i$ 为把前 $ i$ 个数合法分成若干段，每段最大值之和的最小值。
<span class="math display">\[
f_i = \min_{0 \le j &lt; i \, and \, \sum_{k=j+1}^i A_k \le M} { \left
\{ f_j + \max_{j+1 \le k \le i } \{ A_k \}  \right \} }
\]</span> 显然是 $ O(n^2)$ 的，考虑优化。</p>
<span id="more"></span>
<p>若 <span class="math inline">\(j\)</span>
可能为最优决策，则它一定满足 <span class="math display">\[
\sum_{k=j+1}^i A_k \le M \text{ 且 } \sum_{k=j}^i A_k &gt; M
\]</span> 或 <span class="math display">\[
A_j = \max_{j \le k \le i}{ \{ A_k \} }
\]</span>  </p>
<p>证明：</p>
<p>反证法。 若最优决策 $ j$ 不满足上述两个条件，那么 <span
class="math display">\[
\max_{j \le k \le i}{ \{ A_k \} } = \max_{j+1 \le k \le i}{ \{ A_k \} }
\]</span> 因为 <span class="math inline">\(f\)</span> 有单调性，所以
f_{j-1} f_j$</p>
<p>即 <span class="math display">\[
f_{j-1}+\max_{j \le k \le i}{ \{ A_k \} } \le f_j + \max_{j+1 \le k \le
i}{ \{ A_k \} }
\]</span> 与 $ j$ 是最优决策矛盾，固假设不成立，命题得证。</p>
<p> </p>
<p>对于第一个条件，可以直接预处理 $ _{k=j+1}^i A_k M$ 的最小的 $
j$，记为 $ c_i$。</p>
<p>对于第二个条件，一个决策 $ j_1$ 无用，当且仅当存在 <span
class="math inline">\(j_1 \le j_2 \text{ 且 } A_{j_1} \le
A_{j_2}\)</span>，用单调队列排除 <span class="math inline">\(j \le
c_i\)</span> 的不合法决策，维护 $ A_j$ 单调减即可。</p>
<p>但是 $ _{j+1 k i}{ { A_k } }$
这个东西没有单调性，队头仅仅是最优决策的一种可能。</p>
<p>考虑用平衡树维护，维护 $ f_j + _{j+1 k i}{ { A_k } }$ 的较小值。</p>
<p>仔细观察，不难发现，由于有第二个条件的限制，所以对于队列中每个决策 $
j$ <span class="math display">\[
\max_{j+1 \le k \le i}{ \{ A_k \} } = A_{q_{j+1}}
\]</span> 所以维护 $ f_j + A_{j+1} $ 即可。</p>
<p>复杂度 $ O(n_2n)$</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll m<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
multiset<span class="token operator">&lt;</span>ll<span class="token operator">></span> s<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>sum<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>sum<span class="token operator">></span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> sum<span class="token operator">-=</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>l<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>q<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">--</span>r<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">[</span><span class="token operator">++</span>r<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>单调队列优化</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA10559 方块消除 题解</title>
    <url>/2022/uva10559-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="题面">题面</h2>
<p>共有 <span class="math inline">\(t \, (1 \le t \le 15)\)</span>
组数据。</p>
<p>有 <span class="math inline">\(n \, (1 \le n \le 200)\)</span>
个带有颜色的方块，没消除一段长度为 <span
class="math inline">\(x\)</span> 的连续的相同颜色的方块可以得到 <span
class="math inline">\(x^2\)</span>
的分数，让你用一种最优的顺序消除所有方块使得得分最多。</p>
<span id="more"></span>
<h2 id="分析">分析</h2>
<p>显然是个区间 DP，但状态并不好表示。设 <span
class="math inline">\(f(l,r)\)</span> 表示区间 <span
class="math inline">\([l,r]\)</span>
的最大得分？看样例就能知道，全局最优解不能单纯地用局部最优解拼凑成，不满足最优子结构性质。</p>
<p>那么就暴力一发，设 <span
class="math inline">\(f(l,r,k_1,k_2)\)</span> 表示区间 <span
class="math inline">\([l,r]\)</span>，其中 <span
class="math inline">\(l\)</span> 的左边有连续 <span
class="math inline">\(k_1\)</span> 个与它同色的方块，<span
class="math inline">\(r\)</span> 的右边有连续 <span
class="math inline">\(k_2\)</span>
个与它同色的方块，所能得到的最大得分。这样状态总数就有 <span
class="math inline">\(200^4\)</span>
个，虽然有很多状态不存在（或者达不到），但是这样连数组都开不下。</p>
<p>我以前在某篇题解中看到过一句话：「当你发现了一个 fake
的思路时，先想想它为什么是 fake
的」。我们设计的这个状态缺点在于无用的状态太多，我们着手优化这个状态。显然，瓶颈在于
<span class="math inline">\(k_1\)</span> 与 <span
class="math inline">\(k_2\)</span> 那两维。仔细观察不难发现，对于区间
<span class="math inline">\([l,r]\)</span>，统计 <span
class="math inline">\(k_1\)</span>
是很盲目的，因为如果我们只考虑每个区间的右边，那么 <span
class="math inline">\(k_1\)</span> 的贡献会产生在区间 <span
class="math inline">\([1,l-1]\)</span>
中，不会影响当前区间信息计算的同时，我们还能够将区间信息「拼凑」起来。这不就是区间
DP 的条件吗？</p>
<p> </p>
<p>所以我们设 <span class="math inline">\(f(l,r,k)\)</span> 为区间 <span
class="math inline">\([l,r]\)</span>，其中 <span
class="math inline">\(r\)</span> 的右边有连续 <span
class="math inline">\(k\)</span> 个与 <span
class="math inline">\(r\)</span> 同色的方块。</p>
<p>转移的过程中，我们找到一个方块 <span
class="math inline">\(p\)</span>，满足 <span class="math inline">\(p \in
[l,r]\)</span> 且 <span class="math inline">\([p,r]\)</span>
均为同色方块，则右端一共有 <span class="math inline">\(r-p+k+1\)</span>
个同色方块。</p>
<ul>
<li><p>直接消去最右端的一部分，<span
class="math inline">\(f(l,r,k)=f(l,p-1,0)+(r-p+k+1)^2\)</span>。</p></li>
<li><p>找到一点 <span class="math inline">\(q\)</span>，满足 <span
class="math inline">\(q\)</span> 与 <span
class="math inline">\(q+1\)</span> 不同色且 <span
class="math inline">\(q\)</span> 与 <span
class="math inline">\(r\)</span> 同色，单独处理 <span
class="math inline">\([q+1,p-1]\)</span>
这一段（想象一下拿走这一段），然后 <span
class="math inline">\([l,q]\)</span> 就挨着 <span
class="math inline">\(r-p+k+1\)</span>
个同色方块了。下图问号是要求出的部分，斜杠代表同色，注意 <span
class="math inline">\(q\)</span> 也是。</p></li>
</ul>
<p><span class="math display">\[
  f(l,r,k) = \max{ \{ f(l,q,r-p+k+1) + f(q+1,p-1,0) \} }
\]</span></p>
<figure>
<img data-src="https://s2.loli.net/2022/01/30/Bmb4Pgf5zvhu6sM.png"
alt="第二种转移" />
<figcaption aria-hidden="true">第二种转移</figcaption>
</figure>
<p>这样就完成了区间的分割与拼接，这两种决策取个最大值就是答案了。最终答案
<span class="math inline">\(f(1,n,0)\)</span>。</p>
<p> </p>
<p>时间复杂度 <span
class="math inline">\(O(n^4)\)</span>，实际上远远到达不了这个规模。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">205</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> _<span class="token punctuation">,</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">squ</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">squ</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token operator">=</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> p<span class="token operator">=</span>r<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">>=</span>l<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span>p<span class="token punctuation">;</span>
    <span class="token operator">++</span>p<span class="token punctuation">;</span> <span class="token comment">// 注意这里</span>
    x<span class="token operator">=</span><span class="token function">dp</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">squ</span><span class="token punctuation">(</span>r<span class="token operator">-</span>p<span class="token operator">+</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token operator">=</span>l<span class="token punctuation">;</span>q<span class="token operator">&lt;</span>r<span class="token punctuation">;</span><span class="token operator">++</span>q<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token operator">!=</span>a<span class="token punctuation">[</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token function">dp</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>q<span class="token punctuation">,</span>r<span class="token operator">-</span>p<span class="token operator">+</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">dp</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// f[l][r][k]=-1代表未计算</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: %d\n"</span><span class="token punctuation">,</span><span class="token operator">++</span>_<span class="token punctuation">,</span><span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不爆int，好评</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token operator">--</span><span class="token punctuation">;</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>区间DP</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa1099 Sharing Chocolate 题解</title>
    <url>/2022/uva1099-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>设 <span class="math inline">\(f(x,y,S) = 0/1\)</span>
为当前巧克力长为 <span class="math inline">\(x\)</span>，宽为 <span
class="math inline">\(y\)</span>，选出的 <span
class="math inline">\(a_i\)</span> 集合为 <span
class="math inline">\(S\)</span> 时，能否成功分割。</p>
<p>这样状态数有 <span class="math inline">\(xy \cdot 2^n\)</span>
个，过多。</p>
<p>设集合 <span class="math inline">\(S\)</span> 中元素的面积和为 <span
class="math inline">\(sum_S\)</span>。仔细观察不难发现：能够分割成功，当且仅当
<span class="math inline">\(sum_S = xy\)</span>。</p>
<p>所以我们就可以只计算满足以上条件的状态。并且在满足以上条件的状态中，知道
<span class="math inline">\(x\)</span> 和 <span
class="math inline">\(y\)</span> 其中一个就能直接计算出另一个。</p>
<p>所以设 <span class="math inline">\(f(x,S) = 0/1\)</span>
为当前巧克力较短（较长也可以）边长为 <span
class="math inline">\(x\)</span>，选出的 <span
class="math inline">\(a_i\)</span> 集合为 <span
class="math inline">\(S\)</span> 时，能否成功分割。</p>
<span id="more"></span>
<p> </p>
<p>先考虑特殊情况。</p>
<p>设全集为 <span class="math inline">\(U\)</span>，集合 <span
class="math inline">\(S\)</span> 中面积的和为 <span
class="math inline">\(sum_S\)</span>。若 <span
class="math inline">\(sum_U \neq xy\)</span>，那么无解。</p>
<p>如果在有解的情况下，集合 <span class="math inline">\(S\)</span>
中只有一个元素，那么一定有解。</p>
<p>  再考虑转移。</p>
<p>设 <span class="math inline">\(S_0 \subseteq S\)</span>。</p>
<p>考虑到如果 <span class="math inline">\(S\)</span> 有解，那么 <span
class="math inline">\(S_0\)</span> 一定有解，并且 <span
class="math inline">\(S - S_0\)</span> 也一定优解。</p>
<p>那么转移的方法就呼之欲出了。</p>
<p>枚举 <span class="math inline">\(S\)</span> 的所有子集，设 <span
class="math inline">\(x_0= \min{ \{ x,sum_{S_0}/x\} }\)</span>，<span
class="math inline">\(x_1 = \min{ \{ x,sum_{S_1}/x\} }\)</span>。</p>
<p>这里进行一下数学分析……</p>
<blockquote>
<p>已知 <span class="math inline">\(sum_S =
sum_{S_0}+sum_{S_1}\)</span>，<span class="math inline">\(sum_s =
xy\)</span>，显然 <span class="math inline">\(x \mid
sum_S\)</span>。</p>
<p>但 <span class="math inline">\(x\)</span> 不一定都整除 <span
class="math inline">\(sum_{s_0}\)</span> 和 <span
class="math inline">\(sum_{s_1}\)</span>。举个例子：</p>
<p><span class="math inline">\(x=2, y=5\)</span></p>
<p><span class="math inline">\(xy = 5+5=10\)</span></p>
<p><span class="math inline">\(x \nmid 5\)</span></p>
<p>这样就会转移到错误状态。</p>
<p>可以通过「切一刀后有一条边长不变」来理解。</p>
</blockquote>
<p>所以为了达到正确的状态，求出 <span class="math inline">\(y= sum_S /
x\)</span>，<span class="math inline">\(y_0,y_1\)</span> 同上。</p>
<p><span class="math display">\[
f(x,S) = \begin{cases}
1 &amp; f(x_0/y_0,S_0) = f(x_1/y_1,S_1)=1 \\
0 &amp; \text{otherwise}
\end{cases}
\]</span></p>
<p>这里的斜杠是“或”的意思。</p>
<p>最终答案即为 <span class="math inline">\(f(\min{\{
x,y\}},U)\)</span>，直接记忆化搜索就行了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">105</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> _<span class="token punctuation">,</span> n<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> U<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">cnt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> a<span class="token operator">+=</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// f[x][s]=-1 表示未计算</span>
    <span class="token keyword">int</span><span class="token operator">&amp;</span> dlt<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cnt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dlt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 特判只有一个元素的集合</span>
    <span class="token keyword">int</span> y<span class="token operator">=</span>sum<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">/</span>x<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> s0<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">;</span>s0<span class="token punctuation">;</span>s0<span class="token operator">=</span><span class="token punctuation">(</span>s0<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> s1<span class="token operator">=</span>s<span class="token operator">^</span>s0<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>s0<span class="token punctuation">]</span><span class="token operator">%</span>x<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">dp</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>sum<span class="token punctuation">[</span>s0<span class="token punctuation">]</span><span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>s0<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">dp</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>sum<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dlt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>s0<span class="token punctuation">]</span><span class="token operator">%</span>y<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">dp</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>sum<span class="token punctuation">[</span>s0<span class="token punctuation">]</span><span class="token operator">/</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>s0<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">dp</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>sum<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token operator">/</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dlt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 被x或y整除才去计算这个状态</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> dlt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">memset</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    U<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token operator">&lt;=</span>U<span class="token punctuation">;</span><span class="token operator">++</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 预处理所有集合的sum</span>
    <span class="token keyword">bool</span> fg<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>U<span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span> fg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">else</span> fg<span class="token operator">=</span><span class="token function">dp</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>U<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 特判</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: %s\n"</span><span class="token punctuation">,</span><span class="token operator">++</span>_<span class="token punctuation">,</span>fg<span class="token operator">?</span> <span class="token string">"Yes"</span><span class="token operator">:</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>n<span class="token punctuation">;</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA11600 Masud Rana 题解</title>
    <url>/2022/uva11600-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>不经过有怪物的边到达的点，他们对答案产生的贡献是相同的。所以把能够不经过有怪物的边到达的点集分别缩成一个点。</p>
<p>问题就转化为了，期望走多少次，才能遍历缩点后的图。</p>
<span id="more"></span>
<p>设 <span class="math inline">\(f(S)\)</span> 为当前经过的点集为 <span
class="math inline">\(S\)</span> 时，还需要的最小期望次数。</p>
<p>设当前集合 <span class="math inline">\(S\)</span> 中共有 <span
class="math inline">\(sz_S\)</span> 个原图的点，点 <span
class="math inline">\(j\)</span> 中有 <span
class="math inline">\(sz_j\)</span> 个原图的点。称为这个点的大小。 <span
class="math display">\[
f(S) = \frac{sz_S-1}{n-1} \cdot \Big( f(S)+1 \Big) + \sum_{j \notin S}
{\frac{sz_j}{n-1} \cdot \Big( f(S \cup \{j\}) + 1} \Big)
\]</span> 选到 <span class="math inline">\(S\)</span> 内的点，概率为
<span
class="math inline">\(\frac{sz_S-1}{n-1}\)</span>，注意不能选到自己所在的点。那么就要在
<span class="math inline">\(S\)</span> 里面多留一天，权值为 <span
class="math inline">\(f(S)+1\)</span>。选到 <span
class="math inline">\(S\)</span> 外的点 <span
class="math inline">\(j\)</span>，由于点的大小不同，所以概率也不同，进而权值也不同。选到哪个点就将它加入几何中并呆上一天。</p>
<p>显然求不出来这个式子，化简。</p>
<p>令 <span class="math inline">\(P = \frac{sz_S-1}{n-1}\)</span>，<span
class="math inline">\(p_j = \frac{sz_j}{n-1}\)</span>。</p>
<p>则 <span class="math display">\[
f(S) = P \cdot \Big( f(S)+1 \Big) + \sum_{j \notin S} {p_j \cdot \Big(
f(S \cup \{j\}) + 1} \Big)
\]</span> <span class="math display">\[
f(S) \cdot (1-P) = P + \sum_{j \notin S} {p_j \cdot \Big( f(S \cup
\{j\}) + 1} \Big)
\]</span></p>
<p><span class="math display">\[
f(S) = \frac{ P + (n-sz_S) + \sum_{j \notin S} f(S \cup \{ j \}) } {1-P}
\]</span></p>
<p>代入，得 <span class="math display">\[
f(S) = \frac{n-1}{n-sz_S} + \sum_{j \notin S} { f(S \cup \{j\}) \cdot
\frac{sz_j}{n-sz_s}}
\]</span>
转移是显式的拓扑序，可以记忆化搜索。但由于是无向图，所以不必考虑边的问题。答案是
<span class="math inline">\(f(1)\)</span>。</p>
<p>复杂度 <span class="math inline">\(O(2^n)\)</span>，状态数量有 <span
class="math inline">\(2^n\)</span> 个，数组开不下，可以用 map 存。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pb</span> <span class="token expression">push_back</span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">35</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> _<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> num<span class="token punctuation">,</span> sz<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// num 缩点后点的个数，sz[i]缩点后第i个点的大小</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 存没有怪物的边</span>
map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> f<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> sz<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> y<span class="token operator">=</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> sz<span class="token operator">+=</span><span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> sz<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">double</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1e-9</span><span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意精度</span>
	<span class="token keyword">int</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> tot<span class="token operator">+=</span>sz<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// tot 集合s的节点个数</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>tot<span class="token operator">==</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 已经遍历完整张图</span>
	f<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.0</span><span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token operator">-</span>tot<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>s<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		f<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token function">dp</span><span class="token punctuation">(</span>s<span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>sz<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1.0</span><span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token operator">-</span>tot<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> f<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	f<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sz<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
		w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> sz<span class="token punctuation">[</span>num<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 预处理，缩点</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: %lf\n"</span><span class="token punctuation">,</span><span class="token operator">++</span>_<span class="token punctuation">,</span><span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>概率论</tag>
        <tag>数学期望</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA11762 Race to 1 题解</title>
    <url>/2022/uva11762-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>设 <span class="math inline">\(f(x)\)</span> 为 <span
class="math inline">\(x\)</span> 变成 1 需要的最小期望次数。</p>
<p>对于 <span class="math inline">\(x\)</span> 选到的质数 <span
class="math inline">\(y\)</span>，只有两种决策：</p>
<ol type="1">
<li><span class="math inline">\(y \mid x\)</span>，那么转移到 <span
class="math inline">\(f(\frac{x}{y})\)</span>。</li>
<li><span class="math inline">\(y \nmid x\)</span>，那么有转移到 <span
class="math inline">\(f(x)\)</span>。</li>
</ol>
<span id="more"></span>
<p><del>是一张有向有自环的图</del>。</p>
<p>所以设 <span class="math inline">\(P_x\)</span> 为 <span
class="math inline">\(x\)</span> 的质约数集合，<span
class="math inline">\(p(x)\)</span> 为小于 <span
class="math inline">\(x\)</span> 的质数个数，其中有 <span
class="math inline">\(g(x)\)</span> 个 <span
class="math inline">\(x\)</span> 的约数。</p>
<p>由全期望公式得到转移 <span class="math display">\[
f(x) = 1 + f(x) \cdot (1-\frac{g(x)}{p(x)}) + \sum _{y \in P_x} {
f(\frac{x}{y}) \cdot \frac{1}{p(x)} }
\]</span> 1 表示要变化 <span class="math inline">\(x\)</span>
一次，第二项是要转移到 <span class="math inline">\(f(x)\)</span>
的概率乘相应的期望，第三项是转移到 <span
class="math inline">\(x\)</span>
的不同约数，分别乘它们的概率，最后加起来。这三项的和就是答案。</p>
<p>但是实际用记忆化搜索实现时容易死循环，要化简它。</p>
<p>展开它 <span class="math display">\[
f(x) = 1 + f(x) \cdot 1-\frac{f(x)g(x)}{p(x)} +  \frac{\sum _{y \in P_x}
{ f(\frac{x}{y})}} {p(x)}
\]</span> 移项 <span class="math display">\[
\frac{f(x)g(x)}{p(x)} = 1 + \frac{\sum _{y \in P_x} { f(\frac{x}{y})}}
{p(x)}
\]</span> 同乘 <span class="math inline">\(p(x)\)</span>，再移项 <span
class="math display">\[
f(x) = \frac{\sum _{y \in P_x} { f(\frac{x}{y})} + p(x)} {g(x)}
\]</span> 这样就可以记忆化搜索了。</p>
<p>注意要预处理范围内的所有质数。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> _<span class="token punctuation">,</span> l<span class="token punctuation">,</span> n<span class="token punctuation">,</span> pr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">primes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1e6</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> pr<span class="token punctuation">[</span><span class="token operator">++</span>l<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>i<span class="token operator">*</span>pr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">1e6</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			v<span class="token punctuation">[</span>i<span class="token operator">*</span>pr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i<span class="token operator">%</span>pr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
    <span class="token comment">// 线性筛预处理[1,10^6]之间的质数</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">double</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// vis[]与f[]不必清空，因为对于同样的x，对应的f[x]肯定是一样的</span>
    <span class="token comment">// 相当于“跨数据记忆化”</span>
	vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> g<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>pr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>x<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token operator">++</span>p<span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token operator">%</span>pr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>g<span class="token punctuation">,</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token function">dp</span><span class="token punctuation">(</span>x<span class="token operator">/</span>pr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>p<span class="token punctuation">)</span><span class="token operator">/</span>g<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: %.10lf\n"</span><span class="token punctuation">,</span><span class="token operator">++</span>_<span class="token punctuation">,</span><span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">primes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>概率论</tag>
        <tag>数学期望</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA12170 Easy Climb 题解</title>
    <url>/2022/uva12170-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>老样子，先判断无解情况。</p>
<p>我们假设 <span class="math inline">\(h_n\)</span> 无限高于或者低于
<span class="math inline">\(h_1\)</span>，那么中间的那些都必须尽力去逼近
<span
class="math inline">\(h_n\)</span>，一定是递增或递减的。但由于相邻的两堆石头高度差不能超过
<span class="math inline">\(d\)</span>，所以递增或递减的最大长度为 <span
class="math inline">\((n-1) \cdot d\)</span>。如果 <span
class="math inline">\(|h_n-h_1| &gt; (n-1) \cdot
d\)</span>，那么肯定是无解。反过来想，如果不大于，那么一定存在合法的构造方法，即一定有解。</p>
<span id="more"></span>
<p>手算以下不难发现，对于每一个 <span
class="math inline">\(i\)</span>，都有 <span class="math display">\[
h_i&#39; \in [\max{(h_{i-1},h_{i+1})-d,\min{(h_{i-1},h_{i+1})+d}}]
\]</span> 那么如果 <span class="math inline">\(h_i\)</span>
不在区间内，将其变为距离它最近的区间边界是最优的，因为差值最小。</p>
<p>如果 <span class="math inline">\(h_i\)</span>
在区间内，那么可以让它不变，这样贡献为 0。</p>
<p>如果这样去做了，那么对于每个 <span class="math inline">\(h_i
&#39;\)</span>，都能写成 <span class="math inline">\(h_x+kd \quad (x \in
[1,n],k \in [-n,n])\)</span> 的形式。</p>
<p>感性证明一下，如果改变 <span class="math inline">\(h_i\)</span>
的值，那么一定是在某个现有的 <span class="math inline">\(h_i\)</span> 或
<span class="math inline">\(h_i&#39;\)</span> 的基础加上过减去 <span
class="math inline">\(d\)</span>；如果不改变，令 <span
class="math inline">\(k=0\)</span>
即成立。严格证明可以用归纳法，这里不再赘述。</p>
<p>所以所有可能的值的个数为 <span
class="math inline">\(2n^2\)</span>，记为 <span
class="math inline">\(a\)</span>。</p>
<p>设 <span class="math inline">\(f(i,j)\)</span> 表示前 <span
class="math inline">\(i\)</span> 堆石头，第 <span
class="math inline">\(i\)</span> 堆的高度为 <span
class="math inline">\(j\)</span> 时，所需要的最小代价。</p>
<p>边界</p>
<p><span class="math display">\[
f(i,j) = \begin{cases}
0 &amp; i=0,j=h_1
\\
\inf &amp; \text{otherwise}
\end{cases}
\]</span></p>
<p>转移</p>
<p><span class="math display">\[
f(i,j) = \min \limits_{j-d \le k \le j+d} { \{ f(i-1,k)+ |a_i-j| \} }
\]</span></p>
<p><span class="math display">\[
f(i,j) = \min \limits_{j-d \le k \le j+d} { \{ f(i-1,k) \} } + |a_i - j|
\]</span></p>
<p>滚动数组+单调队列优化即可。</p>
<p>最终答案 <span class="math display">\[
ans= \max{\{ f(n-1,i) \}} \quad |h_n-i| \le d
\]</span></p>
<p><strong>由于 <span class="math inline">\(j\)</span>
这一维值域过大，具体实现时可以离散化，这一维存下标。</strong></p>
<p>状态数 <span class="math inline">\(n^2\)</span> 个，决策 <span
class="math inline">\(n\)</span> 个，转移 <span
class="math inline">\(O(1)\)</span>，总复杂度 <span
class="math inline">\(O(n^3)\)</span>。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">105</span><span class="token punctuation">,</span> M<span class="token operator">=</span>N<span class="token operator">*</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> d<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll ans<span class="token punctuation">,</span> a<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token operator">-</span>n<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token operator">*</span>d<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 高度不会小于0</span>
            a<span class="token punctuation">[</span><span class="token operator">++</span>m<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token operator">*</span>d<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>a<span class="token punctuation">;</span>
    <span class="token comment">// 离散化去重，现在和h[i]存的是原来h[i]在a中的位置。</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ans<span class="token operator">=</span><span class="token number">1e15</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>h<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token comment">// 无解</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">)</span> <span class="token operator">++</span>l<span class="token punctuation">;</span>
            <span class="token comment">// 排除不合法（越界）的决策。</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span>m<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token operator">++</span>k<span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>f<span class="token punctuation">[</span>p<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>=</span>f<span class="token punctuation">[</span>p<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span>r<span class="token punctuation">;</span>
                <span class="token comment">// 维护决策单调增</span>
                q<span class="token punctuation">[</span><span class="token operator">++</span>r<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> f<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>p<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 队头即使最优决策。</span>
        <span class="token punctuation">&#125;</span>
        p<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>h<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>d<span class="token punctuation">)</span>
        ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>p<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token operator">--</span><span class="token punctuation">;</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA1336 修缮长城 题解</title>
    <url>/2022/uva1336-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>水一篇题解</p>
<span id="more"></span>
<h2 id="分析">分析</h2>
<p>将多游修理点按照位置递增排序。由于经过一个点便会立即修复它，所以每次被修复的点一定是一个连续的区间。由于修完一个区间后处于左右端点有后效性，要加进状态里。这样状态就出来了。</p>
<p>不难发现，最终答案能转化为
每个点立即修复的花费+增长的花费。我们只计算后者就好了。</p>
<p>设 <span class="math inline">\(f(i,j,p)\)</span> 为修完区间 <span
class="math inline">\([i,j]\)</span>，处于 <span
class="math inline">\(p\)</span> 时增长的最小花费。<span
class="math inline">\(p=0\)</span> 时在 <span
class="math inline">\(i\)</span>，<span
class="math inline">\(p=1\)</span> 时在 <span
class="math inline">\(j\)</span>。</p>
<p>对于要修理的区间 <span class="math inline">\([i,j]\)</span>，<span
class="math inline">\([1,i-1] \cup [j+1,n]\)</span> 都会增长 <span
class="math inline">\(\frac{|x_j-x_j|}{v}\)</span> 个 <span
class="math inline">\(\Delta\)</span>。所以我们将 <span
class="math inline">\(\Delta\)</span> 求出前缀和数组 <span
class="math inline">\(g\)</span>，这样就可以快速计算这个区间外增长的量。即
<span class="math display">\[
F(x_i,x_j,i,j) = \frac{|x_i-x_j|}{v} \cdot g(n) - [g(j)-g(i-1)]\ \quad i
\le j
\]</span> 特别地，当 <span class="math inline">\(i=j=0\)</span> 时 <span
class="math display">\[
F(x_i,x_j,0,0) = \frac{|x_i-x_j|}{v} \cdot g(n)
\]</span> 转移显然有两种，对于区间 <span
class="math inline">\([i,j]\)</span>，一是转移到 <span
class="math inline">\([i-1,j]\)</span>，二是转移到 <span
class="math inline">\([i,j+1]\)</span>。再加上分别增长的量就好了。下面定义当
<span class="math inline">\(p=0\)</span> 时，<span
class="math inline">\(P=x_i\)</span>，反之 <span
class="math inline">\(P=x_j\)</span>。 <span class="math display">\[
f(i,j,p) = \min \begin{cases} f(i-1,j,0)+F(P,x_{i-1},i,j)
\\
f(i,j+1,1)+F(P,x_{j+1},i,j)
\end{cases}
\]</span> 开始先找到 <span class="math inline">\(X\)</span>
左右的两个点，分别转移到这两个点上，取最小值就是答案了。</p>
<p>转移的时候注意判断边界。</p>
<p>最后看代码吧。</p>
<p>复杂度 <span class="math inline">\(O(n^2)\)</span>。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1006</span><span class="token punctuation">,</span> inf<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">;</span>
<span class="token keyword">double</span> v<span class="token punctuation">,</span> x<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">O</span> <span class="token punctuation">&#123;</span> <span class="token keyword">double</span> x<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>O a<span class="token punctuation">,</span>O b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token keyword">double</span> x1<span class="token punctuation">,</span><span class="token keyword">double</span> x2<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>j<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> dlt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> dlt<span class="token operator">+=</span>g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>g<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">-</span>dlt<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">fabs</span><span class="token punctuation">(</span>x2<span class="token operator">-</span>x1<span class="token punctuation">)</span><span class="token operator">/</span>v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">==</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span><span class="token operator">&amp;</span> w<span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> w<span class="token punctuation">;</span>
    vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> w<span class="token operator">=</span>inf<span class="token punctuation">;</span>
    <span class="token keyword">double</span> x<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token operator">?</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">:</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> w<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span><span class="token function">dp</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">F</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">)</span> w<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span><span class="token function">dp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">F</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>s<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> w<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%lf%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span>
    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token operator">-</span>inf<span class="token punctuation">,</span> s<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>ans<span class="token operator">=</span>inf<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">dp</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">F</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">dp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">F</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%lf%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>n<span class="token punctuation">;</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>区间DP</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa1443 Garlands 题解</title>
    <url>/2022/uva1443-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>先判断无解的情况。</p>
<p>由于每一段都要非 0 的偶数朵花，那么当 <span
class="math inline">\(n\)</span> 为奇数时显然无解。</p>
<p>用 <span class="math inline">\(m\)</span> 个点固定，就是分成了 <span
class="math inline">\(m-1\)</span> 段。每个半段不能超过 <span
class="math inline">\(d\)</span> 朵，那么总数最多为 <span
class="math inline">\(2 d \cdot (m-1)\)</span>，最少为 <span
class="math inline">\(2 \cdot m\)</span>。所以当 <span
class="math inline">\(n\)</span> 大于最大值，小于最小值时，无解。</p>
<span id="more"></span>
<p> </p>
<p>题目要求最小的半段重量的最大值，可以二分答案。我们定义 <span
class="math inline">\(check(x)\)</span> 为半段重量最大为 <span
class="math inline">\(x\)</span> 时，能否划分成 <span
class="math inline">\(m-1\)</span> 段。</p>
<p>可以用 DP 来判断。设 <span class="math inline">\(f_i\)</span> 为前
<span class="math inline">\(i\)</span>
朵花在满足限制的情况下最少分成多少段？不行。不难发现，奇数段只能从偶数段转移而来，偶数段只能从奇数段转移而来。不记录奇偶性的话会产生后效性。</p>
<p>所以设 <span class="math inline">\(f_{i,j}\)</span> 为前 <span
class="math inline">\(i\)</span>
朵花在满足限制的情况下最少分成多少段，且段数奇数或偶数。当 <span
class="math inline">\(j=0\)</span> 时为偶数，<span
class="math inline">\(j=1\)</span> 时为奇数。</p>
<p>边界 <span class="math display">\[
f_{i,j} = \begin{cases}
0 &amp; i = j = 0 \\
\inf &amp; otherwise
\end{cases}
\]</span> 转移。这个就比较显然了。 <span class="math display">\[
\begin{cases}
f_{i,0} = \min{ \{ f_{j,1} + 1 \} }
\\
f_{i,1} = \min{ \{ f_{j,0} + 1 \} }
\end{cases}
\]</span> 其中 <span class="math inline">\([j+1,i]\)</span>
这一段有偶数朵花且不超过 <span class="math inline">\(2d\)</span>。</p>
<p>如果 <span class="math inline">\(m\)</span>
是奇数，最终一定有偶数段，如果 <span class="math inline">\(m\)</span>
是偶数，最终一定有奇数段。所以答案为 <span
class="math inline">\(f_{n,(m-1) \% 2}\)</span>。</p>
<p>具体实现中要考虑半段的变化，最好结合 pdf 里的图看看。</p>
<p>复杂度 <span class="math inline">\(O(n^2 \log_2 n)\)</span>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">4e4</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> d<span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0x7f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>d<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 保证i是偶数。 j是半段长度，保证它不超过d与i/2</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token operator">></span>x<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">// 靠后的半段超重了，随着j的增加它的重量单调增</span>
        <span class="token comment">// 所有的j都不能满足条件了，所以直接跳过这个i</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token punctuation">]</span><span class="token operator">></span>x<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token comment">// 长度为j的半段超重了，但随着j的增加它会整体向后移动</span>
        <span class="token comment">// 可能还有满足条件的半段，直接往后找</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token operator">||</span>n<span class="token operator">></span><span class="token number">2</span><span class="token operator">*</span>d<span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">||</span>n<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"BAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">=</span>s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span> <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token operator">--</span><span class="token punctuation">;</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA1623 神龙喝水 题解</title>
    <url>/2022/uva1623-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p>贪心。</p>
<p>维护一个集合 <span
class="math inline">\(S\)</span>，保存不下雨的日期。设 <span
class="math inline">\(g(x)\)</span> 为第 <span
class="math inline">\(x\)</span> 个湖上一次下雨是第 <span
class="math inline">\(g(x)\)</span> 天，起初全部为 0。</p>
<span id="more"></span>
<ol type="1">
<li><p>对于一个 <span class="math inline">\(a_i = 0\)</span>，直接把
<span class="math inline">\(i\)</span> 加入 <span
class="math inline">\(S\)</span>。</p></li>
<li><p>对于一个 <span class="math inline">\(a_i &gt; 0\)</span>，设
<span class="math inline">\(d=a_i\)</span>，在集合中查找不小于 <span
class="math inline">\(g(d)\)</span>
的最小的日期。如果没有，无解。否则更新 <span
class="math inline">\(g(d)=i\)</span> ，记录答案，并在 <span
class="math inline">\(S\)</span> 中删去找到的日期。</p></li>
</ol>
<p>正确性？如果一天下雨的时候，下雨的那个湖不能在那一天之前，最后一次下雨之后喝干，那么肯定就溢出。否则就一定不会溢出。</p>
<p>最优性？由于是按照时间顺序处理的，选择最小的喝水日期一定不劣，不选择最小的喝水日期一定不优。</p>
<p>就像下面，第 <span class="math inline">\(u\)</span> 天 <span
class="math inline">\(i\)</span> 要下雨，如果选择 4，那么 <span
class="math inline">\(v\)</span> 天 <span
class="math inline">\(j\)</span>
要下雨的时候就没得选了。如果按照上面的贪心，则是有解的。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">S<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span>
g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span>
a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>j  u<span class="token operator">&lt;</span>v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>就氵吧。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">iter</span> <span class="token expression">set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator</span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span>
iter p<span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> fg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> d<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            p<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> g<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token operator">*</span>p<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fg<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token operator">--</span><span class="token punctuation">;</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA1664 Conquer a New Region 题解</title>
    <url>/2022/uva1664-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>实在不会表达了，直接上代码 <del>orz</del>。</p>
<span id="more"></span>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">edge</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>edge a<span class="token punctuation">,</span>edge b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>z<span class="token operator">></span>b<span class="token punctuation">.</span>z<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token operator">==</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">?</span> x<span class="token operator">:</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">uni</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>cnt<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">*</span>z<span class="token operator">></span>sum<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span>cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">*</span>z<span class="token punctuation">)</span>
        f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">,</span> sum<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>cnt<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">*</span>z<span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>cnt<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> sum<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+=</span>cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">*</span>z<span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+=</span>cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">uni</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>yozora Round 2</title>
    <url>/2021/yozora-Round-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="yozora-round-2">yozora Round 2</h2>
<p>本人每日练习记录。</p>
<span id="more"></span>
<p> </p>
<p><span class="math inline">\(\huge \mathcal{yozora}\)</span>
是日语中「よぞら」的罗马音，汉字写作「夜空」。</p>
<p> </p>
<h3 id="t1">T1</h3>
<p><a href="https://www.luogu.com.cn/problem/P2986">Great Cow
Gathering</a></p>
<p>单独写了题解。</p>
<p><a href="https://miku01ck.xyz/2021-08/lg2986-solution/">link</a></p>
<p> </p>
<h3 id="t2">T2</h3>
<p><a href="https://loj.ac/p/2165">Dynamite</a></p>
<p>单独写题解。</p>
<p>在写了在写了……</p>
<p> </p>
<h3 id="t3">T3</h3>
<p><a href="https://www.luogu.com.cn/problem/P5094">MooFest</a></p>
<p>两个树状数组维护就行了，细节较多。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
ll ans<span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">E</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>E a<span class="token punctuation">,</span>E b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>y<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>ll y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span><span class="token number">5e4</span><span class="token punctuation">;</span>x<span class="token operator">+=</span>x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> c<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
ll <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R ll y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>x<span class="token punctuation">;</span>x<span class="token operator">-=</span>x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> y<span class="token operator">+=</span>c<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    R ll x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        x<span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans<span class="token operator">+=</span><span class="token punctuation">(</span>x<span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        ans<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>z<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>i<span class="token operator">-</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token function">modify</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">modify</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        z<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> </p>
<h3 id="t4">T4</h3>
<p><a href="https://www.luogu.com.cn/problem/P6278">Haircut</a></p>
<p>树状数组维护逆序对数量的偏移量。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span><span class="token number">1e5</span><span class="token punctuation">;</span>x<span class="token operator">+=</span>x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
ll <span class="token function">query</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R ll y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>x<span class="token punctuation">;</span>x<span class="token operator">-=</span>x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> y<span class="token operator">+=</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    R ll dlt<span class="token punctuation">,</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        dlt<span class="token operator">=</span>n<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token function">query</span><span class="token punctuation">(</span>dlt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">modify</span><span class="token punctuation">(</span>dlt<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> </p>
<h3 id="t5">T5</h3>
<p><a href="https://www.luogu.com.cn/problem/P3627">抢掠计划</a></p>
<p>Tarjan 算法求出 SCC，缩点建新图，按拓扑序 DP 最长路即可。</p>
<p>因为建新图的<code>add()</code>函数写错了，我竟然调了一个小时（</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> p<span class="token punctuation">,</span> num<span class="token punctuation">,</span> k<span class="token punctuation">,</span> scc<span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sw<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> stk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ans<span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tc<span class="token punctuation">,</span> hc<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> vc<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> nc<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">cad</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> vc<span class="token punctuation">[</span><span class="token operator">++</span>tc<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nc<span class="token punctuation">[</span>tc<span class="token punctuation">]</span><span class="token operator">=</span>hc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> hc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>tc<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>num<span class="token punctuation">,</span> stk<span class="token punctuation">[</span><span class="token operator">++</span>k<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">,</span> v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">++</span>scc<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
            y<span class="token operator">=</span>stk<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>scc<span class="token punctuation">;</span>
            sw<span class="token punctuation">[</span>scc<span class="token punctuation">]</span><span class="token operator">+=</span>w<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> B<span class="token punctuation">[</span>scc<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">cad</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span>scc<span class="token punctuation">;</span>x<span class="token punctuation">;</span><span class="token operator">--</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>sw<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>hc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            y<span class="token operator">=</span>vc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// freopen("data_\\P3627_3.in","r",stdin);</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>p<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">tarjan</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> </p>
<h3 id="t6">T6</h3>
<p><a href="https://www.luogu.com.cn/problem/P2966">Cow Toll
Paths</a></p>
<p>有点玄学的题目。</p>
<p>实际上就是个 Floyd。</p>
<p>但一定要注意点权排序后的顺序问题。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SET</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">260</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> rk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">E</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> z<span class="token punctuation">,</span> id<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>E a<span class="token punctuation">,</span>E b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>z<span class="token operator">!=</span>b<span class="token punctuation">.</span>z<span class="token operator">?</span> a<span class="token punctuation">.</span>z<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>z<span class="token operator">:</span>a<span class="token punctuation">.</span>id<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
    <span class="token function">SET</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SET</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> rk<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>m <span class="token operator">--</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        d<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rk<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rk<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rk<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">rep</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token function">rep</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">,</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">--</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dis<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rk<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> </p>
<h3 id="t7">T7</h3>
<p><a href="https://www.luogu.com.cn/problem/P2860">Redundant
Paths</a></p>
<p>初看觉得有些奇怪，仔细思考不难发现就是 Tarjan 算法求出
e-DCC，缩点后统计叶子节点的数量 <span class="math inline">\(\large
ans\)</span>，<span class="math inline">\(\large (ans+1) \div 2\)</span>
即为答案。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5005</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">10005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> num<span class="token punctuation">,</span> dcc<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> deg<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ver<span class="token punctuation">[</span>M<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ver<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
    dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>num<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&lt;</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token punctuation">(</span>in<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>dcc<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> <span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>dcc<span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnt<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        x<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>ver<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>deg<span class="token punctuation">[</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>dcc<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>deg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>ans<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>yozora Round</category>
      </categories>
      <tags>
        <tag>yozora Round</tag>
      </tags>
  </entry>
  <entry>
    <title>yozora Round 3</title>
    <url>/2021/yozora-Round3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="yozora-round-3">yozora Round 3</h2>
<p>8.24</p>
<span id="more"></span>
<p> </p>
<p><span class="math inline">\(\huge \mathcal{yozora}\)</span>
是日语中「よぞら」的罗马音，汉字写作「夜空」。</p>
<p> </p>
<h3 id="t1">T1</h3>
<p><a href="https://www.luogu.com.cn/problem/P2480">古代猪文</a></p>
<p>经典题目。</p>
<p><a
href="https://miku01ck.xyz/2021-08/lg2480-solution/">solution</a></p>
<p> </p>
<h3 id="t2">T2</h3>
<p><a href="https://www.luogu.com.cn/problem/P1463">反素数</a></p>
<p><span class="math inline">\(\large [1,n]\)</span>
中最大的反质数为满足约数个数最多的最小 <span
class="math inline">\(\large x\)</span></p>
<p><span class="math inline">\(\large \forall x \in
[1,n]\)</span>，至多有 10 个质因数。</p>
<p>将这两个条件证明后，搜索就行了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> ll p<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> ans<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1ll</span><span class="token operator">&lt;&lt;</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token number">1ll</span><span class="token operator">&lt;&lt;</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">,</span>ll z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">11ll</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">></span>cnt<span class="token operator">||</span><span class="token punctuation">(</span>z<span class="token operator">==</span>cnt<span class="token operator">&amp;&amp;</span>ans<span class="token operator">></span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> cnt<span class="token operator">=</span>z<span class="token punctuation">,</span> ans<span class="token operator">=</span>y<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    ll y0<span class="token operator">=</span>y<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>c<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>y0<span class="token operator">></span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>
        c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y0<span class="token punctuation">,</span>z<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        y0<span class="token operator">*=</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> </p>
<h3 id="t3">T3</h3>
<p><a href="https://loj.ac/p/2038">超能粒子炮·改</a></p>
<p>简直就是 <span class="math inline">\(\large lucas\)</span>
定理的模板题，就是加了个求和。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">2333</span><span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> t<span class="token punctuation">,</span> c<span class="token punctuation">[</span>mod<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>mod<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>mod<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>mod<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll <span class="token function">miku</span><span class="token punctuation">(</span>ll n<span class="token punctuation">,</span>ll k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span>k<span class="token operator">||</span>k<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span>mod<span class="token operator">&amp;&amp;</span>k<span class="token operator">&lt;</span>mod<span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">miku</span><span class="token punctuation">(</span>n<span class="token operator">/</span>mod<span class="token punctuation">,</span>k<span class="token operator">/</span>mod<span class="token punctuation">)</span><span class="token operator">*</span>c<span class="token punctuation">[</span>n<span class="token operator">%</span>mod<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">%</span>mod<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
ll <span class="token function">C</span><span class="token punctuation">(</span>ll n<span class="token punctuation">,</span>ll k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span>n<span class="token operator">/</span>mod<span class="token punctuation">,</span>k<span class="token operator">/</span>mod<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>s<span class="token punctuation">[</span>n<span class="token operator">%</span>mod<span class="token punctuation">]</span><span class="token punctuation">[</span>mod<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">miku</span><span class="token punctuation">(</span>n<span class="token operator">/</span>mod<span class="token punctuation">,</span>k<span class="token operator">/</span>mod<span class="token punctuation">)</span><span class="token operator">*</span>s<span class="token punctuation">[</span>n<span class="token operator">%</span>mod<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">%</span>mod<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>mod<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>mod<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>
            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>mod<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">--</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">C</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> </p>
<h3 id="t4">T4</h3>
<p><a href="https://www.luogu.com.cn/problem/P4778">Counting
swaps</a></p>
<p><a
href="https://miku01ck.xyz/2021-08/lg4778-solution/">solution</a></p>
<p> </p>
<h3 id="t5">T5</h3>
<p><a href="https://www.luogu.com.cn/problem/CF451E">Devu and
Flowers</a></p>
<p><a
href="https://miku01ck.xyz/2021-08/cf451e-solution/">solution</a></p>
<p> </p>
<h3 id="t6">T6</h3>
<p><a href="https://loj.ac/p/2652">Zap</a></p>
<p><a
href="https://miku01ck.xyz/2021-08/loj2652-solution/">solution</a></p>
<p> </p>
<h3 id="t7">T7</h3>
<p><a href="https://www.luogu.com.cn/problem/P2568">GCD</a></p>
<p><a
href="https://miku01ck.xyz/2021-08/lg2568-solution/">solution</a></p>
<p> </p>
<h3 id="t8">T8</h3>
<p><a
href="https://www.acwing.com/problem/content/199/">阶乘分解</a></p>
<p>由阶乘的性质易得</p>
<p><span class="math inline">\(\large n!\)</span> 的质因子 <span
class="math inline">\(\large p\)</span> 出现的次数为 <span
class="math inline">\(\large [1,n]\)</span> 中 <span
class="math inline">\(\large p\)</span> 出现的次数。</p>
<p>所以对于每个质因子 <span class="math inline">\(\large
p\)</span>，只需要计算 <span class="math display">\[
\large \sum_{p^k \le n} \lfloor \frac{n}{p^k} \rfloor
\]</span> 就能得到对应的 <span class="math inline">\(\large c\)</span>
。</p>
<p>证明略。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> pr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">PR</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> <span class="token punctuation">;</span>
        pr<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token operator">/</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token operator">*</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnt<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> p<span class="token operator">=</span>pr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>n<span class="token punctuation">;</span>j<span class="token punctuation">;</span>j<span class="token operator">/=</span>p<span class="token punctuation">)</span> c<span class="token operator">+=</span>j<span class="token operator">/</span>p<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> </p>
<h3 id="t9">T9</h3>
<p><a
href="https://www.acwing.com/problem/content/204/">最幸运的数字</a></p>
<p>找规律不难得到 <span class="math inline">\(\large n\)</span>
个8连在一起组成的数字为 <span class="math inline">\(\large 8 \times
(10^n-1)/9\)</span> 。</p>
<p>题目要求求出满足 <span class="math inline">\(\large L \mid 8
\times(10^x-1)/9\)</span> 的最小 <span class="math inline">\(\large
x\)</span> 。</p>
<p>我们令 <span class="math inline">\(\large
d=\gcd(L,8)\)</span>，则可化为 <span class="math display">\[
\large 9 \times L \mid 8 \times(10^x-1)
\]</span></p>
<p><span class="math display">\[
\large \frac{9L}{d} \mid 10^x-1
\]</span></p>
<p><span class="math display">\[
10^x \equiv 1 \, (\bmod \frac{9L}{d})
\]</span></p>
<p>我们有 <span class="math display">\[
\large \text{若 $a,n$ 互质，则满足 } a^x \equiv 1 \, (\bmod n) \text{
的最小 $x \mid \phi(n)$ }
\]</span> 证明请看 lyd 蓝书。</p>
<p>所以我们只需要枚举 $() $ 的所有约数并且检查每个约数 <span
class="math inline">\(\large p_i\)</span> 是否满足 <span
class="math display">\[
\large 10^{p_i} \bmod \frac{9L}{d} = 1
\]</span> 即可</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
ll L<span class="token punctuation">,</span> t<span class="token punctuation">,</span> d<span class="token punctuation">,</span> k<span class="token punctuation">,</span> p<span class="token punctuation">,</span> s<span class="token punctuation">;</span>
ll <span class="token function">gcd</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> y<span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token operator">%</span>y<span class="token punctuation">)</span><span class="token operator">:</span>x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
ll <span class="token function">mul</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">,</span>ll p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ll z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>y<span class="token punctuation">;</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%=</span>p<span class="token punctuation">,</span>y<span class="token operator">>>=</span><span class="token number">1ll</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&amp;</span><span class="token number">1ll</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>z<span class="token operator">+=</span>x<span class="token punctuation">)</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>
    <span class="token keyword">return</span> z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
ll <span class="token function">fp</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">,</span>ll p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ll z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>y<span class="token punctuation">;</span>x<span class="token operator">=</span><span class="token function">mul</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">>>=</span><span class="token number">1ll</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&amp;</span><span class="token number">1ll</span><span class="token punctuation">)</span> z<span class="token operator">=</span><span class="token function">mul</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span>x<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
ll <span class="token function">phi</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ll i<span class="token punctuation">,</span> ans<span class="token operator">=</span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ans<span class="token operator">=</span>ans<span class="token operator">/</span>i<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> n<span class="token operator">/=</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">=</span>ans<span class="token operator">/</span>n<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>   
ll <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ll i<span class="token punctuation">;</span>
    d<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">8ll</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">9</span><span class="token operator">*</span>L<span class="token operator">/</span>d<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">10ll</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    p<span class="token operator">=</span><span class="token function">phi</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token function">fp</span><span class="token punctuation">(</span><span class="token number">10ll</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token function">fp</span><span class="token punctuation">(</span><span class="token number">10ll</span><span class="token punctuation">,</span>p<span class="token operator">/</span>i<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> p<span class="token operator">/</span>i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>L<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %lld: %lld\n"</span><span class="token punctuation">,</span><span class="token operator">++</span>t<span class="token punctuation">,</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> </p>
]]></content>
      <categories>
        <category>yozora Round</category>
      </categories>
      <tags>
        <tag>yozora Round</tag>
      </tags>
  </entry>
  <entry>
    <title>yozora Round 1</title>
    <url>/2021/yozora-round-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="yozora-round-1">yozora Round 1</h2>
<p>本人的练习记录。</p>
<p><span class="math inline">\(\large yozora\)</span>
是日语「よぞら」的罗马音，汉字写作「夜空」。</p>
<p>8.20</p>
<span id="more"></span>
<p> </p>
<h3 id="t1">T1</h3>
<p><a href="https://www.luogu.com.cn/problem/P1650">田忌赛马</a></p>
<p>秒打了个错误的 DP。</p>
<p>后来想了一下，排序后用双指针比较，贪心地选择即可。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">2006</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token operator">></span>y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">=</span>n<span class="token punctuation">,</span>y<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token operator">+=</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> <span class="token operator">++</span>j<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token operator">-=</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">--</span>x<span class="token punctuation">,</span> <span class="token operator">++</span>j<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">></span>b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token operator">+=</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">--</span>x<span class="token punctuation">,</span> <span class="token operator">--</span>y<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&lt;</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token operator">-=</span><span class="token number">200</span><span class="token punctuation">;</span>
                <span class="token operator">--</span>x<span class="token punctuation">,</span> <span class="token operator">++</span>j<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> </p>
<h3 id="t2">T2</h3>
<p><a href="https://www.luogu.com.cn/problem/P2798">爆弹虐场</a></p>
<p>一开始看错条件了。</p>
<p>「至少 <span class="math inline">\(\large k\)</span>
个」看成了「<span class="math inline">\(\large k\)</span> 个」。</p>
<p>于是想了一个错误的贪心加边的算法。</p>
<p>看清题目后，发现这题完全可以当最小生成树来作。有一个贪心将边排序的过程。</p>
<p>kruskal 算法结束后判断时候有 <span class="math inline">\(\large
k\)</span> 个并判断是否联通（是一棵树）即可。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">10010</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> tk<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">E</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> s<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> a<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>E a<span class="token punctuation">,</span>E b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>z<span class="token operator">!=</span>b<span class="token punctuation">.</span>z<span class="token operator">?</span> a<span class="token punctuation">.</span>z<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>z<span class="token operator">:</span>a<span class="token punctuation">.</span>s<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>s<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token operator">==</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">?</span> x<span class="token operator">:</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> s<span class="token punctuation">,</span> tk<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        x<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> z<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">,</span> s<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">></span>mid<span class="token punctuation">)</span> <span class="token keyword">continue</span> <span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> <span class="token operator">++</span>tk<span class="token punctuation">;</span>
            <span class="token operator">++</span>e<span class="token punctuation">,</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> tk<span class="token operator">>=</span>k<span class="token operator">&amp;&amp;</span>e<span class="token operator">==</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token operator">=</span>mid<span class="token punctuation">;</span> <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> </p>
<h3 id="t3">T3</h3>
<p><a href="https://loj.ac/p/10189">仓库建设</a></p>
<p>常规斜率优化 DP。</p>
<p><a
href="https://miku01ck.xyz/2021-08/loj10189-solution/">solution</a></p>
<p> </p>
<h3 id="t4">T4</h3>
<p><a href="https://loj.ac/p/2691">Rendezvous</a></p>
<p>很神奇的题目，会专门写一篇题解。</p>
<p><a
href="https://miku01ck.xyz/2021-08/loj2691-solution/">solution</a></p>
<p>令人流汗黄豆😅的是……</p>
<p>我这里的倍增求 LCA 明显写错了，LOJ 只有 47pts</p>
<p>然而在洛谷却有 90pts</p>
<p>而且洛谷数据过水，跑得飞快~ 😅</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">lca</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    R <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&lt;</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token punctuation">;</span>j<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>lg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">/* lg[x] 是预处理的 log2(x)，这里应该写 lg[d[x]] */</span>
    <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> </p>
<p>今天是8.20</p>
<p><span class="math inline">\(\large Orangestar\)</span> さん
  生日快乐！ φ(゜▽゜*)♪</p>
<p> </p>
]]></content>
      <categories>
        <category>yozora Round</category>
      </categories>
      <tags>
        <tag>yozora Round</tag>
      </tags>
  </entry>
  <entry>
    <title>yozora Round 4</title>
    <url>/2021/yozora-Round4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>好久没写了，没有时间啊 Orz</p>
<span id="more"></span>
<p>T1</p>
<p><a
href="https://www.luogu.com.cn/problem/P2155">沙拉公主的困惑</a></p>
<p><a
href="https://miku01ck.xyz/2021-08/lg2155-solution/">solution</a></p>
<p>T2</p>
<p><a
href="https://www.luogu.com.cn/problem/P4139">上帝与集合的正确用法</a></p>
<p><a
href="https://miku01ck.xyz/2021-08/lg4139-solution/">solution</a></p>
<p>T3</p>
<p><a href="https://www.luogu.com.cn/problem/CF632D">Longest
Subsequence</a></p>
<p>没做，溜了😅</p>
<p>T4</p>
<p><a href="https://www.luogu.com.cn/problem/P3166">数三角形</a></p>
<p><a
href="https://miku01ck.xyz/2021-08/lg3166-solution/">solution</a></p>
<p>T5</p>
<p><a href="https://www.luogu.com.cn/problem/CF739E">Gosha is
hunting</a></p>
<p>题解迟早会有的🤔</p>
<p>T6</p>
<p><a href="https://www.luogu.com.cn/problem/P5308">Quiz</a></p>
<p>同上</p>
]]></content>
      <categories>
        <category>yozora Round</category>
      </categories>
      <tags>
        <tag>yozora Round</tag>
      </tags>
  </entry>
  <entry>
    <title>yozora Round 5</title>
    <url>/2021/yozora-Round5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>T1</p>
<p><a href="https://www.luogu.com.cn/problem/CF1083E">The Fair Nut and
Rectangles</a></p>
<p><a
href="https://miku01ck.xyz/2021-09/CF1083E-solution/">solution</a></p>
<span id="more"></span>
<p>T2</p>
<p><a href="https://www.luogu.com.cn/problem/P3267">侦察守卫</a></p>
<p><a
href="https://miku01ck.xyz/2021-10/lg3267-solution">solution</a></p>
<p>T3</p>
<p><a href="https://www.luogu.com.cn/problem/P4819">杀人游戏</a></p>
<p><a
href="https://miku01ck.xyz/2021-09/lg4819-solution/">solution</a></p>
<p>T4</p>
<p><a href="https://www.luogu.com.cn/problem/P2195">HXY造公园</a></p>
<p><a
href="https://miku01ck.xyz/2021-09/lg2195-solution/">solution</a></p>
<p>T5</p>
<p><a href="https://www.luogu.com.cn/problem/P4072">征途</a></p>
<p>鸽了。。早晚会有的</p>
<p>T6</p>
<p><a href="https://www.luogu.com.cn/problem/P5008">锦鲤抄</a></p>
<p><a
href="https://miku01ck.xyz/2021-09/lg5008-solution/">solution</a></p>
]]></content>
      <categories>
        <category>yozora Round</category>
      </categories>
      <tags>
        <tag>yozora Round</tag>
      </tags>
  </entry>
  <entry>
    <title>yozora Round 6</title>
    <url>/2021/yozora-Round6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>T1</p>
<p><a href="https://www.luogu.com.cn/problem/P3349">小星星</a></p>
<p><a
href="https://miku01ck.xyz/2021-10/lg3349-solution">solution</a></p>
<span id="more"></span>
<p>T2</p>
<p><a href="https://www.luogu.com.cn/problem/P4383">林克卡特树</a></p>
<p>题解早晚会有</p>
<p>T3</p>
<p><a href="https://www.luogu.com.cn/problem/P5958">Sabotaż</a></p>
<p>同上</p>
<p> </p>
<p>其他题目还没选好（</p>
]]></content>
      <categories>
        <category>yozora Round</category>
      </categories>
      <tags>
        <tag>yozora Round</tag>
      </tags>
  </entry>
  <entry>
    <title>中考2022 游记</title>
    <url>/2022/zhongkao2022/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="day--1">DAY -1</h2>
<p>最后一个周末了。</p>
<p>难得几乎没有作业，周末返校不考试。（笑）</p>
<span id="more"></span>
<p>数学老师发了去年中考最后两个大题让我们练手，我又想起了压轴题某个点的运动轨迹是个抛物线，但我当成直线算的痛苦……</p>
<p>带回了一些没啥用的书，看了看错题。</p>
<p>然后依旧是好好放松~</p>
<p>话说我没报 B
校的“小语种招生”，班主任还找我谈话了。不管因为什么原因，我都不想进入 B
校的
“A区”。一是我文化课实在没有那个水平（应该也考不上），而是我不想自讨苦吃，三是对我学
OI 没有帮助。</p>
<p>所以全班就我一个人没报。</p>
<p>后来因为 B
校作为高考中考考场，高一高二学生都“放假”了，就来了几个我们班主任之前的学生，给我们讲高中一些事情和怎么考“小语种招生”。某位爷说，当时数学选择题有很多是多项选择，但是他都按照单项选的。出场一对答案直接少了三十多分。语文出了各种奇葩题，有现代文猜作者（汪曾祺），千字议论文。他英语还扣了
10+ 分，物理扣了 1 分。最后满分 360（语数英物），他考了 310+，以第 9
名的身份进入 A 区。真是无语了，什么怪物。</p>
<h2 id="day-0">Day 0</h2>
<p>周日早晨返校。</p>
<p>先是核酸检测，然后复习了一上午语文。看不下去……</p>
<p>午餐终于改善了55555，还挺好吃。</p>
<p>下午复习物理化学，看了看错题。</p>
<p>4 点多要去看考场时变天了，但是没有下雨。</p>
<p>考场在 X 校。39 考场，5 楼。</p>
<p>X
校作为我是著名的公私合营中学，那硬件设施自然是不差的。只不过这纯木桌凳舒适有点不太舒服，而且不如
B 校的椅子舒服。</p>
<p>差不多就回去了，一路上一直看着车窗外的风景。</p>
<p>晚上依旧是物理化学。</p>
<p>由于不上第三节晚自习，所以 9 点就回宿舍了。我们宿舍只剩下 6
个人，于是我和其他 3 个人去对面宿舍玩狼人杀。十点多睡了觉。</p>
<h2 id="day-1">Day 1</h2>
<p>不得不说早睡觉是真的舒服，6:10 自然醒。</p>
<p>到教室后发了农夫山泉和士力架，随便看看语文后就去考试了。</p>
<h3 id="语文">语文</h3>
<p>发下卷来一看，好家伙，又是孟子！去年前年考的都是课内的孟子，今年考了个课外的！这篇好像做过？课内竟然是大道之行也。</p>
<p>于是文言文就切掉一半了，但是最后一问</p>
<blockquote>
<p>结合某某某谈论对“货物其弃于地也，不必藏于己。力恶其不出于身，也不必为己”的理解。</p>
</blockquote>
<p>乱写，orz。</p>
<p>名著考的是昆虫记，没啥难的。</p>
<p>现代文阅读竟然是莫言在五四前夕的信？好家伙连文章都不必读了，最后一问又是结合实际，orz。</p>
<p>作文有 3 个主题。</p>
<ol type="1">
<li>自律：自己约束自己。</li>
<li>《人世间》疫情版歌词，最后好像有一句“就像种子，永远向着太阳”。</li>
<li>貌似是责任担当？</li>
</ol>
<p>于是秒选
2，仔细读了一下就发现，应该是对生活有希望，成长奋斗啥的。</p>
<p>所以我写了一个极其无语的题目“沐雨，向阳”。</p>
<p>沐还写错了，加了一个点啊啊啊啊。</p>
<p>但是通篇下来语言和逻辑都挺好的，最后一段议论成功点题。嗯，看来写这些文章还有点用。</p>
<p>然后回校。</p>
<h3 id="物理化学">物理＆化学</h3>
<p>中午 1 点多就去坐车，有点困。天气不太好，于是我带了雨伞。</p>
<p>刚好下车时开始下雨，考生们都一窝蜂地往校门里挤。到了排队进楼的时候，狂风大作，大雨裹挟而来，我的伞都被吹崩了一次qwq。SB
的 X
校硬是堵着不让进，雨是斜着下的，伞上的积水又流到旁边的人的身上，然后基本每个人的衣服后背都湿透了。</p>
<p>试卷发下来后，发现物化是真的简单，完全没有难题。化学写完+检查用了30+min，物理写得比较谨慎，写完大概剩下
35min。我自认为是做的不错的。</p>
<p>但是我还是把 <span class="math inline">\(NH_3\)</span>
中氮元素的化合价写了 +3，物理有一个奇葩作图题少做了一个对称。</p>
<p>回校之后吃了某看起来价格不菲的面包，还行。</p>
<p> </p>
<p>晚自习一直在看数学。</p>
<p>依旧在宿舍里玩了狼人杀。</p>
<h2 id="day2">Day2</h2>
<p>吃了好几个巧克力，被同学说流鼻血。</p>
<p>昨天物理化学简单到离谱，于是我认为数学英语应该会比较难。</p>
<p>在车上看了很多职校的传单，说真的对于数学有点紧张。</p>
<h3 id="数学">数学</h3>
<p>无语了。</p>
<p>选择题完全没有难点，最后一个竟然是瓜豆原理板子题，问你在三角形两边上两个线性运动的点连成的线段的中点，运动轨迹是个啥。那必然是线段，它的中位线。</p>
<p>填空最后一个会做，但是平移的时候疏忽导致答案错了，orz。</p>
<p>倒数第二个大题，有人竟然用的四点共圆证明，orz。我大概 2min
切掉了。</p>
<p>压轴题更是没有水平，只不过最后一问的四个答案中，有两个需要暴力因式分解推出的四次等式才能解出来，我也没有算对qwq。只有一半分。</p>
<p>这，看来英语会难些吧。</p>
<h3 id="英语">英语</h3>
<p>事实证明我错了，英语除了听力不太简单，别的都很常规。</p>
<p>所以 facet 为什么 Here means "face"。</p>
<p> </p>
<p>明天只考政治历史了，同学们貌似都轻松了不少，用教室的多功能黑板放歌听。我放了一首
Daze，结果很快就被切掉了。</p>
<p>晚自习一直在看政治，但是发现我啥也背不过了，于是摸鱼。</p>
<p>还玩了狼人杀。</p>
<h2 id="day-3">Day 3</h2>
<p>要结束了吗？</p>
<p>天气很不错，踩着重叠着的树荫到教室，随便看了看昨日不曾翻阅的时政。</p>
<p>起行，校长竟然向我们招手了。沿途的风景差不多已经厌倦了啊，迎着跃动的朝阳小憩片刻。</p>
<p>马上就到了。</p>
<h3 id="政治-历史">政治 ＆ 历史</h3>
<p>政治竟然考了我昨晚看的每一道题，运气不错啊。</p>
<p>历史就比较恶心，一堆总结材料的题目，比一二模要难一些，我竟然用了将近
50min。当然我故意在中考放慢了做题速度，毕竟早做完也没什么用。</p>
<p>最终写完还有 20min。</p>
<p>出考场之前，X
校竟然强制用广播向我们宣传他们的”昌乐二中并行班“，但估计没人会报名声不怎么好的
X 校。</p>
<p>结束了，中考结束了。</p>
<h3 id="毕业">毕业</h3>
<p>全班就我一个人去餐厅吃饭了。</p>
<p>家委会买了一堆吃的喝的，但是我没着急吃。一是不饿，二是我没有那么兴奋。</p>
<p>好多人都带手机来了。</p>
<p>吃喝发言过后，就是毕业典礼。相当吵闹啊。</p>
<p>然后就是冗长的等待拍毕业照的时间，某些班拍个照都要十几分钟。</p>
<p>我没有心情去做那些事情，比如和同学拍照或打游戏。仅仅是，在烈日下回想起了去年夏天。</p>
<p>可是迎着摇曳的阳炎，所描绘出的是一幕幕我不想去回忆的情景，不管那时候我有多激动，我都想毁灭这些东西。我嘲笑那时候我的天真，我真想回去叫醒那时候的我。</p>
<p>「你能不能看清楚你到底什么样？」</p>
<p>「我不能原谅你……」</p>
<p>估计他也不会想到，一年后会变成这个样子。</p>
<p>憧憬着的故事，不过是擦肩而过的浅薄梦幻，在六月的阵雨中早已随大风舞去。留下的，是永远的伤痕。</p>
<p>我发誓，有条件的话，我会尽力拿到省一，让这个故事有个说得过去的结局。</p>
<p>然后我就会离开。</p>
<p>……</p>
<p>一转眼，已经要离校了。阳光抚平了这一切，回首，是生活了三年的校园。那一霎，曾经眺望过的校园中，染上了天边漾起的茜色。厌恶的教室藏在葱葱绿叶的罅隙中，竟有丝丝不舍划过脸颊，吹拂在彷徨的心中。我紧紧抓着书包的背带，卸下无数次脸上对母校摆出的种种偏见，用不曾涌现也不曾停息的留恋与遗憾，大声在心里说出：“再见啦！”。</p>
<p>再见了，称不上是朋友的同学们；再见了，配合的不是那么好的老师们；再见了，每一个曾唤起我的回忆的角落；再见了，我的初中生活！</p>
<p> </p>
<p>今后，一定要快乐地生活下去啊！</p>
<p>各位保重！</p>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>文化课</tag>
      </tags>
  </entry>
  <entry>
    <title>「图论学习笔记」#4 二分图相关</title>
    <url>/2022/notes-graph-4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="二分图最小点覆盖">二分图最小点覆盖</h2>
<p>给定一张二分图，求出一个最小的点集 <span
class="math inline">\(S\)</span>，使得图中任意一条边都至少有一个端点在
<span class="math inline">\(S\)</span>
中。这个问题称为<strong>二分图的最小点覆盖</strong>，简称<strong>最小覆盖</strong>。</p>
<span id="more"></span>
<h3 id="textkonig-定理"><span
class="math inline">\(\text{k\&quot;onig}\)</span> 定理</h3>
<p>二分图最小覆盖包含的点数等于此图最大匹配包含的边数。</p>
<p>看证明过程时，请牢记增广路，最大匹配，匹配点，匹配边的定义，不然像我这种不太聪明的可能会多想很多没用的东西。</p>
<blockquote>
<p>证明：</p>
<p>二分图的最大匹配是所有此图边的子集，且其中的边两两没有共同端点。那么最小覆盖中必然包含最大匹配中每一条边的任意一个端点，不然存在一条最大匹配中的边满足任意一个端点都不在其中。也就是最小覆盖包含的点数大于等于最大匹配包含的边数。</p>
<p>如下进行构造。</p>
<ol type="1">
<li>求出二分图最大匹配。</li>
<li>从左部每一个非匹配点进行 DFS
寻找增广路，必定失败，同时标记访问过的点。</li>
<li>取左部未被标记的点、右部被标记的点。得到最小覆盖。</li>
</ol>
<p>以下证明它的正确性。由于出发点是左部非匹配点，那么左部匹配点一定没有被标记。而右部被标记的一定是匹配点，否则就找到了一条增广路，与已经求出最大匹配相矛盾。这样选出的点数恰好是最大匹配的边数。</p>
<p>以下证明它能够覆盖所有的边。分类讨论。</p>
<ol type="1">
<li>连接两个匹配点的边，只会有一个端点被选择，即被覆盖。这是因为求出最大匹配的
DFS
中匹配点与非匹配点必然是交替访问的，而由于左边选没有标记的，右边选有标记的，所以绝对不会出现下图中选择
<span class="math inline">\(1\)</span> 与 <span
class="math inline">\(A\)</span>
的情况。进一步知道，对于一条匹配边，它的两个端点必然只选其中一个。</li>
<li>连接两个非匹配点的边。求出最大匹配后便不存在了，不然就是一条增广路。</li>
<li>连接左部非匹配点 <span class="math inline">\(u\)</span>，右部匹配点
<span class="math inline">\(v\)</span>。<span class="math inline">\((u
\rightarrow v)\)</span> 一定被访问，<span
class="math inline">\(u\)</span> 一定不被选中，<span
class="math inline">\(v\)</span> 一定被选中，被覆盖。</li>
<li>连接左部匹配点 <span class="math inline">\(u\)</span>，右部非匹配点
<span class="math inline">\(v\)</span>。如果 <span
class="math inline">\(u\)</span> 被访问了，那么沿着 <span
class="math inline">\((u \rightarrow v)\)</span>
一定能找到一条增广路，矛盾。所以 <span class="math inline">\(u\)</span>
一定不被访问，进而二者没有被标记。那么就一定选择 <span
class="math inline">\(u\)</span>，一定不选择 <span
class="math inline">\(v\)</span>，被覆盖。</li>
</ol>
</blockquote>
<p>图片侵删。</p>
<p>红色边为最大匹配，红色点为最小覆盖。</p>
<p><img data-src="https://img-blog.csdnimg.cn/2020031711564475.png" /></p>
<h2 id="二分图最大独立集">二分图最大独立集</h2>
<h3 id="一般图情况">一般图情况</h3>
<p>给定一张无向图，求出一个点集，满足任意两点之间没有边相连，称之为这张图的一个<strong>独立集</strong>。包含点最多的那个称为<strong>最大独立集</strong>。</p>
<p>给定一张无向图，求出一个点集，满足任意两点之间都有一条边相连，称之为这张图的一个<strong>团</strong>。包含点最多的那个称为<strong>最大团</strong>。</p>
<p>一个定理：对于无向图 <span
class="math inline">\(G\)</span>，其最大团为其补图 <span
class="math inline">\(G&#39;\)</span> 的最大独立集。</p>
<p><span class="math inline">\(G=(V,E)\)</span> 的补图 <span
class="math inline">\(G&#39;=(V,E&#39;)\)</span>，其中 <span
class="math inline">\(E&#39; = \{(x,y) \notin E \}\)</span>。也就是对于
<span class="math inline">\(x,y \in V\)</span>，如果它们两个点 <span
class="math inline">\(G\)</span> 中没有边，那么在 <span
class="math inline">\(G&#39;\)</span>
中就有边，反之没有边。也可以理解为，将 <span
class="math inline">\(G\)</span>
扩展成一个完全图，然后减掉原有的边。</p>
<p>很重要的<strong>补图转化思想</strong>，从问题的另一面打开突破口。</p>
<p>对于一般图，最大团与最大独立集是 NPC
问题。（<del>好了不用学了</del>）</p>
<h3 id="二分图情况">二分图情况</h3>
<p>一个定理：</p>
<p>设 <span class="math inline">\(G\)</span> 为有 <span
class="math inline">\(n\)</span> 个节点的二分图，<span
class="math inline">\(G\)</span> 的最大独立集为 <span
class="math inline">\(n\)</span>
减去最大匹配的边数（最小覆盖的点数）。</p>
<blockquote>
<p>证明：</p>
<p>选出最多的点构成独立集。等于在图中去掉最少的点，使得剩下的点两两不相连。也就是用最少的点去覆盖所有的边（然后把它们删了）。</p>
</blockquote>
<h2 id="dag-的最小路径点覆盖">DAG 的最小路径点覆盖</h2>
<p>给定一个 DAG，要求用尽量少的不相交的简单路径，恰好覆盖 DAG
的所有点，这个问题成为 DAG 的<strong>最小路径点覆盖</strong>问题。</p>
<p>设原来的 DAG 为 <span class="math inline">\(G = (V,E)\)</span>，共有
<span class="math inline">\(n\)</span> 个节点。对于 <span
class="math inline">\(x \in V\)</span>，把它拆成 <span
class="math inline">\(x\)</span> 与 <span
class="math inline">\(x+n\)</span> 两个点。将 <span
class="math inline">\([1,n]\)</span> 作为左部点，<span
class="math inline">\([n+1,2n]\)</span>
作为右部点建立二分图。对于原图中的边 <span class="math inline">\((x
\rightarrow y)\)</span>，再二分图中连 <span class="math inline">\((x
\rightarrow y+n)\)</span>。最终得到的二分图 <span
class="math inline">\(G&#39;\)</span> 称为 <span
class="math inline">\(G\)</span> 的拆点二分图。</p>
<blockquote>
<p>定理：</p>
<p><span class="math inline">\(G\)</span>
的最小路径点覆盖包含的路径条数等于 <span
class="math inline">\(n\)</span> 减去 <span
class="math inline">\(G&#39;\)</span> 的最大匹配数。</p>
</blockquote>
<p>证明暂略，有时间补上。</p>
<p> </p>
<p>如果简单路径可相交，那么就是 DAG
的<strong>最小路径可重复点覆盖</strong>问题。</p>
<p>最小路径可重复点覆盖中，如果有两条路径 <span class="math inline">\((x
\rightarrow p \rightarrow y)\)</span>，<span class="math inline">\((u
\rightarrow p \rightarrow
v)\)</span>，那么这两条路径是相交的。但是如果添加一条边 <span
class="math inline">\((x \rightarrow
y)\)</span>，那么就能让他们不相交了。</p>
<p>进一步地，对于任意能够间接连通两个点，都添加一条边让它们直接连通，然后c拆点跑最大匹配，用
<span class="math inline">\(n\)</span>
减去就行了。但是一旦加边后，这就不再是一个 DAG
了，所以如果要用网络流算法求最大匹配的话，对于间接连通的点对 <span
class="math inline">\((x,y)\)</span>，只需要添加 <span
class="math inline">\((x \rightarrow
y+n)\)</span>。但如果是匈牙利算法的话就不用考虑，因为邻接矩阵的特殊结构。</p>
<p>上述判断间接连通可以用 Floyd 传递闭包实现。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>「图论学习笔记」#3 二分图匹配</title>
    <url>/2022/notes-graph-3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="二分图的定义与判定">二分图的定义与判定</h2>
<h3 id="定义">定义</h3>
<p>对于一张有 <span class="math inline">\(n\)</span>
个节点的无向图（<span class="math inline">\(n \ge
2\)</span>），可以分成两个集合 <span class="math inline">\(A\)</span> 与
<span class="math inline">\(B\)</span> 两个非空集合，满足 <span
class="math inline">\(A \cap B =
\varnothing\)</span>，且任意一个集合内的点之间都没有边相连。那么称这张图为二分图。</p>
<span id="more"></span>
<h3 id="判定">判定</h3>
<p>不加证明地给出一个定理：</p>
<blockquote>
<p>一张无向图是二分图，当且仅当图中不存在奇环。</p>
</blockquote>
<p>根据这个定理，可以用染色的方法进行二分图判定。用黑白二色标记图中节点，当一个节点被交际后，将所有与它直接相连的点标记为与它相反的颜色。那么对于一个点
<span class="math inline">\(x\)</span>，颜色为 <span
class="math inline">\(col_x\)</span>，存在与它直接相连且已经被染色的点
<span class="math inline">\(y\)</span>，满足 <span
class="math inline">\(col_x = col_y\)</span>，那么说明图中存在奇环。</p>
<p>复杂度 <span class="math inline">\(O(n+m)\)</span>，其中 <span
class="math inline">\(n\)</span> 为点数，<span
class="math inline">\(m\)</span> 为边数。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>color<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">-</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="二分图最大匹配">二分图最大匹配</h2>
<p>如果一个边集满足「任意两条边都没有公共端点」，那么这个<strong>边集</strong>称为该图的一组<strong>匹配</strong>。在二分图中，包含边数最多的一组匹配称为<strong>二分图的最大匹配</strong>。</p>
<p>对于一组匹配 <span class="math inline">\(S\)</span>，属于 <span
class="math inline">\(S\)</span>
的边称为“匹配边”，不属于它的边称为“非匹配边”。匹配边的端点称为“匹配点”，其他节点称为“非匹配点”。</p>
<p>在二分图中，如果存在链接两个非匹配点的路径 <span
class="math inline">\(p\)</span>，且非匹配边与匹配边在 <span
class="math inline">\(p\)</span> 上交替出现，那么 <span
class="math inline">\(p\)</span> 就是 <span
class="math inline">\(S\)</span> 的<strong>增广路</strong>。</p>
<p>它必然有以下性质：</p>
<ul>
<li>长度 <span class="math inline">\(l\)</span>
为奇数。否则连接某一个端点的增广路上的边是匹配边，与它是非匹配点相矛盾。</li>
<li>路径上第 <span class="math inline">\(1,3,5,\cdots l\)</span>
条边是非匹配边，<span class="math inline">\(2,4,6,\cdots l-1\)</span>
条边为匹配边。由定义不难得出。</li>
</ul>
<p>由于这两条性质，得出在增广路上，匹配边的数量必定是非匹配边的数量
-1，那么如果将路径上所有的边的状态取反，那么就能减少一条增广路，得到一个新的匹配
<span class="math inline">\(S&#39;\)</span>，其中匹配边的数量为 <span
class="math inline">\(S\)</span> 中匹配边的数量 +1。进而得到推论：</p>
<blockquote>
<p>二分图的一组匹配 <span class="math inline">\(S\)</span>
为最大匹配，当且仅当图中不存在 <span class="math inline">\(S\)</span>
的增广路</p>
</blockquote>
<h3 id="匈牙利算法">匈牙利算法</h3>
<p>又称为增广路算法，用于计算二分图最大匹配，其过程为：</p>
<ol type="1">
<li>设 <span class="math inline">\(S =
\varnothing\)</span>，即图中所有边都是非匹配边。</li>
<li>寻找增广路 <span
class="math inline">\(p\)</span>，并且所有状态取反，得到更大的匹配 <span
class="math inline">\(S&#39;\)</span>。</li>
<li>重复第 2 步，直到图中不存在增广路，此时得到的 <span
class="math inline">\(S&#39;&#39;\)</span> 即为改二分图的最大匹配。</li>
</ol>
<p>这个算法的核心为寻找增广路。</p>
<p>称 <span class="math inline">\(x\)</span> 与 <span
class="math inline">\(y\)</span> 匹配当且仅当 <span
class="math inline">\((x \rightarrow y)\)</span> 在匹配 <span
class="math inline">\(S\)</span>
之内。匈牙利算法依次尝试给每一个左部节点 <span
class="math inline">\(x\)</span> 寻找一个匹配的右部节点 <span
class="math inline">\(y\)</span>。<span class="math inline">\(x\)</span>
与 <span class="math inline">\(y\)</span>
能够匹配，需要满足以下条件之一。</p>
<ol type="1">
<li><p><span class="math inline">\(y\)</span> 本身是非匹配点。那么 <span
class="math inline">\((x \rightarrow y)\)</span>
就是一条非匹配边，构成长度为 1 的增广路。</p></li>
<li><p><span class="math inline">\(y\)</span> 已经与左部节点 <span
class="math inline">\(x&#39;\)</span> 匹配，但是从 <span
class="math inline">\(x&#39;\)</span> 出发能够找到一个右部节点 <span
class="math inline">\(y&#39;\)</span> 与它匹配。此时 <span
class="math inline">\(x \rightarrow y \rightarrow x&#39; \rightarrow
y&#39;\)</span> 是一条增广路。</p></li>
</ol>
<p>找到增广路之后直接回溯，将路径上的匹配状态取反， <span
class="math inline">\(S\)</span> 中边的个数就 +1。</p>
<p>这个算法的正确性基于：当一个节点成为匹配点后，至多因为找到新的增广路而更换匹配对象，但不会变为非匹配边。</p>
<p>复杂度 <span class="math inline">\(O(n^2)\)</span>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> y<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">||</span><span class="token function">dfs</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">memset</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// ans即为最大匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="二分图多重匹配">二分图多重匹配</h2>
<p>二分图，<span class="math inline">\(N\)</span> 个左部点，<span
class="math inline">\(M\)</span> 个右部点，从中选出尽可能多的边，使得第
<span class="math inline">\(i\)</span> 个左部节点至多与 <span
class="math inline">\(kl_i\)</span> 条选出的边相连，第 <span
class="math inline">\(j\)</span> 个右部点最多与 <span
class="math inline">\(kr_j\)</span>
条选出的边相连。称之为二分图的多重匹配。</p>
<p>有 4 中解决方案。</p>
<ol type="1">
<li>拆点。把第 <span class="math inline">\(i\)</span> 个左部点拆成 <span
class="math inline">\(kl_i\)</span> 个点，把第 <span
class="math inline">\(j\)</span> 个右部点拆成 <span
class="math inline">\(kr_j\)</span> 个右部点。对于原图中的边 <span
class="math inline">\((i,j)\)</span>，在 <span
class="math inline">\(i\)</span> 与 <span
class="math inline">\(j\)</span>
拆成的节点之间分别连边。然后跑最大匹配。</li>
<li>如果所有的 <span class="math inline">\(kl\)</span> 都为 1 或者所有的
<span class="math inline">\(kr\)</span> 都为
1，那么只有一侧是多重的。假如左侧是多重的，方法是在匈牙利算法让每个<span
class="math inline">\(i\)</span> 执行 <span
class="math inline">\(kl_i\)</span> 次 DFS。</li>
<li>在上一种方案中，左右两侧是可以交换的。设右侧为多重，那么让每个右部节点
<span class="math inline">\(i\)</span> 可以匹配 <span
class="math inline">\(kr_i\)</span>
次，超过匹配次数后，依次递归每个匹配的左部点。</li>
<li>网络流。</li>
</ol>
<h2 id="二分图带权匹配-km-算法">二分图带权匹配 &amp; KM 算法</h2>
<p>对一张带权的二分图求最大匹配，称为二分图带权最大匹配。注意前提是<strong>匹配数最大</strong>，再<strong>最大化边权和</strong>。</p>
<p>想了好久，找到了相对比较好理解的讲解方法。</p>
<p>先引入几个概念。</p>
<h3 id="完备匹配">完备匹配</h3>
<p>给定一张二分图，其左右节点数均为 <span
class="math inline">\(n\)</span>。如果改二分图最大匹配含有 <span
class="math inline">\(n\)</span>
条边，那么该二分图具有完备匹配。也就是从每个节点出发寻找匹配都能成功。</p>
<h3 id="顶标">顶标</h3>
<p>在二分图中，给左部节点 <span class="math inline">\(i\)</span>
一个权值 <span class="math inline">\(A_i\)</span>，右部节点 <span
class="math inline">\(j\)</span> 一个权值 <span
class="math inline">\(B_j\)</span>。满足 <span class="math inline">\(A_i
+ B_j \ge w(i,j)\)</span>，其中 <span
class="math inline">\(w(i,j)\)</span> 为两点之间的边权。这样的 <span
class="math inline">\(A_i\)</span> 与 <span
class="math inline">\(B_j\)</span> 成为顶标。</p>
<h3 id="相等子图">相等子图</h3>
<p>二分图中所有节点与满足 <span class="math inline">\(A_i + B_j =
w(i,j)\)</span> 的边 <span class="math inline">\((i,j)\)</span>
构成的子图叫做这张二分图的相等子图。</p>
<blockquote>
<p>若相等子图中存在完备匹配，则这个完备匹配就是二分图的带权最大匹配。</p>
<p>证明：</p>
<p>在相等子图中，完备匹配的边权和为 <span
class="math inline">\(\sum_{i=1}^n (A_i +
B_i)\)</span>，也就是顶标之和。</p>
<p>因为 <span class="math inline">\(A_i + B_j \ge
w(i,j)\)</span>，所以在二分图中，任何一组匹配的边权和都不大于顶标之和。</p>
</blockquote>
<h3 id="交错树匈牙利树">交错树（匈牙利树）</h3>
<p>在匈牙利算法的过程中，如果从某个左部结点出发寻找匹配失败，那么在 DFS
的过程中，访问过的节点和边构成一棵树，满足根为一个左部节点，叶子均为左部节点，且奇数层的边均为非匹配边，偶数层的边均为匹配边。这样的树称为交错树。</p>
<p>一个没用的推论，交错树高度为奇数。</p>
<p>匈牙利算法中的<code>dfs(i)=1</code>就代表不存在以 <span
class="math inline">\(i\)</span> 为根的交错树。</p>
<p>很多地方没有提到的一点就是，如果有交错树，那么必然没有完备匹配，否则与每个从节点出发都能找到匹配相矛盾。这也是下文一系列操作的基础——修改标顶使得尽可能多的边进入相等子图。</p>
<p>知道大概就行了，深入讲真的不太好理解，可能更加学术一点？总而言之，我们的相等子图中不能存在交错树，否则就没有完备匹配，就没有带权最大匹配了！</p>
<p> </p>
<h3 id="流程">流程</h3>
<p>对于 <span class="math inline">\(i\)</span>，可以把 <span
class="math inline">\(B_i\)</span> 设置为 0，<span
class="math inline">\(A_i\)</span> 设置为 <span
class="math inline">\(\max_{(i \rightarrow j)}{\{ w(i,j)
\}}\)</span>，这样一定满足条件。</p>
<p>调整顶标是为了让更多的边 <span class="math inline">\((i,j)\)</span>
满足 <span class="math inline">\(A_i + B_j =
w(i,j)\)</span>，也就是扩大相等子图。</p>
<p>设当前节点为 <span class="math inline">\(k\)</span>
且满足<strong>在相等子图中</strong>存在以它为根的交错树。找到 <span
class="math inline">\((i,j)\)</span>，满足 <span
class="math inline">\(i\)</span> 在以 <span
class="math inline">\(k\)</span> 为根的交错树中但是 <span
class="math inline">\(j\)</span> 不在，那么如果把 <span
class="math inline">\((i,j)\)</span>
加入相等子图，就能够消去这棵交错树了。</p>
<p>如果把这棵交错树中所有左部节点的顶标都减去一个 <span
class="math inline">\(\Delta\)</span>，右部节点都加上一个 <span
class="math inline">\(\Delta\)</span>，那么对于相等子图中一左一右两个节点
<span class="math inline">\((u,v)\)</span>，<span
class="math inline">\(A_u + B_v\)</span> 和不变，仍然在相等子图中。而
<span class="math inline">\(A_i + B_j\)</span> 变小了，因为 <span
class="math inline">\(j\)</span> 不在交错树中。</p>
<p>怎么样保证 <span class="math inline">\((i,j)\)</span>
一定进入相等子图呢？这要求 <span class="math inline">\(A_i + B_j =
w(i,j)\)</span>。找到交错树中的任意节点 <span
class="math inline">\(i\)</span>，令 <span
class="math inline">\(\Delta=A_i+B_j-w(i,j)\)</span>，那么就相当于 <span
class="math display">\[
A_i - (A_i + B_j - w(i,j)) + B_j = w(i,j)
\]</span></p>
<p>这个显然是成立的。至于 <span class="math inline">\(i\)</span>
是啥我们不关心，只要这样做就能让 <span
class="math inline">\((i,j)\)</span>
加入相等子图。如果减去太多导致某两个点的顶标和小于边权和了怎么办呢？对于
<span class="math inline">\(j \in [1,n]\)</span>，取 <span
class="math inline">\(A_i + B_j - w(i,j)\)</span>
的最小值。这个可以在匈牙利算法的过程中预处理出来，记为 <span
class="math inline">\(slack(j)\)</span>。</p>
<p>最终只要把边权和加起来就是答案了。</p>
<p>这么一来最优情况下复杂度是 <span
class="math inline">\(O(n^3)\)</span>，但是很容易就会被卡到 <span
class="math inline">\(O(n^4)\)</span>。使用 BFS 优化匈牙利算法可以做到
<span class="math inline">\(O(n^3)\)</span>，有时间再写。</p>
<p>KM
算法代码较简单，且在稠密图上表现较好，但是只适用于“原图一定存在完备匹配”的情况。至于费用流的算法，以后再说咯~</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	va<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>y<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vb<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>la<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>lb<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// la[x]+lb[y]=w[x][y]，(x,y)在相等子图中</span>
            <span class="token comment">// vb[y]=1表示如果村子交错树，那么y必定在其中</span>
			vb<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">||</span><span class="token function">dfs</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> slack<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>slack<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>la<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>lb<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 不在相等子图中就更新slack</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">KM</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		la<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>inf<span class="token punctuation">,</span> lb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		match<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> la<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>la<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> slack<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>inf<span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">// 这样就没有交错树了</span>
		dlt<span class="token operator">=</span>inf<span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vb<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dlt<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dlt<span class="token punctuation">,</span>slack<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 取最小值修改标顶</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>va<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> la<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-=</span>dlt<span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>vb<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> lb<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dlt<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token operator">+=</span>w<span class="token punctuation">[</span>match<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// ans+=la[i]+lb[i]</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划α</title>
    <url>/2021/DP1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img data-src="https://i.loli.net/2021/08/12/yWd1gtoelf2nVA3.jpg"
alt="64720905_p0.jpg" /> <span id="more"></span></p>
<p>先开个坑（</p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>回忆一夏</title>
    <url>/2021/recollect-summer2021/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img data-src="https://i.loli.net/2021/08/30/so4jDblh1LSvMi7.jpg" /></p>
<span id="more"></span>
<p> </p>
<h2 id="凪と薫起点と終点">凪と薫、起点と終点</h2>
<p>这是我上个寒假开学（返校）前一天深夜循环播放的歌。</p>
<p>当时熬夜水群，可惜是所谓「班级群」，一天到晚没几个人。。</p>
<p>可那竟是我加的唯一的群</p>
<p>当时还切了一道很水的题，是 <a
href="https://www.luogu.com.cn/problem/P2671">[NOIP2015 普及组]
求和</a></p>
<p>就像这首歌的歌名一样，从一段旅途的起点，走向下一个终点。</p>
<p>但是开学后发生了好多奇怪的事。🤔</p>
<p>让我失去了对这所学校的某些人的最后一点尊重。</p>
<p>不过站在它们角度看，它们仅仅是做出了最优解——让自己获得优越感。 <span
class="math display">\[
\large \forall \text{ 受到某些刺激后深爱着 whk
成绩的魔怔壬，它们维护自己的自尊有且仅有这种方法}
\]</span> 还有某个整天嚷嚷「斜率」的数学老师。</p>
<p><del>它的头就像凸包一样</del></p>
<p>也 AFU <span class="math display">\[
\large \text{Away From Us  \quad AFU}
\]</span> 快乐源泉没了</p>
<p>好不容易等到了这个夏天，这个暑假。</p>
<p>我能去学我喜欢的东西，能规划自己的时间。</p>
<p><del>所以 whk 和作业一点都没看</del></p>
<p>但那不重要，我才不要成为整天泡在无聊的 whk
里，为了成绩的起伏而发愁的人。</p>
<p>就像那所学校的大部分人那样。</p>
<p>whk 的旅途暂时结束了，而我的 OI 之路才刚刚启程。</p>
<blockquote>
<p>さあ、旅たつときが来たね</p>
<p>喂 启程的时刻来临了</p>
<p> </p>
<p>散らばった記憶はそのままにして</p>
<p>散落的记忆就随它去吧</p>
<p>         —— 凪と薫</p>
</blockquote>
<p> </p>
<h2 id="夏天总是带来惊喜">「夏天」总是带来惊喜。</h2>
<p>小学的某个夏天，我第一次听到了 Miku 的歌声——『深海少女』和 赤髮p/GUMI
的『黒猫』。</p>
<p>也算是与 VOCALOID 结缘吧。</p>
<p>又是一个夏天，我在朋友的推荐下，从某游戏盒上下载了破解版的
刺客信条2，第一次体验到了大作与开放世界 ACT
游戏，并且很喜欢这种<del>篡改</del>融合历史的叙事方式。在那个暑假里，我用家里的老爷机通关了
刺客信条2、兄弟会、3 和 古墓丽影9
等经典作品。没有通关启示录是因为破解资源有点问题。六年级用了新的设备，就通关了
刺客信条黑旗、叛变、大革命、枭雄，古墓丽影崛起，看门狗。还玩了奥里与黑暗森林，耻辱，狗2等。有了正版游戏，但都是白嫖的。其中玩得最多的是大革命，大概有
6、7 周目了。</p>
<p>同时我还入了电脑硬件圈，可惜没钱，渐渐地也不怎么关注了。ㄟ( ▔, ▔
)ㄏ</p>
<p>小升初的那个夏天，很喜欢 Avicii。伴随着一首首 Country
风格的电音，我也如愿来到了这所学校，对于当时的我来说几乎不可能的学校。同时也感受到了离开了一所学校后的无限快乐。</p>
<p>因为疫情与网课，初一的夏天似乎姗姗来迟，放假也比较晚。</p>
<p>我说服了家人不上辅导班，从而有的大把时间去看我喜欢的动漫，听我喜欢的歌，玩我喜欢的游戏。也正是在这个夏天，喜欢上了
Orangestar。</p>
<p>我甚至自学了
Java，可惜啥也没学到，连语法掌握地都不好，然而在当时的我看来已经非常酷了。直到暑假末期，我才了解到了
C++。当时班里也有一个人会，于是就买了 C++ primer，准备自己学习一下。</p>
<p>开学之后就没多少时间学了，我在换班（11月1日）之前刚学会 Map 和 Set
的用法，并且也很不扎实，就是对着书上给出的东西瞎写，也没有实际应用。</p>
<p>后来在 12 月，NOIP2020 复试的时候，我了解到了
OI，但是并没有多少了解。出于各种原因，也没有系统地去学。后来寒假才发现自己连红题做起来都费劲，不提了。</p>
<p>而初二的夏天，是我从一个憧憬着 OI 的天真初中生成长为一个 OIer
的过程。</p>
<p>一路上有那么多的事，我坚持走到了今天。</p>
<p> </p>
<h2 id="それはきっと夏だった-那一定是夏天">それはきっと夏だった
那一定是夏天</h2>
<p><a href="https://www.bilibili.com/video/BV17A411J7KA">PV</a></p>
<p>这是我听的为数不多的本家非 VOCALOID
的歌之一，歌名直译为上，意译为本文标题，无论哪一个都充满了那种</p>
<p>期待、遗憾、苦涩、追忆、无奈、释然、憧憬</p>
<p>那是融化在夏天中的七色啊</p>
<p>期待着「OI」与「假期」</p>
<p>遗憾于「时间」与「时机」</p>
<p>苦涩于「资源」与「朋友」</p>
<p>追忆着「昨日」与「曾经」</p>
<p>无奈于「现实」与「距离」</p>
<p>释然于「萌番」与「游戏」</p>
<p>憧憬着「明日」与「未来」</p>
<p>这是我的夏天。</p>
<p>这个夏天圆满结束了。</p>
<p>还有好多想说的，想写的。</p>
<p>然而，这些无病呻吟从来不能带来什么实际作用</p>
<p>也比不上一句诚恳的</p>
<p><span class="math inline">\(\large \text{CSP2021/NOIP2021} \quad
rp++\)</span> ！</p>
<p> </p>
<h2 id="祝各位取得自己满意的成绩">祝各位取得自己满意的成绩！</h2>
<p> </p>
<p>最后以『凪と薫』的歌词结尾</p>
<p> </p>
<blockquote>
<p>さあ、旅たつときが来たね</p>
<p>呐 启程之时来临啦</p>
<p> </p>
<p>大切な記憶は仕舞っておいて</p>
<p>收拾好最重要的记忆</p>
<p> </p>
<p>寂しくてつらいとき思い出す</p>
<p>回想寂寞困苦的时候</p>
<p> </p>
<p>ほら振り返らず前だけを見て</p>
<p>喂 要一直往前看 别回头</p>
</blockquote>
<p> </p>
<p><span class="math display">\[
\large 喂 要一直往前看 别回头
\]</span></p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>2021的夏天</tag>
      </tags>
  </entry>
  <entry>
    <title>图论α_暑假day26-27-28</title>
    <url>/2021/natsu-GT1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>今晚上出去吃了顿饭，回家就已经9点了qwq</p>
<h2 id="闲话">闲话</h2>
<p>自从夏令营结束就一直在颓废，整天摸鱼🐟，昨天终于开始卷OI了</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">消え去ってしまってよ　行ってしまうなら
	   除去掉了啊　起行了的话
	   僕はここで止まらないで
	   那我就绝不会止步于此啊
                 ------- ウミユリ海底譚 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这就像海底谭一样令人感动不是吗（bushi </p>
<p>快乐水没了，，，烟花马上登录山东！</p>
<p>今天中午出去吃饭，看到蜜雪冰城前堆满了人，生意红红火火恍恍惚惚哼哼嘿嘿哈哈</p>
<p>所以我就像在夏令营那样去了阿水</p>
<p>真的懒得等了，orz</p>
<h2 id="言归正传">言归正传</h2>
<span id="more"></span>
<hr />
<p>前几天我搞了一个图论&amp;树上问题的题单，其实有一部分是我觉得不错的题目，其他的随便挑的题，具体好不好就不能保证了。。</p>
<p>感觉POI题目质量不错啊</p>
<h3 id="section">7.26</h3>
<p>写了一个割点的模板，没了</p>
<h3 id="section-1">7.27 &amp; 7.28</h3>
<p>通过 <a href="https://www.luogu.com.cn/problem/P2939">Revamping
Trails</a> 接触了分层图的概念与简单应用</p>
<p>所谓分层图，即</p>
<p><img data-src="https://cdn.luogu.com.cn/upload/pic/10006.png" /></p>
<p>(图片来源于 <span class="citation"
data-cites="fy1234567ok">@fy1234567ok</span>，侵删)</p>
<p>适用于把一张图多次修改的情况</p>
<p>建多层图，每一层对应每一种情况（具体做法就不说了</p>
<p>这样的话，最终可以求出每一种情况的答案，取合适值即可</p>
<p>相应地，其时空复杂度也是随层数上升（常数通常上升的很离谱</p>
<p>然后又学习了<strong>分数规划</strong>及其在图论上的应用</p>
<p>经典例题</p>
<p><a href="https://www.luogu.com.cn/problem/P2868">Sightseeing
Cows</a></p>
<p><a href="https://www.luogu.com.cn/problem/P4377">Talent Show</a></p>
<p>这两题式子很像</p>
<p>0/1分数规划模型为：</p>
<p>对于给定的 <span class="math inline">\(a_1,a_2,a_3,...,a_n\)</span>
与 <span class="math inline">\(b_1,b_2,b_3,...,b_n\)</span>，求一组解
<span class="math inline">\(x_i(1 \le i \le
n,x_i=0/1)\)</span>，使下式最大化</p>
<p>$ $</p>
<p>分数值必然存在单调性，所以我们二分一个 <span
class="math inline">\(mid\)</span>，使</p>
<p>$ mid $</p>
<p>经过变形不难得到 ( $ $ 炸了的话就将就看把。。。)</p>
<p>$ ^n_{i=1} (a_i-mid b_i) x_i $</p>
<p>所以就有了t2这样的0/1背包的规划</p>
<p>当然这只是基本形式，本质是从两个集合中各选若干元素，是他们各自之和之商最大</p>
<p>实际上式子不会是这样的，但其形式无非是</p>
<p>$ ^n _{i=1} z_i $​</p>
<p>其中 <span class="math inline">\(z_i\)</span> 是某多项式</p>
<p>如果 <span class="math inline">\(z_i\)</span>
是图上的权，你会想到什么？</p>
<p>负环！</p>
<p>如果一张图中存在负环，那么上式<strong>不会成立</strong>，并且上式成立与否是判断
<span class="math inline">\(mid\)</span> 是否可行的关键！</p>
<p>所以对于关于图论的题
(t1)，推出式子后二分答案转判定，不断使用某个已经死掉的算法判断是否有负环，最终求得答案</p>
<p>对于那个已经死掉的算法，可以用</p>
<ul>
<li>最短路长度不超过 <span class="math inline">\(n\)</span></li>
<li>每个点入队次数不超过 <span class="math inline">\(n\)</span></li>
<li>最快的dfs形式</li>
</ul>
<p>可在最短路问题上，它还是死了</p>
<p>随随便便就能卡掉，虽然有各种优化，但是正式比赛只有比阿伟还勇的勇士敢写</p>
<p>但是网络流、判负环、差分约束等非最短路问题上，它还活着 o((&gt;ω&lt;
))o</p>
<p>一个最短路算法，如今基本不用在最短路问题上……</p>
<p>那么不是图论呢？</p>
<p>t2实质上是背包，那么通过dp求出最终的答案，判断是否大于等于0，实质是一样的</p>
<p>下面是几道题</p>
<p><a href="https://www.luogu.com.cn/problem/P3199">最小圈</a></p>
<p>双倍经验：<a href="https://www.luogu.com.cn/problem/UVA11090">Going
in Cycle!!</a></p>
<p><a href="https://www.luogu.com.cn/problem/P3288">方伯伯运椰子</a></p>
<p><a href="https://www.luogu.com.cn/problem/P3705">新生舞会</a>
与网络流结合</p>
<p><a href="https://www.luogu.com.cn/problem/P4322">最佳团体</a> 与树形
dp 结合</p>
<p><span class="math inline">\(updata\)</span> 2021.8.6 23:51</p>
<p>站外题 <a
href="https://www.acwing.com/problem/content/350/">最优比率生成树</a>
（我还没做</p>
<p>综上，分数规划可以当作加了一个多项式的二分答案来做，不需要很强的数学推导能力，而且是相对冷门的内容。出了二分以外，还有
Dinkelbach 迭代法，然而我不会</p>
<p> </p>
<p>然后是两道 Floyd 算法的题目</p>
<p><a href="https://www.luogu.com.cn/problem/P2419">Cow Contest</a></p>
<p><a href="https://www.luogu.com.cn/problem/P2047">社交网络</a></p>
<p>这两道题本质上是对考察对 Floyd 算法的理解</p>
<p>通过松弛操作解决传递闭包有关问题</p>
<p>$ X Y,Y Z X Z$​​</p>
<p>大概长这样</p>
<p>和通过松弛操作求出最短路数</p>
<p>本来今天还想学一下强连通分量，无奈时间喂给了 <span
class="math inline">\(osu!\)</span></p>
<p> </p>
<hr />
<p>好多内容还没讲</p>
<p>但现在是 7.28 23:10</p>
<p>今天就到这啦~</p>
<p> </p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>图论β</title>
    <url>/2021/natsu-GT2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>目前我所在的地区还没有太受烟花影响，就下了点小雨</p>
<p>但是这一个月一点作业都没写 qwq，说要换班结果现在都没有消息</p>
<p>今天还要水一篇题解（</p>
<p>好吧 ╮(╯-╰)╭，进入正题</p>
<p>这是一份图论总结</p>
<span id="more"></span>
<h2 id="最短路">最短路</h2>
<p>老生常谈的话题了。。</p>
<p>我们都知道最短路常用的三种算法： Dijkstra，Bellman-Ford，Floyd 其中
Dijkstra
算法是「纯粹的最短路算法」，它基于一个性质，即：当边权都为非负时，全局最小值不可能被其他节点更新，所以可以不断取出全局最小值标记并扩展。这也就导致了，他只能解决广义上可以转化为最短路模型的问题。它有堆优化和桶优化，但都不是本文的重点。</p>
<p><a href="https://www.luogu.com.cn/problem/P3008">Roads and
Planes</a></p>
<p><a
href="https://www.luogu.com.cn/problem/UVA12661">有趣的赛车比赛</a></p>
<p>这两题都是正经的「最短路问题」。</p>
<p>而 Bellman-Ford
就有意思得多。我们一般有用它的队列优化形式，也就是那个死掉的
SPFA。它有其他很多用处，<del>可惜我不会。</del></p>
<p>SPFA
算法的本质是对队列里的节点，用它能到达的节点对他进行「松弛」操作，使所有节点满足三角形不等式，对应到最短路问题里，就是
设 <span class="math inline">\(d(i)\)</span> 为原点到 <span
class="math inline">\(i\)</span> 的最短距离，<span
class="math inline">\(E\)</span> 为边集，则有 <span
class="math display">\[
\large {\forall} (x,y,z) \in E \quad d(y)\le d(x)+z
\]</span> 这像什么？DP！</p>
<p>DP 对状态空间的遍历构成一张 DAG，顺序为该 DAG
的拓扑序。DP无法处理图上最短路问题的原因，是因为图不一定是一张DAG，状态之间有后效性。所以加一维，就可以求出最短路了，将其用滚动数组优化，就是
Bellman-Ford 算法。</p>
<p>这里懒得写了，就放几张 rxz 课件的图。</p>
<p><img data-src="https://i.loli.net/2021/07/31/ktlbg3Ico1ZrmxF.png" /></p>
<figure>
<img data-src="https://i.loli.net/2021/07/31/LUaA3o8Hj6lDKOJ.png"
alt="image.png" />
<figcaption aria-hidden="true">image.png</figcaption>
</figure>
<figure>
<img data-src="https://i.loli.net/2021/07/31/9jcRSEpkbs3VrNX.png"
alt="image.png" />
<figcaption aria-hidden="true">image.png</figcaption>
</figure>
<p>所以，SPFA
的每一轮松弛操作，对应状态转移。最后，全部的状态收敛，满足三角形不等式（优化后的状态转移方程与三角形不等式不谋而合），所以就求出了答案。</p>
<p>我们回过头来看堆优化 Dijkstra，它实际上近似于「堆优化的
SPFA」，其中也有传奇的三角形不等式。</p>
<p>这启发我们，对于有后效性且不便于加维的
DP，我们可以使用类似最短路的方式进行状态转移。</p>
<p><a href="https://www.luogu.com.cn/problem/P4042">骑士游戏</a></p>
<p>经典的一道题，运用了上述思想。</p>
<p>Dijkstra
和类似拓扑序的顺序也能做，而且复杂度有保证，<del>但是不够刺激</del>。</p>
<p>看到题解里有人把一本通用来讲述 SPFA
用处的话贴了上来，顿时想起那本不仅大力推崇
SPFA，还花了大量篇幅讲述何种优化方式及用法，<del>然而全部都会被卡掉。</del></p>
<p>在这里吐槽一下这本书，通篇宋体，码风奇怪，抄袭，漏洞百出。</p>
<p>就算讲解很敷衍，也坚持把全部代码贴出来。</p>
<p>而且抄袭的部分感觉讲解不完整，
<del>没有联系上下文</del>，非抄袭的部分思维局限，舍本逐末，讲不到核心的思维。</p>
<p>很多人只知道去建模，只浮于表面。</p>
<p><a href="luogu.com.cn/problem/P1948">Telephone Lines</a></p>
<p>这道题有两种做法。一是用上述 DP
与最短路问题的共通性，建分层图，直接跑最短路。</p>
<p>另一种是二分答案，将不花钱的线看作权为0的边，其余为权为1的边，判断是否可行。</p>
<p>这种情况又有两种做法。</p>
<p>像不像二叉树  (￣︶￣*))</p>
<p>一种是使用双端队列 BFS，另一种是在 BFS
时，扩展完一个节点，将其改为未访问的状态</p>
<p>两种方式有细节的不同。</p>
<p>这启发我们，SPFA 是基于 BFS
的算法，其能求解权不为1的图的最短路问题。</p>
<p>最短路问题与
DP，类似拓扑序的奇妙结合，则需要我们自己做题去思考并体会了。</p>
<p><a href="https://www.luogu.com.cn/problem/P3953">逛公园</a>
(这题可以看出 pair 的常数之大)</p>
<p><a href="luogu.com.cn/problem/P2446">大陆争霸</a></p>
<p><a
href="https://www.luogu.com.cn/problem/solution/P3645">雅加达的摩天楼</a>
(奇怪的题，<del>我还没做</del>)</p>
<p>SPFA
还能用来判负环，以及用在分数规划中。具体可以参考我之前的博客。</p>
<p>至于 floyd，我之前的两篇博客都讲得差不多了，，</p>
<h2 id="生成树">生成树</h2>
<p>相信大家对 MST 很了解，这里就不细说概念了。</p>
<p>有两种常用算法 Kruskal 与 Prim。</p>
<p>Kruskal
算法基于贪心，由排序和并查集实现，每次选取权值最小的边加入最小生成树，简单好写。</p>
<p>Prim 算法维护最小生成树的一部分，及 MST 点集 <span
class="math inline">\(T\)</span> 和其他点集 <span
class="math inline">\(S\)</span>，每次找 <span
class="math inline">\(\min{_{x \in T,y \in T} \{z\}}\)</span>
这样一条边并加入 <span
class="math inline">\(T\)</span>，具体实现不作赘述。</p>
<p>感觉这部分没啥好说的，也可能是因为我做题少。</p>
<p>最小生成树上两点的路径就是两点的最小瓶颈路，即路上最大边权最小。</p>
<p>呃……好像就没了。</p>
<p>次小生成树和 kruskal
重构树都没有深入学，仅仅是知道。（<del>我连模板题都没切掉</del></p>
<p>随便水一个最短路径生成树吧。</p>
<p>在最短路算法进行的过程中，原点到每个点的最短路径是不断扩展的，而将这些路径加入一个集合，此集合就是一颗最短路径生成树，即所对于边
<span class="math inline">\((x,y,z)\)</span>，有 <span
class="math inline">\(d(y)=d(x)+z\)</span></p>
<p><a href="https://loj.ac/p/10064">黑暗城堡</a></p>
<p>对于上题，先跑一遍 Dijkstra，然后执行一个类似于 prim
算法的操作。即维护最短路径生成树的一部分，每扩展一个节点，就判断当前树中有多少节点满足上述条件，并将结果累乘，最终求得答案。</p>
<p>纯粹的生成树问题，要么很难，要么很水，大多数是配合其他算法解决树上图上问题，这里就不放题了。</p>
<h2 id="差分约束系统">差分约束系统</h2>
<p>差分约束系统是 <span class="math inline">\(N\)</span>
元一次不等式组，形如。 <span class="math display">\[
\large x_i-x_j\ge c_k \quad i,j \in X
\]</span> 其中 <span class="math inline">\(X\)</span> 是变量集。</p>
<p>当然不等式也可以变成 <span class="math inline">\(x_i-x_j \le
c_k\)</span> 这样。</p>
<p>与三角形不等式十分相似。</p>
<p>所以考虑将其与最短路问题相结合。如果把构成差分的两个变量看作节点，不等式的限制看作边与权，那么最短路数组
<span class="math inline">\(d(i)\)</span>
就是满足当前不等式的<strong>约束 </strong>下的 <span
class="math inline">\(i\)</span> 的最大值。</p>
<p>据 smy 所言，图论是在线性代数下的课程。</p>
<p>然而我并没有深入理解。。。</p>
<p>而由于这仅仅是一些点之间的关系，直接建图的话图不一定联通，所以有时候需要虚拟原点。还可能隐含一些限制，所以也要注意一些情况，如
<span class="math display">\[
\large d(x) \le d(x+1) \le d(x)+1
\]</span> 而这样的题目多是求最大值或最小值，不难想到</p>
<p>对于最大值而言，要使满足形如 <span class="math inline">\(x_i-x_j \le
c_k\)</span> 的式子最少，这是显然的</p>
<p>所以跑最短路，图中不应出现负环。</p>
<p>最小值则反之。</p>
<p><a href="https://www.luogu.com.cn/problem/P3275">糖果</a></p>
<p><a href="https://www.luogu.com.cn/problem/SP116">Intervals</a></p>
<p><a href="https://www.luogu.com.cn/problem/P4926">倍杀测量者</a></p>
<p>那么差分约束系统最有意思的地方在哪呢？</p>
<p>当然是 <strong>約束（やくそく）</strong>辣~</p>
<p><a
href="http://music.163.com/song?id=32235890">言葉のいらない約束</a></p>
<p>$ キミの背中押す、結んだ約束 $</p>
<p>$ 推动着你前行，我们定下的约定 $</p>
<h2 id="一些话">一些话</h2>
<p>莫名想起去年的暑假</p>
<p>那个没有OI，没有whk，没有被孤立，无忧无虑的暑假</p>
<p>那个曾经被我认为没有意义的暑假</p>
<p>在刷B站，玩游戏，听歌这种循环往复中感受到了夏日透出的清凉</p>
<p>仿佛能蒸融那些鼓吹“竞争”，支持学生内卷的噪音</p>
<p>我还记得那个夏天快要结束的时候</p>
<p>纵使滚滚乌云遮蔽了天空，耳机里的歌声仍然能把我带向更远的地方</p>
<p>然而开学后呢？</p>
<p>”成绩”所带来了虚荣也好，麻烦也罢，彻底毁了我对周围人的信任</p>
<p>发生了很多事，每一次都让我看清那些我曾经当作“朋友”的人的丑恶嘴脸</p>
<p>剩下的，也就只剩那些交情不是很深的阿宅们了……</p>
<p>$ 夏の夢に染まっていたいだけ $</p>
<p>$ 想要只做着夏日的梦$</p>
<p>$ お願いどうか覚めないでよ $</p>
<p>$ 拜托了请不要让我醒过来 $</p>
<p>回收初二这一年，一直在逃避，逃避学校内的压力，逃避自己的现状与未来</p>
<p>似乎没有做好一件事</p>
<p>而如今，自己确实走上了自己希望的道路吧。。。</p>
<p>Tommy_Keen，K神的签名大概是</p>
<p>be strong，小伙子，在OI上，你比半年前强了那么多</p>
<p>半年前，1月31日</p>
<p>我最没有方向的时候</p>
<p>一个连 dfs
都不会写的菜鸡，还受到了外界的打击以及胡思乱想给自己的心理压力</p>
<p>前几天的夜晚</p>
<p>那个又迷失了方向的夜晚</p>
<p>“不必在意那些学了好多年的人啊！你一定能超过他们！”</p>
<p>“他们只是时间比我充足啊！”</p>
<p>如是安慰自己</p>
<p>可在晦暗的房间里</p>
<p>回应我的只有氤氲着「嵐（あらし）」气息的风裹挟着的划过眼角的游丝</p>
<p>远处的天空，只有单调的灰黑色</p>
<p>是那么孤独 那么孤独</p>
<p>但愿我能做到吧</p>
<p>耳边响彻的 <a
href="http://music.163.com/song?id=33367345">夜明けと蛍</a></p>
<p>夏が来ないままの空を描いたなら</p>
<p>/若然幻想出那片夏日仍未到來的天空</p>
<p>君は僕を笑うだろうか</p>
<p>/你大概會取笑我吧</p>
<p>明け方の夢</p>
<p>/於拂曉之夢中</p>
<p>浮かぶ月が見えた</p>
<p>/能看見那片浮月之空</p>
<p>朝が来ないままで</p>
<p>/若然能永不迎來清晨</p>
<p>息が出来たなら</p>
<p>/如此呼吸生存下去的話</p>
<p>遠い遠い夏の向こうへ</p>
<p>/那就往遙遠 遙遠的 夏日的彼方去</p>
<p>冷たくない君の手のひらが見えた</p>
<p>/我並不寒冷 因為能看見你的手心</p>
<p>淡い朝焼けの夜空</p>
<p>/遍染淡淡朝霞的夜空</p>
<p>夏がこないままの街を今</p>
<p>/此刻走於這夏日仍未到來的街道上</p>
<p>あぁ 藍の色 夜明けと蛍</p>
<p>啊啊 蒼藍之色 黎明與螢光</p>
<p><a href="http://music.163.com/song?id=30053338">IA 版本</a></p>
<p><a href="http://music.163.com/song?id=1302953072">鹿乃版本</a></p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>夢よ未来へ   前往未来的梦啊</title>
    <url>/2021/Miku-14th/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><figure>
<img data-src="https://i.loli.net/2021/08/31/tsg5eRPBGNdiVLu.jpg"
alt="92389224_p3.jpg" />
<figcaption aria-hidden="true">92389224_p3.jpg</figcaption>
</figure>
<span id="more"></span>
<p>学 OI 的这大半年中，是 VOCALOID 一直陪伴着我。</p>
<p>而今天是在我的 OI 生涯中陪 Miku 过的第一个生日，想不到竟然和 Miku
同岁了呢。</p>
<p>『夢よ未来へ』是 Miku 10th 的贺曲，也是我很喜欢的一首歌。</p>
<p>或许正如 『夢よ未来へ』中的歌词那样</p>
<p> </p>
<blockquote>
<p>この絆も あの出会いから広がり続けてる</p>
<p>这份羁绊，从相遇那时开始，便一直延续着</p>
<p> </p>
<p>たとえ迷い込んで不安な時も君の音を手繰るように</p>
<p>就算迷惘不安的时候，只要回想起你的声音</p>
<p> </p>
<p>その笑顔が</p>
<p>那份笑容</p>
<p> </p>
<p>その歌声が僕らを繋いでる</p>
<p>还有那份歌声，将我们联系起来</p>
</blockquote>
<p><img data-src="https://i.loli.net/2021/08/31/QwaRbs6mWi5PJuD.png" /></p>
<p> </p>
<blockquote>
<p>ひとつずつ　出会う空　巡る雲</p>
<p>在每一片天空、每一片云朵之下的、每一次相遇</p>
<p> </p>
<p>ひまわりのように顔をあげて</p>
<p>如同向日葵扬起脸儿一般</p>
<p> </p>
<p>胸の中に明かりを落としていく</p>
<p>摘下了心中的那道光芒</p>
<p> </p>
<p>新しい言葉</p>
<p>崭新的话语</p>
<p> </p>
<p>懐かしい気持ちが</p>
<p>令人怀念的感觉</p>
<p> </p>
<p>ゆっくりじんわりと溶けてゆく</p>
<p>逐渐地融在了一起</p>
</blockquote>
<p><img data-src="https://i.loli.net/2021/08/31/kQP43AUYlsVhtaK.png" /></p>
<p> </p>
<blockquote>
<p>眩しくても　目を開けて</p>
<p>即使暄目耀眼，也要张开双眼</p>
<p>歌の在処を　辿っていけば</p>
<p>若是能够抵达，歌所在的彼端</p>
<p>柔らかな心に　触れられる</p>
<p>便能够触碰到，那颗柔软的心</p>
<p>心も体も　全部があるべき姿のまま</p>
<p>心灵也好身体也好，都回忆到那应有的姿态</p>
<p> </p>
<p>この世界の　どこへでも</p>
<p>无论是到天涯还是海角</p>
<p>あなたを連れて行ける</p>
<p>都要和你一起走下去</p>
<p> </p>
<p>まぼろしじゃない</p>
<p>这才不是幻影</p>
<p>魔法なんてないけど</p>
<p>虽然我并没有魔法</p>
<p>ひとつだけ信じて　胸の奥</p>
<p>但在我内心深处，我一直深信着</p>
</blockquote>
<p><img data-src="https://i.loli.net/2021/08/31/7rRH6LYbXwQDTJK.jpg" /></p>
<p> </p>
<blockquote>
<p>夢の水面に触れた手が</p>
<p>轻抚梦境水面的这双手</p>
<p> </p>
<p>あなたと出会って波を立てた</p>
<p>与你相遇，泛起涟漪</p>
<p> </p>
<p>綺麗な夏のさざ波　今</p>
<p>而我的内心，现在</p>
<p> </p>
<p>心をまとうと帆風は走る</p>
<p>也正随着那道美丽的夏日涟漪，扬帆起航</p>
</blockquote>
<figure>
<img data-src="https://i.loli.net/2021/08/31/layGChN7ikrt6XT.jpg"
alt="92389139_p0.jpg" />
<figcaption aria-hidden="true">92389139_p0.jpg</figcaption>
</figure>
<p> </p>
<blockquote>
<p>僕らだけが描き出せる世界の中</p>
<p>在只有我们才能描绘出的这个世界中</p>
<p>君の色が溢れて</p>
<p>洋溢着你的颜色</p>
<p> </p>
<p>叶うならば</p>
<p>如果能够实现的话</p>
<p>ずっと一緒に描いていきたいよ</p>
<p>我想要一直与你一同描绘下去</p>
<p> </p>
<p>ねぇ いつか届く</p>
<p>呐，总有一天能传达到</p>
<p>君と僕との この物語</p>
<p>你和我的这个故事</p>
</blockquote>
<p><img data-src="https://i.loli.net/2021/08/31/NKMGJasmOVo8deA.jpg" /></p>
<p> </p>
<blockquote>
<p>だから未来へいこう</p>
<p>所以</p>
<p> </p>
<p>繋ぎ合わせよう</p>
<p>让我们手牵手走向未来吧</p>
<p> </p>
<p>これからもよろしくね</p>
<p>今后也请多多关照哦</p>
</blockquote>
<p><img data-src="https://i.loli.net/2021/08/31/9SfCH6xpy2Ii3D1.jpg" /></p>
<p><img data-src="https://i.loli.net/2021/08/31/ImYCwjuzxJkT56A.jpg" /></p>
<p><img data-src="https://i.loli.net/2021/08/31/eOQEmliINY97Rcs.jpg" /></p>
<p> </p>
<blockquote>
<p>僕らは　歌声を見ていて</p>
<p>我们见证着这个歌声</p>
<p> </p>
<p>ここにいる</p>
<p>在这里相遇</p>
<p> </p>
<p>君の瞳の中</p>
<p>前往到你那眼眸中</p>
<p> </p>
<p>未来を望んで行く</p>
<p>存在的那个未来去吧</p>
</blockquote>
<p><img data-src="https://i.loli.net/2021/08/31/NaYwBmDeXvPCQA8.jpg" /></p>
<p> </p>
<p>图源 Pixiv Miku 14th 贺图</p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>Miku</tag>
      </tags>
  </entry>
  <entry>
    <title>「图论学习笔记」#1 最小树型图</title>
    <url>/2022/notes-graph-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="最小树型图">最小树型图</h2>
<p>最小树形图，也可以理解为有向图的最小生成树。</p>
<span id="more"></span>
<p>更学术地说，在一张有向带权图 <span class="math inline">\(G\)</span>
中，找出一棵以 <span class="math inline">\(root\)</span>
为根，权值和最小的有向生成树，满足：</p>
<ul>
<li><span class="math inline">\(root\)</span> 入度为 0，其余节入度为
1</li>
<li>任意两点 <span class="math inline">\((u,v)\)</span> 间，有且仅有 1
条简单路径</li>
</ul>
<h2 id="朱刘算法">朱刘算法</h2>
<h3 id="理论">理论</h3>
<p>朱刘算法是一个能在 <span class="math inline">\(O(nm)\)</span>
的时间内验证有向带权图是否有最小树型图，并且能求出此图。</p>
<p>首先保证图没有自环且连通。</p>
<p>接着就是算法的过程：</p>
<ol type="1">
<li>对于每一个点，分别找到它们的最小入边，构成一张新图。</li>
<li>如果新图没有环且连通，那么此时就是所求的最小树形图。</li>
<li>否则将一个环缩成一个点，建立新图，重新计算边权，重复以上过程。</li>
</ol>
<p>严格证明？不会。</p>
<p>但也是类似于 Kruskal 的贪心，只是多了缩点。</p>
<p><del>感性理解一下，显然是对的</del>。</p>
<h3 id="实现">实现</h3>
<p>如何去实现呢？前两步显然不难，最大的问题在于缩点后的边权怎么计算。</p>
<p>对于一个环，最终一定是将它断成一条链，那么就必须舍弃一条边。贪心删除最大的边？显然不可以，如果向下图一样删边，那么如果
A 只有一条权值巨大的入边呢？这个贪心就 fAKe 了。</p>
<figure>
<img data-src="https://s2.loli.net/2022/02/11/GyauMAeoQZYNLCI.png"
alt="断环为链" />
<figcaption aria-hidden="true">断环为链</figcaption>
</figure>
<p>所以我们不能直接破坏这个环。</p>
<p>将环缩成一个点 <span class="math inline">\(u\)</span> 之后，<span
class="math inline">\(u\)</span>
继承了<strong>所有环内节点的所有环外入边</strong>。而建立新图后只会选择一条最小入边。且选择对于一个环内节点
<span class="math inline">\(v\)</span>，选择 <span
class="math inline">\(v\)</span> 的环外入边只会被动地删掉 <span
class="math inline">\(v\)</span> 的环内入边。</p>
<p>所以如果我们先把环内所有边的权值统计入答案，再把每条环外入边的权值减去相对应的环内入边的权值，则无论选择那条环外入边，最终都不影响答案。</p>
<p>如下图，<span class="math inline">\((Y \rightarrow B)\)</span>
早在第一个阶段就被 pass 掉。<span class="math inline">\((X \rightarrow
B)\)</span> 是 <span class="math inline">\(B\)</span>
的一条环外入边，那么如果把 <span class="math inline">\(X\)</span> 的权值
<span class="math inline">\(x\)</span> 减去 <span
class="math inline">\(B\)</span> 的环内入边的权值 <span
class="math inline">\(3\)</span>，即直接累加 <span
class="math inline">\(x-3\)</span> 的话，就相当于删去了 <span
class="math inline">\((A \rightarrow B)\)</span>
这条边。且对于其他的环外入边，这种方案都是可行的。</p>
<p><img data-src="https://s2.loli.net/2022/02/11/OQeAHkhruwdRNc6.png" /></p>
<p>于是这个问题就解决了，具体看代码。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> root<span class="token punctuation">,</span> in<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">edge</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">zhuliu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 环的数量</span>
		<span class="token function">memset</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// in[x]=x的最小入边边权, pre[x]=in[x]对应的点</span>
		<span class="token function">memset</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// v[x]=在新图中，能从哪一个点访问到x</span>
		<span class="token function">memset</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 标记所属的环（或者点）</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token operator">!=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">&lt;</span>in<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>
			in<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">,</span> pre<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">;</span>
        <span class="token comment">// 寻找最小边权</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>inf<span class="token operator">&amp;&amp;</span>i<span class="token operator">!=</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 不连通，不存在最小树型图</span>
		in<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// 根没有入边</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			ans<span class="token operator">+=</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 直接累计边权</span>
			<span class="token keyword">int</span> x<span class="token operator">=</span>i<span class="token punctuation">;</span>
			<span class="token keyword">while</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>i<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">!=</span>root<span class="token punctuation">)</span> v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> x<span class="token operator">=</span>pre<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 标记能够访问到的点，如果访问回来了，那么就找到环了</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>root<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>cnt<span class="token punctuation">;</span>
				<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span>pre<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>y<span class="token operator">!=</span>x<span class="token punctuation">;</span>y<span class="token operator">=</span>pre<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> id<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span>
                <span class="token comment">// 所有换上节点标记为第几个环</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cnt<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">// 没有环，直接结束</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>cnt<span class="token punctuation">;</span>
        <span class="token comment">// 不在环中的点，自成一个“环”，便于统计</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> u<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span> v<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
			e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token operator">=</span>id<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>id<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 缩点，将每条边的两个端点改为它们所属的环编号</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">!=</span>v<span class="token punctuation">)</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">-=</span>in<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 不是自环，进行减权操作</span>
		<span class="token punctuation">&#125;</span>
		n<span class="token operator">=</span>cnt<span class="token punctuation">,</span> root<span class="token operator">=</span>id<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 修改信息</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> ans<span class="token punctuation">;</span> <span class="token comment">// 返回答案</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="题目">题目</h2>
<p><a href="https://www.luogu.com.cn/problem/UVA11865">UVA11865 Stream
My Contest</a></p>
<p>二分答案。</p>
<p>二分最小带宽 <span
class="math inline">\(mid\)</span>，判断是否能用带宽不小于 <span
class="math inline">\(mid\)</span> 的边构成一棵花费不超过 <span
class="math inline">\(cost\)</span> 的最小树型图。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">10005</span><span class="token punctuation">,</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> len<span class="token punctuation">,</span> tot<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> root<span class="token punctuation">,</span> in<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">edge</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> t<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> ll <span class="token function">zhuliu</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>inf<span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token operator">!=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">&lt;</span>in<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>
			in<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">,</span> pre<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>inf<span class="token operator">&amp;&amp;</span>i<span class="token operator">!=</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token function">memset</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">memset</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		in<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			ans<span class="token operator">+=</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">></span>cost<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">int</span> x<span class="token operator">=</span>i<span class="token punctuation">;</span>
			<span class="token keyword">while</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>i<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">!=</span>root<span class="token punctuation">)</span> v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> x<span class="token operator">=</span>pre<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>root<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>cnt<span class="token punctuation">;</span>
				<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span>pre<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>y<span class="token operator">!=</span>x<span class="token punctuation">;</span>y<span class="token operator">=</span>pre<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> id<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cnt<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>cnt<span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> u<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span> v<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
			e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token operator">=</span>id<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>id<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">!=</span>v<span class="token punctuation">)</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">-=</span>in<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		n<span class="token operator">=</span>cnt<span class="token punctuation">,</span> root<span class="token operator">=</span>id<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	tot<span class="token operator">=</span>n<span class="token punctuation">,</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> root<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token operator">>=</span>x<span class="token punctuation">)</span> e<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	ll ans<span class="token operator">=</span><span class="token function">zhuliu</span><span class="token punctuation">(</span>tot<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> ans<span class="token operator">&lt;=</span>cost<span class="token operator">&amp;&amp;</span>ans<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> l<span class="token operator">=</span>inf<span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>cost<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token operator">++</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span> <span class="token operator">++</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
		l<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"streaming not possible.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> l<span class="token operator">=</span>mid<span class="token punctuation">;</span> <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d kbps\n"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>T<span class="token operator">--</span><span class="token punctuation">;</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P2792">小店购物</a></p>
<p>如果把所有要买的物品都买一次，那么剩下的物品就都能用最小价格买了。所以目标就是计算所有物品都买一次的花费。</p>
<p>如果买 <span class="math inline">\(u\)</span> 能把 <span
class="math inline">\(v\)</span> 优惠到花费 <span
class="math inline">\(w\)</span> 元，那么连一条 <span
class="math inline">\((u \rightarrow v)\)</span>，权值为 <span
class="math inline">\(w\)</span> 的边。同时将虚拟节点 <span
class="math inline">\(n+1\)</span> 与每个物品连一条权值为原价 <span
class="math inline">\(c_i\)</span> 的边。</p>
<p>虚拟节点目的是让图连通并符合题意，注意这里不能是
0，因为在朱刘算法中，多个数组的 0 是未计算的状态。</p>
<p>这里的 <span class="math inline">\(n\)</span>
是要买的商品总数，连完边后就多了一个虚拟节点，<span
class="math inline">\(n\)</span> 要 变成 <span
class="math inline">\(n+1\)</span>。边数 <span
class="math inline">\(m\)</span> 就是要买的商品数与优惠的数量之和。</p>
<p>建完图后跑最小树型图，最后在加上剩下的物品就好了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> root<span class="token punctuation">,</span> mp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> ans<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> in<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">edge</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span> <span class="token keyword">double</span> w<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> e<span class="token punctuation">[</span>N<span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> edge <span class="token function">trans</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">double</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	edge e<span class="token punctuation">;</span>
	e<span class="token punctuation">.</span>u<span class="token operator">=</span>u<span class="token punctuation">,</span> e<span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">,</span> e<span class="token punctuation">.</span>w<span class="token operator">=</span>w<span class="token punctuation">;</span>
	<span class="token keyword">return</span> e<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token function">zhuliu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>inf<span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token operator">!=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">&lt;</span>in<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>
			in<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">,</span> pre<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>inf<span class="token operator">&amp;&amp;</span>i<span class="token operator">!=</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token function">memset</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">memset</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		in<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			ans<span class="token operator">+=</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">int</span> x<span class="token operator">=</span>i<span class="token punctuation">;</span>
			<span class="token keyword">while</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>i<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">!=</span>root<span class="token punctuation">)</span> v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span> x<span class="token operator">=</span>pre<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>root<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>cnt<span class="token punctuation">;</span>
				<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span>pre<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>y<span class="token operator">!=</span>x<span class="token punctuation">;</span>y<span class="token operator">=</span>pre<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> id<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cnt<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>cnt<span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> u<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span> v<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
			e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token operator">=</span>id<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>id<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">!=</span>v<span class="token punctuation">)</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">-=</span>in<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		n<span class="token operator">=</span>cnt<span class="token punctuation">,</span> root<span class="token operator">=</span>id<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>t1<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">double</span> x<span class="token punctuation">;</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">,</span> c<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	m<span class="token operator">=</span>n<span class="token operator">+</span>t2<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> e<span class="token punctuation">[</span>t2<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">trans</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>t2<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span> <span class="token keyword">double</span> w<span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
		u<span class="token operator">=</span>mp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token operator">=</span>mp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>u<span class="token operator">||</span><span class="token operator">!</span>v<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
		a<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
		e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">trans</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token operator">++</span>n<span class="token punctuation">,</span> root<span class="token operator">=</span>n<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">?</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span><span class="token function">zhuliu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最小树型图</tag>
      </tags>
  </entry>
  <entry>
    <title>树上问题α</title>
    <url>/2021/natsu-TRpr1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>树上问题可谓是老生常谈，家喻户晓了。凭着老少皆宜，童叟无欺，毒瘤遍地，常数离奇，复杂度迷等特点使
NOI 系列比赛出了很多奇葩树据结构题。</p>
<p>那么我们就开始吧！</p>
<p>设 <span class="math inline">\((x \rightarrow y)\)</span>
为存在由节点 <span class="math inline">\(x\)</span> 到节点 <span
class="math inline">\(y\)</span> 的路径。</p>
<span id="more"></span>
<h2 id="从最基本的-lca-开始">从最基本的 LCA 开始</h2>
<p>此 LCA 非彼 lca（某候选队爷），但是相信大家都明白 LCA
到底是个什么，这里不做赘述。</p>
<p>你说，你会 LCA，那我便考你一考。。。</p>
<p>LCA，究竟是甚么意思啊？</p>
<p>不就是最近公共祖先吗，<del>去 LOJ 看 lca 的头像啊</del>。</p>
<p>对呀对呀！......LCA 有四种求法，你知道吗?</p>
<p>编不下去了。 QwQ</p>
<p>LCA 有倍增、树剖、Tarjan、欧拉序 <span
class="math inline">\(+\)</span> RMQ 四种常见求法。</p>
<p>那么有人会问了：向上标记法呢？</p>
<p>呐。。请问各位写过它吗（</p>
<p><del>写过当我没说</del></p>
<p>咳咳，实际上是因为这个算法太过返璞归真，就跟解方程时遍历集合 <span
class="math inline">\(R\)</span> 来求解类似。</p>
<p>而那四种多半都是对这个算法的优化。</p>
<p>倍增最好写，实质上是对向上标记法的倍增优化。就是</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> y<span class="token operator">=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 一定要写大于等于啊！！！</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者写</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">,</span>j<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> y<span class="token operator">=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>我在这里出错好多次了（暴露了我的菜。</p>
<p>倍增与树形 dp 非常相似，算法的流程简单明了。</p>
<p>设 <span class="math inline">\(f(x,k)\)</span> 为节点 <span
class="math inline">\(x\)</span> 的第 <span
class="math inline">\(2^k\)</span> 个祖先，显然转移为 <span
class="math display">\[
\large f(x,k)=f(f(x,k-1),k-1) \quad k \le log_2n
\]</span> 在 DFS / BFS 预处理节点深度的时候可以顺便求出 <span
class="math inline">\(f\)</span> 数组。</p>
<p>顺带一提 DFS / BFS
的同时还可以求出与每个节点到根的距离，然后求两点间的最小距离。实际应用时，应根据要预处理出的信息选择两种遍历方式，<del>但还是
DFS 好写，用处更多</del>。</p>
<p>查询的时候，对于点 <span
class="math inline">\((x,y)\)</span>，将它们置于同一深度，然后。 <span
class="math display">\[
\text{You jump I jump!}
\]</span> 通过 <span class="math inline">\(k\)</span> 递减顺序不断让
<span class="math inline">\((x,y)\)</span> 往上
“跳”，比较祖先就行了。</p>
<p>复杂度为</p>
<p>预处理 <span class="math inline">\(O(n \times log_2n)\)</span></p>
<p>单次查询 <span class="math inline">\(O(log_2n)\)</span></p>
<p><del>就是容易被卡</del></p>
<p> </p>
<p>Tarjan
同（du）志（liu）的算法是一个离线算法，实质上是对向上标记法的并查集优化。</p>
<p>但是实在是不常用，最起码我没在实际做题时用过。</p>
<p>Tarjan 同志的算法一向思路巧妙。</p>
<p>此算法将「访问完毕并且回溯的节点」标记为2，「访问了且尚未回溯的节点」标记为1，其余为0。同时开始时每个节点各自为一个集合。</p>
<p>用并查集维护「上一个回溯的父节点」。</p>
<p>但是我说不清楚。。很巧妙的算法，并且这位同志证明了每次查询为 <span
class="math inline">\(O(1)\)</span>。</p>
<p>预处理 <span class="math inline">\(O(n)\)</span>。</p>
<p>处理询问 <span class="math inline">\(O(n+m)\)</span>，<span
class="math inline">\(m\)</span> 为询问个数。</p>
<p>就是常数有时比倍增还难看</p>
<p>在此不再赘述。</p>
<p>至于树剖和欧拉序 <span class="math inline">\(+\)</span>
RMQ，我还没有系统地去学习，大概下一篇树上问题博客会说一下。</p>
<h3 id="接着经典题走一波">接着经典题走一波。</h3>
<p><a href="https://www.luogu.com.cn/problem/P5836">Milk Visits</a></p>
<p>累加每条路径的权，查询两件间距离时候大于0即可。</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P3398">仓鼠找sugar</a></p>
<p>设 <span class="math inline">\(dis(x,y)\)</span> 为 <span
class="math inline">\((x \rightarrow y)\)</span> 的最短路径长度。</p>
<p>如果 $(u v) $ 和 <span class="math inline">\((p \rightarrow
q)\)</span> 的最短路径相交，那么有 <span class="math display">\[
\large dis(LCA(u,v),p)+dis(LCA(u,v),q)=dis(p,q)
\]</span> 或者 <span class="math display">\[
\large dis(LCA(p,q),u)+dis(LCA(p,q),v)=dis(u,v)
\]</span></p>
<p> </p>
<p>也就是有一条路径的 LCA 在另一条路径上。</p>
<p>稍加思索不难证明。</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P1967">货车运输</a></p>
<p>题目要求不超过限重，不难想到因该最大化每条路的限重。所以在原图上求出最大生成树。</p>
<p>那么对于点 <span class="math inline">\((x,y)\)</span>，如果在并查集中
<span class="math inline">\(x\)</span> 与 <span
class="math inline">\(y\)</span> 不在同一个集合，则 <span
class="math inline">\(x\)</span> 不能到达 <span
class="math inline">\(y\)</span>。</p>
<p>接下来就是每辆车最多运送的货物，不难想到最多运送的货物就是 <span
class="math inline">\((x \rightarrow y)\)</span>
路径上权值最小的边。</p>
<p>如果用朴素的算法去求最小的边权，那么复杂度会上天，<span
class="math inline">\(O(n)\)</span>。</p>
<p>联系我们对想上标记法的倍增优化，不难想到对求路径上最小的边权进行倍增优化。</p>
<p>设 <span class="math inline">\(d(x,k)\)</span> 为节点 <span
class="math inline">\(x\)</span> 到它的 <span
class="math inline">\(2^k\)</span> 辈祖先这条路径上最小的边权。</p>
<p>接着不难想到转移 <span class="math display">\[
\large d(x,k)=\min{ \{ d(x,k-1),d(f(x,k-1),k-1) \} } \quad k \le log_2n
\]</span> 可以在求 <span class="math inline">\(f\)</span>
数组的同时求出。</p>
<p>所以，在求 LCA 的过程中不断维护路径上最小的 <span
class="math inline">\(d(x,k)\)</span>。</p>
<p>这题毒瘤数据，给出的图不一定联通。</p>
<p>顺带一提，<span class="math inline">\(d\)</span>
数组是什么，怎么转移，在第一页且算法相同的题解中，只有神鱼讲到了。某些人直接一笔带过甚至完全没有提到过。</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P4281">紧急集合 /
聚会</a></p>
<p>三个点两两求出 LCA，三个点的深度减去它们 LCA 的深度就是答案2。</p>
<p>而三个点 LCA 中必定有两个点相同，那个不同的即为答案1。</p>
<p>至于证明。。画图是显然的，但是论述的话感觉很多思路都不是那么有说服力，就不献丑了，自己说的自己都不能完全信。</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P4427">求和</a></p>
<p>大概是 LCA+树上差分，但又没去差分，仅仅是用了它的思路。</p>
<p>由于指数范围较小，我们设 <span class="math inline">\(g(x,k)\)</span>
为根节点到节点 <span class="math inline">\(x\)</span> 路径上点权的 <span
class="math inline">\(k\)</span> 次方和，在 DFS 时维护，设 <span
class="math inline">\(dep(x)\)</span> 为节点 <span
class="math inline">\(x\)</span> 的深度。不难想到转移 <span
class="math display">\[
\large g(x,k)=g(y,k)+(dep(x)-1)^k \quad (y \rightarrow x)
\]</span> 这是建立在点上的，可以看作点权，求路径上的点权和。</p>
<p>我们知道，两点之间路径的点权和可以表示为 <span
class="math display">\[
\large ty(x)+ty(y)-ty(z)-ty(f(z,0)) \quad z=LCA(x,y)
\]</span> 其中 <span class="math inline">\(ty(x)\)</span> 必须是根节点到
<span class="math inline">\(x\)</span> 点的点权和，画图不难证明。</p>
<p>所以这题就可以切了。 <span class="math display">\[
\large g(x,k)+g(y,k)-g(z,k)-g(f(z,0),k) \quad z=LCA(x,y)
\]</span> 注意要加上 <span class="math inline">\(mod\)</span>
的两倍，不然会当场去世（</p>
<p>同时，借着这题说一下树上差分。</p>
<h2 id="树上差分">树上差分</h2>
<p>差分本是对序列的操作，是前缀和的逆运算。树上差分就是将树上点/边的区间操作转化为差分，用前缀和求出维护的信息。</p>
<p>大概就是这种思想，没啥可说的，通常与 LCA 结合。</p>
<p> </p>
<p><a href="https://loj.ac/p/10131">暗的连锁</a></p>
<p>经典题目，显然加入非树边 <span class="math inline">\((x \rightarrow y
)\)</span> 之后会形成一个环，将树上 <span class="math inline">\((x
\rightarrow y)\)</span> 的边上任意一边斩断，再斩断非树边，就可以击败
Dark。</p>
<p>姑且称非树边 <span class="math inline">\((x \rightarrow y )\)</span>
将将树上 <span class="math inline">\((x \rightarrow y)\)</span>
的路径「覆盖」了一次，不难想到，如果树边 <span class="math inline">\((u
\rightarrow v)\)</span>
被「覆盖」了多于一次，那么无论如何都不存在合法的方式将 Dark 斩断。</p>
<p>同时不难想到，如果一条树边没有被「覆盖」，那么将其斩断后再任意斩断一条非树边就能达到目的。
这题差分的是边权，求子树边权和，仿照上题的叙述方式，则有 <span
class="math display">\[
\large ty(x)+ty(y)-ty(z)-ty(z) \quad z=LCA(x,y)
\]</span> 是不是很像求两点间的距离？</p>
<p>所以开一个 <span class="math inline">\(w\)</span> 数组，如果有 <span
class="math inline">\((x \rightarrow y)\)</span>，就令 <span
class="math display">\[
w(x)+1,w(y)+1,w(z)-2 \quad z=LCA(x,y)
\]</span> 通过 DFS 累加子树的 <span
class="math inline">\(w\)</span>，最后求出方案数即可。</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P3128">Max Flow</a></p>
<p>与上题的区别仅仅是 「差分的是点权，求最大子树边权和」，在累加差分数组
<span class="math inline">\(w\)</span> 时取每颗子树的最大值即可。</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P3258">松鼠的新家</a></p>
<p>差分的是点权，求每个点的访问次数。给出的访问顺序两两求出 LCA
并且差分，与前两题基本相同。</p>
<p>注意最后需要将访问顺序 $ w(a_i)-1 i n $ ，因为差分时会多加一次。</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P6869">Putovanje</a></p>
<p>稍加思索不难发现，为了最小化费用，第 <span
class="math inline">\(i\)</span>
条边只能用单程票或多程票，并且取决于经过 <span
class="math inline">\(i\)</span> 的次数。</p>
<p>题目要求按照编号大小访问，不难想到两个点间的最短路径必定经过其
LCA，所以在倍增求 LCA 的时候将路径差分，最后用一次 DFS
求出每条边的访问次数，即<span class="math inline">\(g\)</span>
数组。</p>
<p>然后取 $ $​​​，累加 <span class="math inline">\(ans\)</span>​​​</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/CF191C">Fools and
Roads</a></p>
<p>题意很简单：有一颗 <span class="math inline">\(n\)</span>
个节点的树，<span class="math inline">\(k\)</span>
次旅行，问每一条边被走过的次数。</p>
<p>淼题，。，注意要按照边的顺序输出。</p>
<p> </p>
<p><a href="https://www.luogu.com.cn/problem/P1600">天天爱跑步</a></p>
<p>有名的毒瘤题。</p>
<p>通过简单推式子与转化为树上区间问题来解决。</p>
<p>lyd
在他的蓝书中已经讲得很清楚了，<del>懒得讲了</del>，就不献丑了。</p>
<h2 id="树的直径">树的直径</h2>
<p>通常意义上，直径为树上的最长链，可能有多条。</p>
<p>证明略，因为不知道问什么在 hexo 上报错。</p>
<p>两次 DFS / BFS
的思路都是相同的，都用到了「从一个节点出发能够到达的最远的节点一定是直径的一端」。</p>
<p>从任意节点出发记录最远能够到达的节点，它是直径的一端，再以它为起点记录最远能够到达的距离，显然那是另一端。</p>
<p>证明的话，写出的难度大于想到的难度，放个链接，<a
href="https://oi-wiki.org/graph/tree-diameter/">OI wiki</a></p>
<p>复杂度是显然的。</p>
<p>树形 dp
能优美地求出直径长度，并且能处理负权的情况，缺点也很明显，即相较于纯粹的
DFS，后者能维护更多的信息且更好写。但是 DFS / BFS
无法处理有负权的情况。</p>
<p><a href="https://www.luogu.com.cn/problem/P5536">核心城市</a></p>
<p>题目要求 <span class="math inline">\(k\)</span>
座城市建到一条链上。最小化最大距离，很容易想到是直径。</p>
<p>所以两次 DFS 求出直径，在第二次 DFS
时标记出直径上的父子关系，然后求出直径中点。</p>
<p>以直径中点为起点进行
DFS，求出每个从每个节点以它为根的深度和出发能够到达的最大深度。</p>
<p>然后将求出的最大深度与原来在树中的深度相减再+1。</p>
<p>最后将得到的数组排序，取第 <span class="math inline">\(k+1\)</span>
大的值即可。</p>
<p> </p>
<p>删掉了一题，过不了 hexo。</p>
<hr />
<p> </p>
<p>不写了，再写就猝死了 Orz</p>
<p>直径还有好多题，以后看情况写吧。</p>
<p>接下来会把做题中心转到 DP 与数学上。</p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>树上问题</tag>
      </tags>
  </entry>
  <entry>
    <title>「概率论学习笔记」#1 初步概念与公式</title>
    <url>/2022/notes-probblty-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="update-2022.2.19">update 2022.2.19</h2>
<p>增加了数学期望相关内容。</p>
<h2 id="前言">前言</h2>
<p>本人就没怎么系统地学习过概率这部分，自此开坑……</p>
<p>本文内容为概率论入门概念与公式，题目什么的，开学后有时间再说吧。</p>
<p>关于概率论中”试验“的概念不再赘述。</p>
<span id="more"></span>
<h2 id="概率">概率</h2>
<p>某个随机试验所有的可能结果称为样本空间，记为 <span
class="math inline">\(S\)</span>。<span class="math inline">\(S\)</span>
的每个元素即为样本点，同时它的子集为「随机事件」，简称事件。</p>
<p>设两个事件为 <span class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span>。则有</p>
<p><span class="math inline">\(A \cup B=A+B\)</span>，称为 <span
class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 的和事件，即 <span
class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 其中至少有一个发生。</p>
<p><span class="math inline">\(A \cap B = AB\)</span>，称为 <span
class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 的积事件，即 <span
class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 同时发生。</p>
<p>这两个等号意思是左右两边写法不同，实际相同。下面的等号就是取值了。</p>
<p><span class="math inline">\(A \cap B = \varnothing\)</span>，称 <span
class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 互斥，指 <span
class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 不会同时发生。</p>
<p><span class="math inline">\(A \cup B = S\)</span> 且 <span
class="math inline">\(A \cap B = \varnothing\)</span>，称 <span
class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 互为对立事件，即对于每次试验，<span
class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 必有且仅有一个会发生。</p>
<p>如果 <span class="math inline">\(A\)</span> 是否发生对 <span
class="math inline">\(B\)</span> 是否发生毫无影响，称 <span
class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 为互相独立的事件。</p>
<p> </p>
<p>在相同条件下进行 <span class="math inline">\(n\)</span>
次试验，其中事件 <span class="math inline">\(A\)</span> 发生了 <span
class="math inline">\(N_a\)</span> 次，称 <span
class="math inline">\(\frac{N_a}{n}\)</span> 为事件 <span
class="math inline">\(A\)</span> 的频率。在重复进行同一试验时，<span
class="math inline">\(A\)</span>
发生的频率总是接近某个常数，这个常数称为事件 <span
class="math inline">\(A\)</span> 的概率，记为 <span
class="math inline">\(P(A)\)</span>。<span
class="math inline">\(A\)</span> 不发生的概率为 <span
class="math inline">\(P(\overline A) = 1-P(A)\)</span>。</p>
<p>概率有如下性质。</p>
<ol type="1">
<li><p>非负性：<span class="math inline">\(P(A) \in
[0,1]\)</span>。</p></li>
<li><p>规范性：对于必然事件 <span
class="math inline">\(S\)</span>，<span
class="math inline">\(P(A)=1\)</span>，对于不可能事件 <span
class="math inline">\(S&#39;\)</span>，<span
class="math inline">\(P(S&#39;)=0\)</span>。</p></li>
<li><p>容斥性：<span class="math inline">\(P(A \cup B) = P(A)+P(B)-P(A
\cap B)\)</span>。特别地，若 <span class="math inline">\(A\)</span> 与
<span class="math inline">\(B\)</span> 为互斥事件，那么 <span
class="math inline">\(P(A \cup B)=P(A)+P(B)\)</span>。</p></li>
<li><p>互斥事件的可加性：就像上条的特例那样。若 <span
class="math inline">\(\{ A_{1 \sim n} \}\)</span> 为互斥的 <span
class="math inline">\(n\)</span> 个事件，那么 <span
class="math display">\[
P(\bigcup_{i=1}^n A_i) = \sum_{i=1}^n P(A_i)
\]</span> 如果 <span class="math inline">\(A\)</span> 与 <span
class="math inline">\(B\)</span> 是对立事件，那它们一定互斥，而 <span
class="math inline">\(A \cup B = S\)</span>，所以 <span
class="math inline">\(P(A \cup B) = P(A) + P(B) = 1\)</span>。</p></li>
<li><p>独立事件的可乘性：若 <span class="math inline">\(A\)</span> 与
<span class="math inline">\(B\)</span> 是互相独立的事件，那么 <span
class="math inline">\(P(A \cap B) = P(AB) = P(A) \cdot P(B)\)</span>。若
<span class="math inline">\(\{ A_{1 \sim n} \}\)</span> 为互相独立的
<span class="math inline">\(n\)</span> 个事件，那么 <span
class="math display">\[
P(\bigcap_{i=1}^n A_i) = \prod_{i=1}^n A_i
\]</span></p></li>
<li><p>伯努利大数定理：在某次试验中 <span
class="math inline">\(A\)</span> 发生的概率为 <span
class="math inline">\(p\)</span>，不发生的概率为 <span
class="math inline">\(q\)</span>，则在 <span
class="math inline">\(n\)</span> 次试验中 <span
class="math inline">\(A\)</span> 发生至少 <span
class="math inline">\(m\)</span> 次的概率为 <span
class="math inline">\((p+q)^n\)</span> 展开式中 <span
class="math inline">\(p^n\)</span> 到 <span class="math inline">\(p^m
q^{n-m}\)</span> 各项之和。</p>
<p>如果在一次试验中，<span class="math inline">\(A\)</span> 发生的概率为
<span class="math inline">\(p\)</span>，不发生的概率为 <span
class="math inline">\(q\)</span>，那么 <span
class="math inline">\(n\)</span> 次试验中 <span
class="math inline">\(A\)</span> 恰好发生 <span
class="math inline">\(k\)</span> 次的概率为 <span
class="math display">\[
P_n(k) = C^k_n \cdot p^k \cdot q^{n-k}
\]</span></p></li>
</ol>
<p><del>第 6 条好像在 OI 中没啥用</del>。</p>
<p>OI 中大多研究古典概率。在古典概率中，构成 <span
class="math inline">\(A\)</span> 的事件有 <span
class="math inline">\(a\)</span> 个，不构成的有 <span
class="math inline">\(b\)</span> 个，那么 <span
class="math inline">\(P(A) =
\frac{a}{a+b}\)</span>。其实就是另一种形式的组合计数（）。</p>
<h3 id="条件概率">条件概率</h3>
<p><span class="math inline">\(P(A | B)\)</span> 表示在发生 <span
class="math inline">\(B\)</span> 的前提下发生 <span
class="math inline">\(A\)</span>。有 <span class="math inline">\(P(A|B)
= \frac{P(AB)}{P(B)}\)</span>。</p>
<p>贝叶斯公式： <span class="math display">\[
P(A|B) = \frac{P(B|A) \cdot P(A)}{P(B)}
\]</span> 全概率公式：样本空间 <span class="math inline">\(S\)</span>
分成若干个不相交的部分 <span class="math inline">\(\{ B_{1 \sim n}
\}\)</span>，则 <span class="math display">\[
P(A) = \sum_{i=1}^{n} P(A|B_i) \cdot P(B_i)
\]</span>
全概率公式的关键是划分样本空间，做到不重不漏，并计算出每个划分下的概率，从而得到总概率。</p>
<h2 id="数学期望">数学期望</h2>
<p>如果一个随机变量全部可能的取值只有有限个或可数无穷个，则称它为一个离散型随机变量。</p>
<p>一个离散型随机变量的期望是试验中每个结果的概率乘以其结果的总和。换言之，设
<span class="math inline">\(X\)</span> 为一个离散型随机变量，取值为
<span class="math inline">\(\{ x_{1 \sim n}\}\)</span>，相应概率为 <span
class="math inline">\(\{ p_{1 \sim n} \}\)</span>，那么期望为 <span
class="math display">\[
E(X) = \sum_{i=1}^n p_i x_i
\]</span> 比如一枚骰子，设点数为 <span
class="math inline">\(X\)</span>，则 <span class="math inline">\(P(X=1)
\sim P(X=6)\)</span> 均为 <span
class="math inline">\(\frac{1}{6}\)</span>，对应的期望为 <span
class="math inline">\(E(X) = \sum_{i=1}^6 {i \times \frac{1}{6}} =
3.5\)</span>。</p>
<p>数学期望的相关内容：</p>
<ol type="1">
<li><p>数学期望是线性函数，满足 <span class="math inline">\(E(aX+bY) = a
\cdot E(X) + b \cdot E(Y)\)</span>。对应骰子那个例子，<span
class="math inline">\(E(X=1) \sim E(X=6)\)</span> 的期望都是各自 <span
class="math inline">\(X\)</span> 的取值，也就是上面那个 <span
class="math inline">\(i\)</span>。那么可以直接把 <span
class="math inline">\(\frac{1}{6}\)</span> 提出来，即 <span
class="math inline">\(E(X) = \frac{1+2+3+4+5+6}{6} =
3.5\)</span>。</p></li>
<li><p>独立事件的可乘性。同概率。 <span class="math display">\[
E(X \cap Y) = E(XY) = E(X) \cdot E(Y)
\]</span></p></li>
<li><p>概率 <span class="math inline">\(P(X)=p\)</span>
时，期望成功次数为 <span
class="math inline">\(\frac{1}{p}\)</span>。</p></li>
<li><p>全期望公式</p></li>
</ol>
<p><span class="math display">\[
E(Y) = E(E(Y|X)) = \sum_{i=1}^n P(X=x_i) \cdot E(Y | X=x_i)
\]</span></p>
<p>说实话，本人目前并不理解全期望公式。以后明白了再来补上。(´。＿。｀)</p>
<p>更多的内容，会尽力写下去的！</p>
<p><strong>flag 2022.2.15 19:30</strong></p>
<p> </p>
<h2 id="最后的话">最后的话</h2>
<p>要开学了，生活再次没有希望了呢。</p>
<p>但我仍祈祷</p>
<blockquote>
<p>過ぎ去っていく日々に意味はない</p>
<p>若逝去的日子没有任何意义</p>
<p>なら明日の僕は僕じゃない</p>
<p>那么明日的我将不会是我</p>
</blockquote>
<p> </p>
<p>仍然期待下一个夏天</p>
<blockquote>
<p>なんて君は笑ってたよな</p>
<p>为什么那时的你在笑呢</p>
<p>遠い夏の記憶</p>
<p>遥远的夏日记忆</p>
<p>もう逢えなくても</p>
<p>即便已经不能再相见</p>
<p>二度と帰れなくても</p>
<p>即便已经不能再回去</p>
<p>それは美しい</p>
<p>那仍然是美丽动人的</p>
<p>僕らだけの夏だったろう</p>
<p>只属于我们的夏天吧</p>
<p> </p>
<p>さよならI love you</p>
<p>再见了 I love you</p>
<p>    —— orangestar「快晴」</p>
</blockquote>
<p>至此。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>「概率论学习笔记」#2 概率分布与例题</title>
    <url>/2022/notes-probblty-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="概率分布">概率分布</h2>
<ol type="1">
<li><strong>两点分布</strong></li>
</ol>
<p>又称为伯努利分布，0-1 分布。</p>
<p>其模型为：一场试验只有成功（结果为 1）与失败（结果为
0）两种结果。成功概率为 <span
class="math inline">\(p\)</span>，则失败概率为 <span
class="math inline">\(1-p\)</span>。例如“抛一枚硬币，正面朝上为成功”。</p>
<span id="more"></span>
<p>其期望为 <span class="math display">\[
E(X) = p \times 1 + (1-p) \times 0 = p
\]</span></p>
<ol start="2" type="1">
<li><strong>几何分布</strong></li>
</ol>
<p>在伯努利试验中（成功为 1，失败为 0），定义离散变量 <span
class="math inline">\(X\)</span> 为得到一次成功所需要的试验次数。那么在
<span class="math inline">\(k\)</span> 次实验中，直到第 <span
class="math inline">\(k\)</span> 次才成功的概率是 <span
class="math display">\[
P(X=k) = (1-p)^{k-1}p
\]</span> 其期望为 <span class="math display">\[
E(X) = \frac{1}{p}
\]</span> 证明：</p>
<p>令 <span class="math inline">\(q=1-p\)</span>，则 <span
class="math display">\[
E(X) = p + 2 qp + 3 q^2p \cdots = \sum_{k=1}^{\infty} kq^{k-1}p =
\frac{p}{(1-q)^2} = \frac{1}{p}
\]</span> <img data-src="https://s2.loli.net/2022/06/04/3ygH89o1Txnq2Yk.png" /></p>
<p>我是懒狗，直接放图。</p>
<p>不过这个倒是很好理解，假如某彩票中奖概率为
10%，那么平均下来中奖的期望次数就是 10 次。</p>
<ol start="3" type="1">
<li><strong>二项分布</strong></li>
</ol>
<p>这个的模型是：“进行 <span class="math inline">\(n\)</span>
次伯努利试验，成功的次数”。设 <span class="math inline">\(X\)</span>
为某个事件发生的次数，那么发生 <span class="math inline">\(k\)</span>
次的概率为 <span class="math display">\[
P(X=k) = C^{k}_n p^k q^{n-k}
\]</span> 这么怎么长的这么像二项式定理呢？</p>
<p>由如下式子不难理解 <span class="math display">\[
(p+q)^n = \sum_{k=0}^n C^{k}_n p^k q^{n-k}
\]</span> 由于 <span class="math inline">\(p+q
=1\)</span>，所以以上两式都是等于 1
的。而在一个样本空间内，概率的总和即为 1。</p>
<p>接着把它展开 <span class="math display">\[
\sum_{k=0}^n C^{k}_n p^k q^{n-k} = C^0_n p^0 q^n + C^1_n p^1q^{n-1} +
\cdots + C^n_n p^n q^0
\]</span> 成功 <span class="math inline">\(k\)</span> 次，失败 <span
class="math inline">\(n-k\)</span> 次的交事件就是 <span
class="math inline">\(p^k q^{n-k}\)</span>，再从 <span
class="math inline">\(n\)</span> 次试验中钦定 <span
class="math inline">\(k\)</span> 次成功，方案数 <span
class="math inline">\(C^k
_n\)</span>。因为每一次试验实质是相同的，所以可以直接乘起来。<del>如果不是的话就得用加法了。</del>由于总和为
1，所以一定不重不漏。</p>
<p>另一些思考。</p>
<blockquote>
<p>回顾上面的几何分布，<span class="math inline">\((1-p)^{k-1}p =
pq^{k-1}\)</span>，不看系数对应到二项分布的公式里就是进行了 <span
class="math inline">\(k\)</span> 次试验，成功次数为 1。那么系数就是
<span class="math inline">\(C^1_k =
k\)</span>，任意让一次试验成功即可，因为每一次试验实质是相同的，所以可以直接乘起来。归纳一下，对于成功次数更多的情况依然成立。</p>
</blockquote>
<p>其期望为 <span class="math display">\[
E(X) = np
\]</span> 证明较复杂，略。这个也很好理解，扔 600 次骰子，出现点数 1
的期望次数为 100。</p>
<ol start="4" type="1">
<li><strong>超几何分布</strong></li>
</ol>
<p>模型为：“抽样不放回”。例如，今有 <span
class="math inline">\(N\)</span> 个产品，其中有 <span
class="math inline">\(K\)</span> 个不合格，抽出 <span
class="math inline">\(n\)</span> 个送检。设送检样品中不合格产品数量为
<span class="math inline">\(X\)</span>，那么有 <span
class="math inline">\(k\)</span> 个不合格的概率为 <span
class="math display">\[
P(X=k) = \frac{C^k_K C^{n-k}_{N-K}}{C^n_N}
\]</span> 所有事件概率相同，直接套古典概率模型。</p>
<p>从 <span class="math inline">\(K\)</span> 个不合格品中选出 <span
class="math inline">\(k\)</span> 个，方案数为 <span
class="math inline">\(C^k_K\)</span>，剩下的 <span
class="math inline">\(n-k\)</span> 合格品个从 <span
class="math inline">\(N-K\)</span> 个合格品中选出。总的方案数为 <span
class="math inline">\(C_N ^n\)</span>。</p>
<p>其期望为 <span class="math display">\[
E(X) = n \frac{K}{N}
\]</span> 证明略，没啥意思。</p>
<h2 id="一些数学题">一些数学题</h2>
<p>概率论在 OI
中算是个小知识点，一般只会当作题目的“附加菜”，不过概率这部分高中和大学还是要当作一个数学分支来学的。下面放上一些
NOIP 初赛真题和另一些题目。</p>
<p>大概以后会就概率论写个 3，整理一些 OI 题目。</p>
<h3 id="t1">T1</h3>
<p>一家四口人，假定每个人生日属于每个月份的概率相同且不同人之间相互独立。</p>
<p>至少两个人生日属于同一月份的概率是（ ）</p>
<p>A. <span class="math inline">\(1/12\)</span></p>
<p>B. <span class="math inline">\(1/144\)</span></p>
<p>C. <span class="math inline">\(41/96\)</span></p>
<p>D. <span class="math inline">\(3/4\)</span></p>
<p> </p>
<p>答案 <span class="math inline">\(\frac{12^4 - (12 \cdot 11 \cdot 10
\cdot 9)}{12^4} = \frac{41}{96}\)</span></p>
<p>选 C。</p>
<h3 id="t2">T2</h3>
<p>欢乐喷球：儿童游乐场有个游戏叫“欢乐喷球”，正方形场地中心能不断喷出彩色乒乓球，以场地中心为圆心还有一
个圆形轨道，轨道上有一列小火车在匀速运动，火车有 6 节车厢。</p>
<p>假设乒乓球等概率落到正方形场地的每个地点，包括火车车厢。小朋友玩这个游戏时，只能坐在同一个火车车厢里，可以在自己的车厢里捡落在该车厢内的所有乒乓球，每个人每次游戏有
3 分钟时间，则一个小朋友独自玩一次游戏期望可以得到（
）个乒乓球。假设乒乓球喷出的速度为 2
个/秒，每节车厢的面积是整个场地面积的 1/20。</p>
<p><img data-src="http://luogu-ipic.oss-cn-shanghai.aliyuncs.com/youti/48.png" /></p>
<p>A. 60</p>
<p>B. 108</p>
<p>C. 18</p>
<p>D. 20</p>
<p> </p>
<p>3 分钟一共有 360
个乒乓球，套二项分布的期望公式知道进入任何一个车厢的乒乓球期望次数（个数）为
<span class="math inline">\(360 \times \frac{1}{20} =
18\)</span>，由于每个小朋友每次只能在同一个车厢里，所以答案为 18。</p>
<p>选 C。</p>
<h3 id="t3">T3</h3>
<p>小明要去南美洲旅游，一共乘坐 3 趟航班才能到达目的地，其中第 1
个航班准点的概率是 0.9，第 2 个航班准点的概率为 0.8，第 3
个航班准点的概率为 0.9。如果存在第 <span
class="math inline">\(i\)</span> 个（<span class="math inline">\(i\in
\{1,2\}\)</span>）航班晚点，第 <span class="math inline">\(i+1\)</span>
个航班准点，则小明将赶不上第 <span class="math inline">\(i+1\)</span>
个航班，旅行失败。除了这种情况，其他情况下旅行都能成功。请
问小明此次旅行成功的概率是（ ）。</p>
<p>A. 0.5</p>
<p>B. 0.648</p>
<p>C. 0.72</p>
<p>D. 0.74</p>
<p> </p>
<p>准 准 准，<span class="math inline">\(0.9 \times 0.8 \times 0.9
\times = 0.648\)</span></p>
<p>晚 晚 晚，<span class="math inline">\(0.1 \times 0.2 \times 0.1 =
0.002\)</span></p>
<p>准 准 晚，<span class="math inline">\(0.9 \times 0.8 \times 0.1 =
0.072\)</span></p>
<p>准 晚 晚，<span class="math inline">\(0.9 \times 0.2 \times 0.1 =
0.018\)</span></p>
<p>加起来，<span class="math inline">\(0.74\)</span>。</p>
<p>选 D。</p>
<h3 id="t4">T4</h3>
<p>假设一台抽奖机中有红、蓝两色的球，任意时刻按下抽奖按钮，都会等概率获得红球或蓝球之一。有足够多的人每人都用这台抽奖机抽奖，假如他们的策略均为：抽中蓝球则继续抽球，抽中红球则停止。最后每个人都把自己获得的所有球放到一个大箱子里，最终大箱子里的红球与蓝球的比例接近于（
）。</p>
<p>A. 1 : 2</p>
<p>B. 2 : 1</p>
<p>C. 1 : 3</p>
<p>D. 1 : 1</p>
<p> </p>
<p>二项分布的期望。抽 <span class="math inline">\(n\)</span>
次，如果抽中红球为成功，那么 $E(X) = n $，剩下的是蓝球。答案自然是
1:1。</p>
<p>选 D。</p>
<h3 id="t5">T5</h3>
<p>在一条长度为 1
的线段上随机取两个点，则以这两个点为端点的线段的期望长度是（ ）。</p>
<p>A. <span class="math inline">\(1 / 2\)</span></p>
<p>B. <span class="math inline">\(1 / 3\)</span></p>
<p>C. <span class="math inline">\(2 / 3\)</span></p>
<p>D. <span class="math inline">\(3 / 5\)</span></p>
<p> </p>
<p>答案 B。</p>
<p>嗯，这题还是感性理解比较好。这里略。</p>
<p>我在找这题解法的过程中还看到了积分解法，因为前几天在学校里看过一点定积分的东西，所以觉得这个办法还挺妙的。虽然解释起来有些牵强，但是我顺便学了二次函数的一阶导数和积分式
<span class="math display">\[
f(x) = ax^2+bx+c
\]</span></p>
<p><span class="math display">\[
f&#39;(x) = 2ax+b
\]</span></p>
<p><span class="math display">\[
\int_{0}^{\infty} f(x)dx = \frac{1}{3}x^3 + \frac{1}{2}bx^2 + cx
\]</span></p>
<p>好了，就写这么多了。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>「琐记」#10 最后的作战</title>
    <url>/2022/yume-10/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="无题">无题</h2>
<p>现在是 2022 年 6 月 24 日，我市将于 6 月 25 日 8:00
公布中考成绩。</p>
<p>中考完这将近十天里，算是让我亲身体会体会了「彷徨」这个词。</p>
<span id="more"></span>
<p>徘徊不前……是啊，终于告别了文化课，终于有时间去做自己想做的事了。但是我仍然像好几个月之前一样，没有前进的方向。要么是没有方向地乱做题，要么是拖着越发疲惫的思维去学新知识。无论哪一种，我都感觉自己好像什么都没有学到，仅仅只会皮毛。就比如
CF
和洛谷月赛中的题目，有些是很简单的，但是我就是思考不进去，或者会了这个就不会那个。而
CCF 竞赛中的题目，我又会责怪自己“想到了，但是仍然达不到那个高度”
或者不会实现。还有那么多要学的东西，随着不断深入，难度也日渐增加，我学起来也是越发吃力。</p>
<p>我若是选择逃避，却总会因为某些原因再次回想起来那些事……</p>
<p>没有一个长久的集体，没有指导我的教练，为什么对我这么不公平呢？</p>
<p>这些是我不曾拥有的东西，也是我自闯入这个世界以来一直渴望的东西。</p>
<p> </p>
<p>明天中考成绩会公布，运气好的话，现状是会有转机的。但是，那是“运气好”啊。我即没有什么拿得出手的奖项，whk
也绝对进不了我市（大概 3w+
考生）rk100。我很想说出某个游戏主角那句“我的运气操之在我”，无奈没有这个底气。即便是中考超常发挥，也不一定能达到人家的标准啊。</p>
<p>若是没有这份运气，那便仍然是自己孤身一人，前行、失败，最终与这个擦肩而过的故事，真正地告别。</p>
<p>今天，是我最后的作战。</p>
<h2 id="阳炎与我的夏天">阳炎与我的夏天</h2>

    <div id="aplayer-FHFExbMW" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="26440343" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
<p>我喜欢《阳炎project》这个企划，无论是音乐还是小说。</p>
<p>之前一直在听阳炎曲，也根据歌词自己胡思乱想了很多故事，但是一直没有接触原作。</p>
<p>大概一个多月之前吧，我不经意间了解到了大概的剧情，就开始看电子书，中考结束后又买了实体书。</p>
<p>毫不犹豫地喜欢上阳炎，是因为深深贯穿着整部作品的——「友谊」。</p>
<p>朋友啊，在现实生活中，从来只有那些“表面朋友”，大家的关系止步于种种小事掀起的笑声。当被迫聚在一起的日子结束，大家就都散开了啊，都去找自己最好的朋友，都去做我不喜欢的事情，只有我还是孤零零呆在原地。我想用拙劣的笑话来引起他们的注意，可是他们甚至都没有给我一个眼神，径直走开了。总是望着他们的背影，总是想着“他们也有自己的正义，有自己的幸福”，久而久之，这种与我无关的快乐，也能让我在心中漾起小小的幸福。</p>
<p>在一系列机缘巧合下，我有了好多网络上的朋友。</p>
<p>在现实中，大家相隔有近有远，有的只有一面之缘，有的甚至素未谋面。但是，我知道，他们不是把我当成“网友”来看待的。</p>
<p>我不知道为什么，大家能够不嫌弃我这个人，在不怎么热闹的小群里待了将近一年。大家平时甚至没什么交流，但是一旦遇到什么事情，都是愿意分享给彼此的。因为
OI，大家聚集在一起，多么激动人心呢？</p>
<p>尽管仍然没有改变孤身自学的现状。但在我最低沉的时候，那么多人安慰我，协助我走出困境。我从来没有做到过什么，却仍然感受到了那份温暖，从心底里感到快乐。我也想尽我最大努力，帮助各位，哪怕仅仅是白忙活一趟呢？</p>
<p>我无数次地在学校里想起过各位，想起与各位相遇的那个夏天的故事，后悔我的所作所为，但决不后悔各位闯入了我的生活。</p>
<p>尽管我知道，我不是你们“最好的朋友”，我只是个情感丰富的过客罢了。可你们是我在孑然一身中，坚持下去、生活下去的最大动力啊！</p>
<p>我也想像 Summertime Record 的 PV
中那样，朋友们聚集积雨云下，夏日风中，可是终究不能实现啊。</p>
<p>所以，为了各位，为了真心帮助过我的所有人，我会努力让这个故事有一个值得我们去回忆的结局的！</p>
<p>无论多少次，只要还铭记着大家，心底都会这般期望吧。</p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>琐记</tag>
      </tags>
  </entry>
  <entry>
    <title>「琐记」#8 从今往后</title>
    <url>/2022/yume-8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img data-src="https://s2.loli.net/2022/05/01/O9RAHslVrcdJDI6.png" /></p>
<span id="more"></span>

    <div id="aplayer-ClJOTvUH" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1482724429" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
<p>夏天前的最后一个周末！</p>
<p>因为疫情，我市各行各业取消五一假期……但是无论如何抱怨，也改变不了现实啊！那就趁这个周末，好好怀念一下过去的日子吧！</p>
<p>上周好不容易考完一模，三天没有作业还挺舒服的，希望多多模拟考试（笑</p>
<p>去年也是 5 月 5
日立夏，我还记得那日相当炎热。上完体育课回教室的路上，那股夏天的热情仿佛能够触及到，我便想起了
Orangestar 的 Henceforth，也是我最喜欢的橙曲。</p>
<p>Henceforth——从今往后……</p>
<blockquote class="blockquote-center">
<p>あぁ！夏を今もう一回！</p>
<p>啊啊！夏日如今再度！</p>

</blockquote>
<p>最近连续阴天，今日终于放晴。</p>
<p>裹挟而来的暖风让我忘记学校中的种种不快，冰凉的快乐水涌着耳机中溢出的节奏与旋律，昨日还是阴沉沉的天空，今天闪烁着湛蓝的笑颜。距离中考还有四十多天，熬过去，就是暑假啦！</p>
<p>没有作业、无拘无束的暑假啊！能不能快点到来呢？</p>
<p>即便是做不到一切，即便是不能继续学
OI，我也希望夏天到来啊！纯粹的、属于自己的世界！</p>
<p>所以如今也要撑下去，不管以后的生活是怎么样的。</p>
<p>就把烦恼全部抛弃，奔向 5 月 5 日，奔向夏天吧！</p>
<p><img data-src="https://s2.loli.net/2022/05/01/woUNPVdn4ZbzYGa.png" /></p>
<blockquote class="blockquote-center">
<p>あぁ 君はもういないから</p>
<p>啊啊 你已经不在了</p>
<p>私は一人歩いている</p>
<p>唯有我踽踽独行</p>
<p>あぁ 腐るよりいいから</p>
<p>啊啊 比起郁闷还是好的</p>
<p>行くあてもなく歩いている</p>
<p>漫无目的地走着</p>
<p> </p>
<p>あぁ これからはそうだな</p>
<p>啊啊 以后也会是那样啊</p>
<p>何も求めずに生きていく</p>
<p>别无所求地活下去</p>
<p>あぁ お金よりいいでしょ</p>
<p>啊啊 比起金钱还是好的</p>
<p>これで何も失わないね</p>
<p>这样什么都不会失去吧</p>
<p>あぁ！ 泣くな空、心配ない！</p>
<p>啊啊！ 别哭泣啊天空，别担心！</p>
<p>終わりのない夜はないね</p>
<p>没有无尽的夜晚的</p>
<p>あぁ 闇はただ純粋で</p>
<p>啊啊 黑暗此般纯粹</p>
<p>恐れてしまう私が弱いだけ</p>
<p>唯有畏惧的我如此弱小</p>
<p> </p>
<p>あぁ！ 夏を今もう一回</p>
<p>啊啊！ 夏日如今再度</p>
<p>君がいなくても笑って迎えるから</p>
<p>就算你不在我也会欢笑迎接</p>
<p>だから今絶対に君も歩みを止めないで</p>
<p>所以现在你也绝对不要停下脚步</p>
<p>あぁ！ それだけの心臓が</p>
<p>啊啊！ 仅仅那样的心脏</p>
<p>絶え間なくアオく光を願うから</p>
<p>就会不止息地不成熟地祈愿光芒</p>
<p>仕方なくもう一回</p>
<p>别无他法再一次</p>
<p>変わらぬ今日を征くんだよ</p>
<p>会不变地踏上今天的征程的</p>
<p>何度でも</p>
<p>不论多少次</p>
<p> </p>
<p>あぁ 夏風邪 悪い夢</p>
<p>啊啊 夏日感冒 噩梦</p>
<p>見果てた希望 淡い残像</p>
<p>已看尽的希望 淡淡的残像</p>
<p>あぁ このままじゃ辛いかな</p>
<p>啊啊 这样下去会很难受吧</p>
<p>って繰り返してもまた願うから</p>
<p>就算重复这句话也还会祈愿的</p>
<p>読み返しても嘘はないから</p>
<p>重读一遍也毫无谎言</p>
<p>踏み出したら振り返らぬよう</p>
<p>为踏出脚步便不再回首</p>
<p>何もないけど旅は順調で</p>
<p>虽空无一物但旅行很是顺利</p>
<p>「君はその夢をもう一回」</p>
<p>「你再做一次那个梦吧」</p>
<p>長い長い闇を抜ける</p>
<p>穿过那漫长无尽的黑暗</p>
<p>抜ける</p>
<p>穿过去</p>
<p> </p>
<p>あぁ！ 夏を今もう一回</p>
<p>啊啊！ 夏日如今再度</p>
<p>君がいなくても笑って迎えるから</p>
<p>就算你不在我也会欢笑迎接</p>
<p>だから今絶対に君も歩みを止めないで</p>
<p>所以现在你也绝对不要停下脚步</p>
<p>あぁ！ それだけの心臓が</p>
<p>啊啊！ 仅仅那样的心脏</p>
<p>絶え間なくアオく光を願うから</p>
<p>就会不止息地不成熟地祈愿光芒</p>
<p>諦めずもう一回</p>
<p>绝不言弃再一次</p>
<p>変わらぬ今日を征くんだよ</p>
<p>会不变地踏上今天的征程的</p>
<p>何度も</p>
<p>多少次地</p>
<p> </p>
<p>あぁ 夏を今もう一回</p>
<p>啊啊 夏日如今再度</p>

</blockquote>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>琐记</tag>
      </tags>
  </entry>
  <entry>
    <title>「琐记」#1</title>
    <url>/2022/yume-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="开学第二周">开学第二周</h2>
<p>你仍想如去年此时那般做着梦，但你已经初三了。</p>
<p>未来会怎么样，谁知道呢？</p>
<span id="more"></span>
<p> </p>
<p>周末返校，便是考试。</p>
<p>第一场数学，直接考中考真题。在寒假里，同学们都在卷文化课，很多人都做过这次考试原题。而我呢？嗯，又错了
SB 题。</p>
<p>第二场语文，也是中考真题，乱写。老师甚至都没批，自己对答案。</p>
<p>第三场英语，还是中考真题，但是很弱欸。</p>
<p>考完了，21:30，晚自习结束了，回宿舍睡觉。</p>
<p>SB，某些人在宿舍里卷到 11:10，睡不好觉啊。</p>
<p> </p>
<p>周一要升国旗，某个房地产公司竟然赞助我校发奖学金？算了，本人期末考试多科爆炸，没我的份。初三奖学金还要等到下周举办百日誓师大会时再发……想不到我校能在全区前十占到
7 个名次，那个三级跳级部主任还吹了一番……</p>
<p>开学考试，全部都是寒假作业原题。我几乎没写，竟然进步了 40+
名次，数学英语都是 111pts。数学最后一道大题第二问算错，第三问与 <span
class="math inline">\(x\)</span> 轴交点看成了 <span
class="math inline">\(y\)</span> 轴，我真是 SB 啊！</p>
<p>接着就是正常的上课、考试、写作业、吃饭、睡觉，都习惯了。</p>
<p> </p>
<p>我们这里把卷称作“努”，卷人称为“努子”。</p>
<p>周围的人都开始努了起来，即便是寒假和我一样摸鱼的人，都开始变成那样了。可是，我所在的班级里的人，即便是发挥失常，也能稳上“B校”（本地最好的高中）。</p>
<p>那他们是为什么呢？如果是单纯为了中考考得更好一些，又为何如此拼命呢？为了B校搞的“鸿蒙班”！但是这东西水很深，我还摸不透。我班里已经有两个被“录取”的了，节假日全天在B校上课，上什么课？不过是初中内容的一些拓展罢了。可是却被某些人渲染成很强，很无敌的东西。然后呢，据班主任所言，有些同学不知是嫉妒还是怎么的，打心底里有些不服气与遗憾。可惜我与同学交往不深，不知道他们的真实想法。后来又知道那两个人只是获得了来上课的权力，中考结束后还要再考一次，名次达不到依然不录取。据说一模后还有选拔考试，但和我没啥关系。</p>
<p>那些努子们，谁都不承认自己偷努，却总是说别人努。更有甚者认为别人学会了新的东西是对自己不利，做难题时千方百计不让别人知道怎么做。看着它们学习到很晚，我感觉，我与他们越来越远了。生活在这么自私自利的集体里，真是煎熬啊。</p>
<p> </p>
<p>在这个学校中，唯一让我感到温暖的，是写完作业后、在宿舍里，能够看看自己带的
OI 书。虽然后面的内容越来越难，自己也不是什么
OIer，严重缺乏系统训练。但是每当看到那些东西的时候，总是有一种莫名的亲切感，仿佛找到了归宿，世间的一切也不重要了。我清楚的知道，这是我喜爱的东西，向往的东西，得不到的东西，可是全然没有距离感，只有那么美好的瞬间。O(∩_∩)O</p>
<p>闲暇时间还能思考一些问题（虽然难点的就想不出来）。有那么多想要去学习的知识，有那么多想要去解决的题目，我能做的只有空想罢了，可空想就足够让我心满意足了。</p>
<p>平时也经常幻想着，如果自己能够称为一个 OIer
的话，该有多好呢？如果有一起学习的朋友的话，该有多好呢？如果这一切都能改变的话，该有多好呢？这些我从未拥有的镜花水月，常常把麻木的文化课与考试卷融化，常常陪伴我安然入睡，常常引领我眺望那遥远的天空。</p>
<p>可是没有如果，只有我一个人。</p>
<h2 id="平凡的周末">平凡的周末</h2>
<p>周末了，学了一会 OI。</p>
<p>但是看到某个 OIer 的博客，对不起我又破防了，我感觉到了业余 OI
爱好者与 OIer 的差距。</p>
<p>我受够了这种看一周书，回家自学的方式，可是我又改变不了。只有惆怅与哀叹罢了。</p>
<p>依然想学下去，可学下去只剩下痛苦了。没有目标，没有方向，连未来的轮廓都看不到。</p>
<p>既然如此，那我为什么不沉浸于在学校里的那一丝丝的温暖呢？为什么不去当一个业余爱好者呢？</p>
<p>那擦肩而过的故事，随它去吧。</p>
<p>成为不了那个样子，只会写千字废话长文。因为你已然是那个，败北的少年。</p>
<p> </p>

    <div id="aplayer-XIcNZPwZ" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="26212284" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
<p> </p>
<h2 id="游戏与歌">游戏与歌</h2>
<p>杀机出事了。</p>
<p>睿站暂时不允许杀机视频过审，下架了许多视频，而且连杀机官方的认证都没有了。</p>
<p><img data-src="https://s2.loli.net/2022/02/26/wNQdqexoOFkRt54.png" /></p>
<p>玩了几把韩服，运气挺好，只有一把屠夫挂机。之前有一次连续四个挂机屠夫，直接整成修机游戏了。orz</p>
<p>我的 osu! 技术果然还是菜👎啊……</p>
<p> </p>
<p>闲着没事，打开了好久没有玩过的刺客信条：叛变。</p>
<p>即使这个游戏很老，画面落后，而且被称为大型
DLC。但是看着简陋的建模，听着潺潺的水声，总是不断地想起五年级第一次玩这个游戏的时候，无数个放学后的傍晚，在家人吃饭的催促声中打通每一个序列，在欣赏游戏中的美景时淡忘现实。中二少年沉浸在刺客与圣殿骑士的对抗与辩证中，沉浸在波澜壮阔的历史中。那一切，都是那么美好，但是为什么现在却笑不出来了呢？</p>
<p>是我们背叛了那段无忧无虑的时光吧。</p>
<p><img data-src="https://s2.loli.net/2022/02/26/9hU6pYwAzNZFaGT.png" /></p>
<p><img data-src="https://s2.loli.net/2022/02/26/AqVFJMOhw69bvNi.png" /></p>
<p><img data-src="https://s2.loli.net/2022/02/26/8FQJs2BYCRZhAI5.png" /></p>
<p> </p>
<p>orangestar 新专在网易云上架了，但是只有一首旧曲。</p>
<p> </p>

    <div id="aplayer-cVuyBwJS" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1921944983" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
<p> </p>
<p>尽管是平淡一曲，但是听着它，伴随着逐渐升高的气温，伴随着世界的复苏，能真切地感受到夏天的脚步近了。</p>
<p>冬日残留的寒冷仿佛是从夜晚深处透出的清凉，空洞的夜空中，繁星呼之欲出，将会来到这个世界……</p>
<p>一个没有梦想的人，也有权利仰望天空吧！</p>
<p> </p>
<p>匹老板新曲感觉不怎么样。就写这么多吧。</p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>琐记</tag>
      </tags>
  </entry>
  <entry>
    <title>「琐记」#2</title>
    <url>/2022/yume-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="睡眠不足">睡眠不足</h2>
<p>宿舍里的卷壬们，每天熬夜到十一点多。尽管大多是都是写不完作业，但也不排除刷题内卷的可能性。熬夜写作业也就算了吧，还一直讨论，根本就没法睡觉，他们安静下来，也快十二点了，而且早晨不到六点就把我吵醒。然后上午就困死。</p>
<span id="more"></span>
<p>不过如果我带个降噪耳机去应该可以，虽然没有能连蓝牙的设备。</p>
<h2 id="摆日誓师大会">摆日誓师大会</h2>
<p>周一，距离中考还剩 104
天，举行了摆日誓师大会。先是那个“多次全区第一”做演讲，然后就是快要退休的校长演讲。而我只能站在队伍里，被动接受着极端又错误的言论。</p>
<p>然后就是发奖学金，反正没有我。发完之后还是动员演讲，最后是某个很喜欢出风头的家伙带领宣誓。。</p>
<p>无聊，但是躲过了一次数学考试！</p>
<h2 id="奥术小子们">奥术小子们</h2>
<p>这一周我们数学老师讲了费马点，胡不归，阿氏圆。然而估计不会考到，费马点是去年我市中考新加入的，还没有先例。至于后面两个，就更偏了。</p>
<p>周四考了一套删减的数学真题，结果我班内一个对初中数学拓展内容以及高中内容有所了解的人
A 和一个很喜欢几何难题的人
B，被我们数学老师当场嘲讽“你学什么奥术，结果考这么点分，还是赶紧扔了吧”。我和这两个关系还可以，当场差点笑出声，心想“你们也有今天啊”。</p>
<p>B
扬言寒假学了一大堆三角恒等变换，他经常出很难的几何题刁难别人，我也经常嘲讽他不会数论和组合。至于
A，他明确地说过不会去了解不考的那些内容，只是上了一个数学拓展辅导班罢了。</p>
<p>另外我们内进入“鸿蒙班”的有两个人，其中一个女的自称寒假学了奥术，但是
B 说仅仅是一些初中内容的低级拓展，比如简单的多项式知识啥的（据 B
所言，我感觉其实那些东西算不上多项式），比如立方和立方差公式，齐次式啥的。而那个男的，好像是再看
PHO 的书。我不懂物理，不做评价，不过奥赛绝不是看书就能学会的。</p>
<p>而我自己看生成函数没看懂，小蓝本上啥也没讲，直接拿来做题了。另外组合极值真的好难，我的构造能力太差了，文化课数学根本用不着构造。看数论，真正的
MO 数论竟然比 OI 中数论更有意思（？</p>
<h2 id="陈睿nmsl">陈睿，nmsl</h2>
<p>睿站上杀机视频都给下架了，杀机 up 们都去别的平台投稿了，焯！</p>
<h2 id="不知从何时起">不知从何时起</h2>
<p>不知从何时起，我感觉我变了。</p>
<p>我觉得，永远像现在这样生活，也挺不错的吧。不用去钻研高深的东西，偶尔看看课本外的数学，应付文化课作业，不在意那一场场小测验，能和
SB 同学们因为一件小事而放声大笑。虽然有很多不满，但是生活轻松愉快。</p>
<p>那天我从教室向外面眺望，外面的世界平静依旧。天空还是那么深邃高远，蓝得那么空明。回头看桌上的题目与书本，环顾嘈杂的教室，这一切都是有意义的吧。飞奔的分针马上送来上课的铃声，回到狭窄的座位上，考试、听课、摸鱼，度过
45 分钟，没有闲暇的时间与精力去想那些遥远的事。</p>
<p>这算不上好，但也不是那么糟糕吧？</p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>琐记</tag>
      </tags>
  </entry>
  <entry>
    <title>「琐记」#3</title>
    <url>/2022/yume-3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="一些事">一些事</h2>
<p>这一周真就离谱。</p>
<span id="more"></span>
<p>我们宿舍里除了一个疑似水痘，已经停课就医了，宿舍和教室都消了毒。第二天，市区又有一个淄博来的密接在万达被抓到了。一时间人心惶惶，大家都以为要停课了。然而并没有。</p>
<p>昨天我们上体育课的时候，看到外面有警车路过，而且他去的那个方向浓烟滚滚。回家才知道，某医学院附属医院失火了（我以前还去过那里），火势非常大，我们在大概
4 公里外面都能看到。</p>
<p>然后下午放学的时候，班主任说明天（周六）全校做核酸，并且做好上网课的准备。还要我们把重要的书都带回去。</p>
<p>看来确实要停课了？</p>
<p>不过肯定不会太久，甚至可能就不会停，因为那些家伙们最不想看到的就是本校中考成绩下降。</p>
<p> </p>
<p>去学校做完核酸了。初三最后做，我们班又是最后一个班，最终到了 12:40
左右才弄完，午饭都没吃。</p>
<h2 id="两路人">两路人</h2>
<p>同学们与我之间，隔着不可跨越的鸿沟。</p>
<p>有些家伙，他们擅长应试并乐此不疲，总喜欢整理那些难度大到不可能在中考出现的文化课题目，总仰慕着那些课本里没有的公式与知识。每当别人不懂时，他们就很激动地炫耀着那些东西。</p>
<p>有些家伙，他们<strong>在学校里</strong>不怎么认真学习，但是也能取得很好的文化课成绩。他们常常嘲笑别人内卷、努力，但是他们却仅仅局限于文化课，凡是与考试无关的，不接触，也不想接触。</p>
<p>有些家伙，他们变得那么麻木，为了中考而麻木，做着不必要的麻木。为了一个所谓重点班，拼命学习钻研文化课知识，每天学到晚上
11 点。</p>
<p>在这些人之间，我已经撑不下去了，不仅仅是志不同道不合，而且我讨厌某个嘲笑他的同桌写作业的人，讨厌某个被别人捧为“不努力也是学霸”的人，讨厌某个说着摸鱼，实际上无比看重文化课的人。</p>
<p>尽管同学们是我在学校里唯一的能够交流的人，但在两条路之间不会产生我期望的友谊。做着停留于说说笑笑层面的朋友，留下浅浅的记忆，尽管不错，但我仍觉孤独。</p>
<p>于是，那天我写完作业之后。我在那一张纸上，不断地写着那些人的名字。那些给我带来过温暖的群友，那些陪伴过我的
OIer，那些我曾拼命追赶的神犇，那些教导过我的前辈……</p>
<p>他们，是我生活的动力，是我的那个深爱，却不敢去感受的世界。</p>
<h2 id="魂牵梦萦">魂牵梦萦</h2>
<p>我做不到。</p>
<p>OI。</p>
<p>我怎么就是离不开你呢？为什么做个梦都梦到你？为什么向别人介绍你的时候总带着一种自豪？为什么讲到那些内容的时候总是热血沸腾？为什么我还会把你看作我与同学们的不同？为什么你时时刻刻存于我心？</p>
<p>但为什么又是做不到全力以赴呢？</p>
<p>为什么啊！</p>
<p> </p>
<p>某天晚上在别的班的宿舍里，与一个考上“鸿蒙班”的人和两个没有考上的人闲聊。</p>
<p>我凭借自己不知道从哪里学来的东西，给他们讲全国范围（主要是山东）内的中学，各种强校、逸闻，以及包括公私合营在内的各种恶性发展。</p>
<p>最后和那个鸿蒙班之人聊到了竞赛，他问我学哪一科好，我回答说：“除了
OI，以你现有的条件，都是可行的。MO
竞争压力较大，你可以退而求其次。”然后他说他觉得每一科都很难。这时另一个人问我：“你知道
enjoyAI
吗？我当时去参加市里比赛的时候，泡泡龙（他的领队）说，鸿蒙班所在的 B
校也有学这个的。但是我想去 B
校航空班，他们待遇很好，教室里的灯都是护眼灯，还单独吃住。”我脱口而出：“但是
OI 弱爆了，连个认真学的都没有。”</p>
<p>正当话题进入僵局时，有个人突然说：“胜利油田某中学怎么样？阿钊不是想去吗？”我只能回答：“在山东，无论是高考还是竞赛都算强校，但是想要去那里的话相当困难，困难到不是你考的多好就能做到的。”</p>
<p>但是某人又说：“我老家那里学习好的都去那里了。”阿钊也表示他对那个学校以及所在的城市相当熟悉。</p>
<p>好嘛原来是油田某中学的后备生源基地，但是初二快要考生物地理的时候，我们的数学老师（89
年的教务处主任）就警告我们说我们这一级不能去别的地方上学了，B
校之前成绩不好就是因为好学生都走了。所以我们两个重点班的学生，除了阿钊，就没有说自己不想去
B
校的。但是阿钊不是一般人，他从来都是我行我素，大胆地在班里目标墙上写了油田某中学。</p>
<p>嘛，阿钊啊，绝对是我的好榜样，不管现实是怎么样，敢于追求自己需要的、想要的。</p>
<p> </p>
<p>不过静下心来，我所害怕的，我所彷徨的，不就仅仅是学校吗？苦于 B
校的文化课至上，压榨学生，放假少，没有 OI
的条件。但是当想要另辟蹊径时，却正逢某局与那些学校 PY
交易的暂时结束。</p>
<p>本来似乎抓到了一点希望，但是那条永远也传达不到的消息却是冰冷残酷的，不抱希望的苦苦等待揪着我的心，幻想和悲观的本性让我焦虑不堪。</p>
<p>可是，如果真的有机会的话，如果看起来有机会的话，如果在我心里有机会的话。</p>
<p>麻烦让我试试。</p>
<p>好吗？</p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>琐记</tag>
      </tags>
  </entry>
  <entry>
    <title>「琐记」#4</title>
    <url>/2022/yume-4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="网课">网课</h2>
<p>开始了，就如同两年前。</p>
<p>网课，不仅让课堂效率变得极低，而且让摸鱼变得更容易。但最重要的是大大增加了上网冲浪的时间。而且好像要上挺长一段时间。</p>
<span id="more"></span>
<p>不过代价就是让互联网外的生活变得更单调罢了。</p>
<p>而且作业量变少了好多。</p>
<p>一边听课，一边写作业或是上网冲浪，身边还有零食吃，真是惬意啊。</p>
<p>我才懒得理那些文化课之神呢！</p>
<p>这样一来时间就过得更快了，我甚至觉得我这一周什么都没做，什么都没去思考。</p>
<p>下周就是三月下旬了。</p>
<h2 id="快乐摸鱼">快乐摸鱼</h2>
<p>周四下午最后一节课，上的是政治。我一直再看两道 CF
的黄题，想出了两个看起来挺正确的算法。结果被发现正在摸鱼，直接提问我“XX市创建文明城市，公民应该怎么做”。不过那个题我之前看答案写上了，于是就说了两点。然后老师让另一个补充，他说的时候我又开始完善思路，结果老师直接说：“XXX又不知道在干什么了！”吓死我了，不过情况没有变得更差。</p>
<p>倒是我其中一个算法还是 fAKe 的。。。</p>
<p>周五晚自习，班主任让写作文，我写完提交之后一直在刷知乎，顺便在钉钉上和一个别的班的人聊天。他说斌斌（我们两个班的物理老师）给他们加课，快
9
点时才下课。我刚吐槽斌斌拖堂、讲的慢的毛病，就听到耳机里传来的他的声音“今天讲的整体受力分析，还有不会的吗？”。映入眼帘的就是斌斌清凉的头顶。</p>
<p>于是我就选择性无视他，去刷知乎。然而最后斌斌只讲了大概
20min，我却在一个很弱智的问题下面刷了超过半个小时。</p>
<p>斌斌虽然喜欢讲课，但是周末作业真的少，只有三道压强计算题。</p>
<p>虽然都是些不好笑的故事，但是在这无聊的日常中也是挺让人沉醉的啊。</p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>琐记</tag>
      </tags>
  </entry>
  <entry>
    <title>「琐记」#5</title>
    <url>/2022/yume-5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="网课">网课</h2>
<p>网课时的生活是枯燥且无趣的。</p>
<p>每天早早起床，上到中午。中午吃完饭也就一个小时的时间，又要上课。接着上到下午五点半，六点二十多准时上晚自习，晚自习上到九点半。很累，然后就直接去睡觉。</p>
<p>虽然每天作业都不如在学校里时多，但是依旧是疲于终日盯着电脑屏幕。</p>
<span id="more"></span>
<p>唯一的希望，便是现在触手可及的互联网。互联网实在是太精彩了，精彩到能够忘记垃圾的人生。</p>
<p>我们这一届有两个重点班，17 和 18，我在 18。上课时和 17
班一个人闲聊，他说他们班主任从 10:40 上课到 11:20
都没有进入正题，一直在给他们做思想工作。大概能猜到是鼓吹内卷之类的东西。当天晚自习，想不到我们班主任也开始给我们做思想工作。我听了一会，于是就把声音关了……不过我听到的唯一有价值的话就是“你们就是光玩也能考上
B
校”。是啊！这句话立足于现实情况，非常准确啊！可是后面却开始说“但是能进哪个班……”“你以后就可能后悔……”抱歉，我还真不会后悔。</p>
<p>下周末线上月考，但是语文只有 1.5
个小时，已知数学、政治、历史、化学全选择，由此推断英语和物理也很有可能全是选择。要在一天内考完。</p>
<p>17 班班主任（初三级部主任）说，设 <span
class="math inline">\(A\)</span> 为中考延期，<span
class="math inline">\(P(A) \approx 0\)</span>。</p>
<p>哦太棒了！80 多天的假期一天不少！</p>
<p>虽然还要考体育，但是中考不延期就足够了！</p>
<p>班主任说开学最早 4 月底，好欸！开学后就没多少时间了！</p>
<p>啊，网课生活，真是精彩又快乐啊！</p>
<h2 id="气象人们">气象人们</h2>
<p>上文提到的那个 17
班的人，他因为用某强碱溶液做了些不太正确的事，被无限期休学了。他是个气象人，很喜欢台风。</p>
<p>他把我拉进了一个北京气象爱好者群，他们分为热迷、冷迷啥的，还老是说着一堆奇怪的话。我还在那个群里认识了一个上海的高三气象人，某个舍友来自历城二中的北京气象人。后者问我是啥迷，我说只是单纯喜欢夏天胜过别的季节罢了，结果他就认为我是热迷，把我拉进了一个热迷群……那个群里还有雨迷，认为华北地区要连续十年大暴雨，补足地下水，还有争论全球气候最好的城市……</p>
<p>他们在群里争论各种关于天气的话题，偶（经）尔（常）发一些女性的图片进行评价。</p>
<p>上课的时候还能水群，不错。</p>
<h2 id="一些小事">一些小事</h2>
<p>AK 加速器在 3.26 由完全免费改为每天 0:00-14:00 免费了，，</p>
<p>尽管华北有一场倒春寒，但是也能明显感觉到，气温正在逐步回升。</p>
<p>《关于班主任潜伏在每一堂课和班级群这档子事》，幸好我不在班级群里。</p>
<p>大课间统一做健身操，那叫什么？儿童长高训练？</p>
<p>我向别人讲述胡不归问题的奇怪背景故事，感觉还挺有意思的。</p>
<p> </p>
<p>想不到我这段歌词又让我想起了一些过去……</p>
<blockquote>
<p>翌日は結局ドンマイで</p>
<p>不要介意第二天的结局如何</p>
<p>何の収穫も得られなくて</p>
<p>我们该怎么办</p>
<p>もうどうすりゃ良いかわかんないや！</p>
<p>什么收获都没有 我不知道这样算不算好</p>
<p>心で叫んでも空しくて。</p>
<p>即使用心在叫也是徒劳</p>
<p>僕は現実を振り払って</p>
<p>我抛开现实</p>
<p>『明日にはきっと見つかるさ！』って。</p>
<p>明天一定能够找得到</p>
<p>そんな僕に応えるように</p>
<p>就像是回应我的话语</p>
<p>笑う少女の笑顔が悲しくて…。</p>
<p>女孩微笑的脸颊是那样的悲伤</p>
<p>（悲しくて…）</p>
<p>那么悲伤 那么悲伤…那么悲伤……</p>
</blockquote>

    <div id="aplayer-nmcGcoYu" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="31830615" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
<p> </p>
<p>什么收获都没有 我不知道这样算不算好！</p>
<p>即使用心在叫也是徒劳！</p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>琐记</tag>
      </tags>
  </entry>
  <entry>
    <title>「琐记」#9</title>
    <url>/2022/yume-9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="胡思乱想与知难而退">胡思乱想与知难而退</h2>
<p>不知道是哪一个周末，我看了很多人的 SDOI2022
游记，就如同去年这时候我看那一些人的省选游记一样。</p>
<span id="more"></span>
<p>写了那么多题，拿了那么多奖项，有那么多经验的那么多人，倒在了省选这一关。而我的同龄人们，很多都已经有了省队的水平。那么难的题目，我去了估计也是爆零，那么长的思考过程，恐怕我一生也想不到。进队？迟早把这个念头打消了也许更好。</p>
<p>有课程，有题库，有比赛，洛谷上什么都有，可我就是什么也学不会，什么也做不到。每周只有周末的时间能碰到电脑，空有一堆计划连几个小时的学习都规划不出来，更何况有令人烦躁的文化课。看着心有余而力不足的一道道题目、一个个知识点与自己的垃圾水平，想着自己一眼就望到头的未来，被骄阳炙烤得燥热不堪的少年，恐怕又一次停滞了下来。</p>
<p>「醒醒吧，你顶天也就是省一水平，知足常乐吧！」</p>
<p>「今年争取拿个省一，趁早退役咯！」</p>
<p>就这样，我自己剪断了省一之后的 OI 之路。</p>
<p>竟然是格外的轻松呢！</p>
<p>这一次返校，虽然还带 OI 相关的书，但却没有打开。</p>
<p> </p>
<p>其实这也不是第一次了，只不过是第一次对未来做出妥协。独自一人走在这无尽头的路上，心态爆炸、学不下去是常有的事，只不过前几次我似乎都被无形的力量拉回来了。</p>
<p>可这无形的力量只能被现实轻易击碎，任由我再次颓废下去。</p>
<p>然而这也是很有益处的，如果我还不颓废，那么我就会成为一个闷在小屋里自己折磨自己度过中考前的
Funny Weekend 的小丑。</p>
<p>自学……到了尽头。</p>
<p> </p>
<p>可是知难而退真的不好吗？</p>
<p>不那么在乎 OI，我过了一个相当充实惬意的周末，相当舒服呢。</p>
<p>当一个认命的废物，真是享受啊！</p>
<p>反正不认命也是铩羽而归。</p>
<p>尽管一直颓废不是什么理所当然的事，</p>
<p>但我需要休息了。</p>
<h2 id="摇曳的树荫之下">摇曳的树荫之下</h2>
<p>清晨，从一群熬到 11 点的 whk 卷王们中间被远方的鸟鸣惊醒，</p>
<p>不顾宿舍走廊里独特的刺鼻气味，飞速地洗漱，</p>
<p>为的就是能够冲出门，在那斑驳明丽的梧桐树叶的罅隙中，</p>
<p>沐浴一会儿朝阳，</p>
<p>在被禁锢于教室中前拥抱我的小小世界。</p>
<p> </p>
<p>匆忙地踏着裹挟来的微风行走着，</p>
<p>升起的白噪声映出我睡眠不足的真相。</p>
<p>望着慵懒地涌现天边的云，</p>
<p>云上折来的光芒投下一片片金晖阴翳，漾起的叶浪划过脸颊，</p>
<p>徐徐然闭上双眼。</p>
<p> </p>
<p>在那教室中，进行着日复一日的作战，</p>
<p>抵抗着驼背与眼睛的疲劳，苦于一场场无聊的考试。</p>
<p>越过嘈杂的说笑声，越过那一双双疾书的奋笔，</p>
<p>目光所至，是教室角落的窗户，</p>
<p>天空的一隅，是那么美好；似乎能望见，清晨的那树荫。</p>
<p> </p>
<p>太阳还不是那么困倦的时候，带着疲惫的身子奔向餐厅，</p>
<p>不太美味的饭果然没什么吸引力啊，又回到了那树荫之下。</p>
<p>此刻，树荫溜去了相反的方向，阳光也多了几抹浓重的橘色。</p>
<p>地上摇曳着的影子，渗透出的不只是残下的阳炎，</p>
<p>还有最初被风染上的清凉。</p>
<p> </p>
<p>听到了二模考试普通的分数，却笑道</p>
<p>「我正乐于此呢！」</p>
<p>在小小的不甘与久久的不解中迎来日落，</p>
<p>那树荫，看到了少年孤身一人对着天空，</p>
<p>挥着被夕阳拉得长长的手。</p>
<p>日子就这样被写在那树下。</p>
<p> </p>
<p>从今往后，是不是就能展露笑颜呢？</p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>琐记</tag>
      </tags>
  </entry>
  <entry>
    <title>「琐记」#7</title>
    <url>/2022/yume-7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="暂别">暂别</h2>
<p>周天就要返校。</p>
<p>网课生活就这样结束了啊。</p>
<span id="more"></span>
<p>这段时间，重新面对自己，面对所有的彷徨，面对一个个现实。过程，是痛苦又激动的。</p>
<p>可是，把学校里的种种不快抛之脑后，忘记终日的课程、考试，我竟能回想起那么多东西……</p>
<p>我记得那一晚，呆呆地从宿舍的窗口，望着深邃的夜空与被城市的灯光淹没的繁星。耳畔响着一阵阵汽车飞奔过的仓促，校园里还亮着的路灯的灯光零零星星地洒在零食的包装袋与同学的
mp3 上，盼望着周五回家，盼望着去练习好不容易明白的二分答案。</p>
<p>我记得那一个下午，艰难地度过了期末考试。班主任在教室里开家长会，我在连廊上，深深地望着氤氲着烟雨的天空。夏日的闷热并未熄灭心中的激情，离开了这个班，暂时离开了文化课，即便是没有教练、没有同学又有何妨！家长会结束了，“去收拾东西吧！”我向着宿舍奔去，鼓动的心脏牵动着全身的肌肉，一边飞奔跳跃，一边在雨中划出明亮的泪痕。“到家先把倍增求
LCA 练熟了！”雨和少年，奏出夏日的交响曲。</p>
<p>我记得那一个夕阳正艳的傍晚，飞奔出夏令营的机房，耳机里的那首歌响彻整个世界。第一次与
OIer 们交流，积下的孤独仿佛消融在电吉他 solo
之中了。海风收起阳炎，带来不尽的遐想与期待。那个与大家离别的午后，我看着车窗之外的风景，膝上放着一直不太明白的状压
DP，从透着清凉的群山中到闪烁着灯火的小城，天空，一直都那么美好，那么迷人。</p>
<p>我记得那一个寒冷的冬晨，没有人组织我参赛，只能在当天凌晨和家长匆匆赶往
lcez。抹去车窗泛起的浓雾，隐隐约约看到昏暗的世界与滚滚黑云覆盖着的天空。甚是困倦，我在车中渐渐入眠。那一天没有放晴，可是在
NOIP
的考场上，我真正明白了自己的不足，自己所作的那些自认为正确的事。耳边响起
IOI2018 的主题曲
Euphoria，尽管自己又搞砸了一次比赛，但是似乎明白了，这就是成长吧。</p>
<blockquote>
<p>あぁ、少年の僕らよ</p>
<p>啊，少年的我们</p>
<p>情熱の日々も、約束もまた</p>
<p>如果热情的日子和约定也</p>
<p>消えてしまうなら</p>
<p>消逝的话</p>
<p>過ぎ去ってしまうなら</p>
<p>变成过去的话</p>
<p>ここに残そう</p>
<p>就设法留下痕迹吧</p>
<p>同じ世界に、立っていたんだと</p>
<p>在同一个世界伫立着</p>
</blockquote>

    <div id="aplayer-FTuXaxZu" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="551339691" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
<p> </p>
<p>之后，学校里的生活逐渐让我不再有那么多时间和精力用在 OI
上，对高中的不确定也渐渐让我停下脚步，一度想过放弃。</p>
<p>可是，每当想要放弃，都会看到那个因为学会了新的东西而激动的自己，因为认识了能分享生活的
OIer 而开怀大笑的自己，把 OI
当作在学校的精神支柱的自己。“如果逝去的日子毫无意义，那么明天的我也将不再是我了”。</p>
<p>所以，正是这一个多月的网课，才让我从那样颓废的状态挺了过来，才让我明白，在我如此颓废的那段时间里，大家都没有忘记我——一个什么都不懂的天真少年。</p>
<p>而且，我这样的纯自学恐怕已经到极限了，中考前只希望把基础打牢。中考之后再来决定高中的事情吧，决定能否成为一个
OIer。</p>
<p>每一次长时间在家里后，回学校时总是有一种恋恋不舍的感觉。可能是因为大部分人告别的是假期，我告别的是所热爱的东西以及一种生活方式吧。</p>
<p>我希望最后的五十多天，能够静下心来，看完洛谷的新教材，一定要恶补一波数据结构，有时间就看点没学过的东西。当然文化课该怎么样还是怎么样，不要有太过病态的要求，尽力就好。</p>
<p>祝自己好运~ ^o^/</p>
<p>那么</p>
<p><strong>我们夏天再见！</strong></p>
<p><img data-src="https://i.loli.net/2021/08/14/ZSxuCsmGoNb4dv7.jpg" /></p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>琐记</tag>
      </tags>
  </entry>
  <entry>
    <title>「琐记」#6</title>
    <url>/2022/yume-6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="周末与假期">「周末」与「假期」</h2>
<p>由于清明节要放假，所以这个周末就无了。周六上课，周天考试。一天考完，但是除了语文英语的作文外，都是选择题，用某学校强制购买使用的某弱智学生平板提交。</p>
<span id="more"></span>
<p>然后就出现了：</p>
<ul>
<li>化学有一道题题面排版有误。四个选项都是图片，原本 A
的图片到了题面里去，而平板上的 A 选项是 B 的图片，B 选项是 C
的图片，没有 D 选项。但是当时我就选择了 A，因为 A
选项的那张图是对的。可是，由于原题里面 A
选项是错的，所以我就是错的。</li>
<li>还是化学。有一道题我选择 B，错了，而有人选择 B，对了。正确答案就是
B，但是我也错了</li>
</ul>
<p>而学校方面表示修改这个的答案很麻烦，所以不予处理。于是乎，我明白了不仅自己看到的正确答案，选了要扣分，而且真正的正确答案，选了也要扣分。</p>
<p>然后放假就移到了周一周二，没错只有 2 天。但是下周周末照常。</p>
<p>哎，习惯就好了。</p>
<h2 id="困倦与仓皇">困倦与仓皇</h2>
<p>这几天睡眠质量越来越差了，orz。</p>
<p>虽然网课经常摸鱼，但是一天下来比在学校还要困还要累。但是每天晚自习上到九点半，早晨六点多就要起床，一天到晚大部分时间都坐在电脑前面。。。</p>
<p>本人的精神一直都不如同龄人，我不明白为什么有的人能够连续一天认真听课晚上还能学到很晚。平时上课摸鱼，写完作业后感觉脑子都快炸了，眼睛酸痛，倒头就睡（但是有时会刷手机到很晚）。不管是在学校还是在家里，我一直都不是那么精力充沛。</p>
<p>话说在班主任的语文公开课上（对的，线上公开课），他发现了有几个人不认真听课。于是乎到了第二天的数学公开课，他就潜伏进入会议，仔细观察我们。到了下课，老师们都走了之后，他就说：“我这好不容易破了一起案啊”。又说大概参案的有5、6个人，是谁自己心里有数，想想语文课怎么回答他。直到下一节课老师来的时候，他才说出是有几个人在公开课上用
qq 聊天。</p>
<p>虽然这件事和我没啥关系，但是那天其实我也干了一些可疑的事。我闲着没事把我们班会议分享到一个小群内，17
班某人进入了我们班会议，并且我和几个我们班的人也进入了 17
班去玩的。听到不是这件事，我松了一口气。（后来这事被发现了，但是没人知道是我干的）</p>
<p>然后到了语文课上，他先讲课，讲完了之后就把他怀疑的人的名单说出来。那几个人也拿不出合适的理由来辩驳，都默认了。但是仔细一看，这几个人全都是年级前
20 的水平。于是班主任就拿 17 班说，他说 17
班很省心，完全不用担心搞小动作……bulabulabula。</p>
<p>然后就对着那几个人发脾气。最后不小心说漏了一些那几个人在考砸之后的反应，我差点笑出来。还嘲讽了某人“没有考上鸿蒙班”，并且嘲讽了那个考上后果蒙班的人“只是被暂时录取，到中考之后的那次考试考不上仍然不要你”。并且还说一模之后考博雅班之类的，首师附中在我市开的分校也会提前招生，但是我班应该不会有几个人去，所以一模多么重要……</p>
<p>我相信，这时候已经有人开始动摇了。之后化学老师也提到过首师附中在一模后招生。但是我市的首师附中无疑和北京的首师附中没啥关系，纯粹来赚钱的。额，好像和我没啥关系。</p>
<h2 id="概率与期望">概率与期望</h2>
<p>就这么突然，这么突然的。</p>
<p>迈出了第一步，得到了一个“可能”。</p>
<p>虽然那条消息仍然没有被看见，但是另一条消息却实实在在地传达到了，被告知了“有机会”。从纯粹的梦境中跃出了一个实在的概率。</p>
<p>机会来了？最后一次机会终于来了？</p>
<p>然而这个概率，它是要我与各个地方的文化课卷王去竞争我不擅长的东西。</p>
<p>一旦成功，利益极大，一旦失败，竹篮打水一场空。</p>
<p>SD
这个地方，文化课卷王实在是太多。尽管那所学校的高考成绩还不如很多地市的
top1 高中，甚至 21 年高考前 200
名还不如我市某校多，但这一切只是因为它生源不好。所以依然会有各种可怕的文化课帝王前来争夺这个不太可能的名额。</p>
<p>不是我不自信，而是难度确实很大。我的文化课水平和省里的家伙们来比还是差远了，毕竟我只是休闲文化课选手。</p>
<p>去年教育局翻脸导致的风波，最起码已经让我校绝大多数人断了这个念头了。估计只剩两个人，我和之前的琐记提到过的阿钊。阿钊要去那校确实是
SD
高考竞赛强校，而我有希望的这校如今早已风光不再，只不过竞赛设施完善，且比较重视
OI。</p>
<p>所以我不清楚大概能减少多少竞争，但是一定会减少一些。更具体的，我市一定会减少一些。</p>
<p>我期望，能够做到；我期望，能够做到。如果做到了，那么便是了却我最大的期望；如果做不到，那么期望就结束了，束手接受现实。但是期望着打败那些卷王，有多大可能？我不敢高估这个概率，即便是老天保佑，来的人不多，概率也不过半。</p>
<p>所以，我们感性赋个值吧！</p>
<p>设 <span class="math inline">\(X\)</span>
为那所学校会接受我们这些学生，设 <span class="math inline">\(Y\)</span>
为我能打败这些卷王，设 <span class="math inline">\(Z\)</span>
为我最终完成了这一心愿。</p>
<p>下面是我的估计。 <span class="math display">\[
P(X) \approx \frac{2}{5} , P(Y) \approx \frac{1}{10}
\]</span> 而显然如果 <span class="math inline">\(Z\)</span>
发生了，对我来说其权值为 <span
class="math inline">\(\infty\)</span>。</p>
<p>所以 <span class="math display">\[
P(Z) = P(X \cap Y) = P(X) \cdot P(Y) = \frac{2}{5} \cdot \frac{1}{10} =
\frac{2}{50}
\]</span></p>
<p><span class="math display">\[
E(Z) = P(Z) \cdot \infty = \infty
\]</span></p>
<p>但愿如此吧。</p>
]]></content>
      <categories>
        <category>简记</category>
      </categories>
      <tags>
        <tag>琐记</tag>
      </tags>
  </entry>
  <entry>
    <title>「线性代数学习笔记」#1 基础概念</title>
    <url>/2022/notes-linear-algebra-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="向量">向量</h2>
<p><del>我承认，课本里的东西实在是看不下去。</del></p>
<p>在平面直角坐标系中，一个向量有两个数字组成，写作 <span
class="math inline">\((x_0,y_0)\)</span> 或 <span
class="math inline">\(\begin{bmatrix} x_0 \\ y_0
\end{bmatrix}\)</span>，表示向 <span class="math inline">\(x\)</span>
轴正方向走 <span class="math inline">\(x_0\)</span> 个单位，向 <span
class="math inline">\(y\)</span> 轴正方向走 <span
class="math inline">\(y_0\)</span> 个单位。一个向量可以记为 <span
class="math inline">\(\vec a\)</span>。</p>
<span id="more"></span>
<p>向量的长度成为向量的模，记为 <span class="math inline">\(| \vec a
|\)</span>。模为 0 的向量是零向量。</p>
<h3 id="基本运算法则">基本运算法则</h3>
<p>有初中数学的基础，不难理解向量基本运算法则。</p>
<p>加法运算</p>
<p>各维分量相加。 <span class="math display">\[
\begin{bmatrix} x_1 \\ y_1 \end{bmatrix} + \begin{bmatrix} x_2 \\ y_2
\end{bmatrix} = \begin{bmatrix} x_1+x_2 \\ y_1 +y_2\end{bmatrix}
\]</span></p>
<p>数乘运算</p>
<p>各维分量都乘上这个数。 <span class="math display">\[
a \begin{bmatrix} x_0 \\ y_0 \end{bmatrix} = \begin{bmatrix} a \cdot x_0
\\ a \cdot y_0 \end{bmatrix}
\]</span>
加法运算和数乘运算统称为向量线性计算。为什么叫线性计算？大家都明白一次函数，考虑向量在坐标系中的意义（或者叫有向线段），这两个东西本质上是一样的。</p>
<p>如果在一组向量中，任何一个向量都无法由其他向量通过线性计算得到，那么称这一组向量是线性无关的。在二维平面中，非零向量
<span class="math inline">\(\vec a\)</span> 与 <span
class="math inline">\(\vec b\)</span> 不共线，那么不存在实数 <span
class="math inline">\(x\)</span> 使得 <span class="math inline">\(\vec a
= x \vec b\)</span>，即它们是线性无关的。</p>
<p>二维平面中，任何向量都能用两个不共线的向量表示。两个不共线的向量
<span class="math inline">\(\vec e_1\)</span> 和 <span
class="math inline">\(\vec e_2\)</span>，对于任意向量 <span
class="math inline">\(\vec a\)</span>，都有唯一的实数对 <span
class="math inline">\((x,y)\)</span> 满足 <span
class="math inline">\(\vec a = x \vec e_1 + y \vec
e_2\)</span>。其中这两个向量成为基向量。</p>
<p>模为 1 的两个向量 <span class="math inline">\((0,1)\)</span> 和 <span
class="math inline">\((1,0)\)</span> 是单位向量。</p>
<h3 id="线性变换">线性变换</h3>
<p>线性变换可以看作通过线性计算的方式将一个向量转化为另一个向量。引用一个别人的例子。</p>
<blockquote class="blockquote-center">
<p>一张甲类饭票能换 <span class="math inline">\(x_1\)</span>
千克蔬菜，<span class="math inline">\(y_1\)</span>
千克肉，一张乙类饭票能换 <span class="math inline">\(x_2\)</span>
千克蔬菜和 <span class="math inline">\(y_1\)</span> 千克肉。现在有 <span
class="math inline">\(a\)</span> 张甲类饭票，<span
class="math inline">\(b\)</span>
张乙类饭票，请问可以换得多少千克的蔬菜和肉？</p>

</blockquote>
设向量 <span class="math inline">\(\vec p = \begin{bmatrix} a \\
b\end{bmatrix}\)</span>，假如 <span class="math inline">\((x_1,y_1) =
(1,2)\)</span>，<span class="math inline">\((x_2,y_2) =
(2,1)\)</span>，那么最后能变换为 $
<span class="math display">\[\begin{bmatrix} a + 2b \\ 2a +
b\end{bmatrix}\]</span>
<p>$。</p>
<p>通过这一次变换，求得了最多换得 <span
class="math inline">\(a+2b\)</span> 千克蔬菜和最多换得 <span
class="math inline">\(2a +b\)</span>
千克肉。那么推广到普遍的运算中，就能通过得到 <span
class="math display">\[
\begin{bmatrix} a \\ b \end{bmatrix} \rightarrow a \begin{bmatrix} x_1
\\ y_1 \end{bmatrix} + b \begin{bmatrix} x_2 \\ y_2 \end{bmatrix} =
\begin{bmatrix} a x_1 + b x_2 \\ a y_1 + b y_2 \end{bmatrix}
\]</span> 如果 <span class="math inline">\(\begin{bmatrix} x_1 \\ y_1
\end{bmatrix}\)</span> 与 <span class="math inline">\(\begin{bmatrix}
x_2 \\ y_2 \end{bmatrix}\)</span>
线性无关，那么这个变换的结果实际上被这两个向量唯一确定了。把这两个向量封装起来，就得到了一个
<span class="math inline">\(2 \times 2\)</span>
的<strong>矩阵</strong>。</p>
<p>线性变换可以看作矩阵向量乘法，或者说矩阵能对向量进行线性变换。矩阵可以用大写字母表示。
<span class="math display">\[
A \vec p = \begin{bmatrix} x_1 &amp; x_2 \\ y_1 &amp; y_2 \end{bmatrix}
\begin{bmatrix} a \\ b \end{bmatrix}   = \begin{bmatrix} a x_1 + b x_2
\\ a y_1 + b y_2 \end{bmatrix}
\]</span> 一些简单的变换。</p>
<p>将向量逆时针旋转 90 度： <span class="math inline">\(\begin{bmatrix}
0 &amp; -1 \\ 1 &amp; 0\end{bmatrix}\)</span></p>
<p>将向量延长 <span class="math inline">\(c\)</span> 倍：<span
class="math inline">\(\begin{bmatrix} c &amp; 0 \\ 0 &amp;
c\end{bmatrix}\)</span></p>
<h2 id="矩阵">矩阵</h2>
<p>关于矩阵，就捡着比较实用的内容说了。</p>
<p>矩阵加法依旧是对应位置相加。</p>
<h3 id="矩阵乘法">矩阵乘法</h3>
<p>即连续多次矩阵变化，注意矩阵乘法是从右往左读的。</p>
对于两个 <span class="math inline">\(2 \times 2\)</span> 的矩阵 $ A
<span class="math display">\[\begin{bmatrix} e &amp; f \\ g &amp; h
\end{bmatrix}\]</span>
<span class="math inline">\(，\)</span> B
<span class="math display">\[\begin{bmatrix} a &amp; b \\ c &amp; d
\end{bmatrix}\]</span>
<p>$，要计算 $ C = B A$，先要用 $ A$ 将单位向量变换为 <span
class="math inline">\(\begin{bmatrix} e \\ g \end{bmatrix}\)</span> 和
<span class="math inline">\(\begin{bmatrix} f \\ h
\end{bmatrix}\)</span>，再将它们分别与 <span
class="math inline">\(B\)</span> 变换得到两个向量，<span
class="math inline">\(\begin{bmatrix} ae + bg \\ cd +dg
\end{bmatrix}\)</span> 和 <span class="math inline">\(\begin{bmatrix}
af+bh\\ cf +dh \end{bmatrix}\)</span></p>
<p>最后加起来，得到 <span class="math display">\[
C = \begin{bmatrix} ae + bg &amp; af+bh\\ cd +dg &amp; cf +dh
\end{bmatrix}
\]</span></p>
<p>矩阵乘法不满足交换律，即 $ B A$ 不一定等于 $A B $。但是满足结合律，即
<span class="math display">\[
( A B)  C  =  A (B  C )
\]</span>
对于更高维度，这么去算显然会去世，所以有了本文唯一有价值的公式：对于
<span class="math inline">\(L\)</span> 维矩阵 <span
class="math inline">\(C = A B\)</span>，有 <span class="math display">\[
C_{i,j} =  \sum_{k=1}^L A_{i,k} B_{k,j}
\]</span> 代码</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Matrix</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">long</span> <span class="token keyword">long</span> M<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">memset</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> C<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>
Matrix <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span>Matrix A<span class="token punctuation">,</span>Matrix B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Matrix ans<span class="token punctuation">;</span> ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>L<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>L<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>
				ans<span class="token punctuation">.</span>M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>A<span class="token punctuation">.</span>M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>B<span class="token punctuation">.</span>M<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
	<span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> C<span class="token operator">=</span>A<span class="token operator">*</span>B<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>顺便提一句，重载运算符写到结构体里面要多写个<code>friend</code>，我一般不写到里面去。</p>
<h3 id="矩阵加速递推-fib">矩阵加速递推 Fib</h3>
<p>经典问题，矩阵加速递推斐波那契数列第 <span
class="math inline">\(n\)</span> 项。</p>
<p>考虑当 <span class="math inline">\(n \ge 3\)</span>
的时候，每一项都与前两项有关，且递推就相当于线性变换的过程。</p>
使用待定系数法，设 <span class="math inline">\(\begin{bmatrix} F_n \\
F_{n-1} \end{bmatrix} = \begin{bmatrix} a &amp; b \\ c &amp; d
\end{bmatrix} \begin{bmatrix} F_{n-1} \\ F_{n-2}
\end{bmatrix}\)</span>，考虑递推式，很容易求出这个矩阵为 $ A
<span class="math display">\[\begin{bmatrix} 1 &amp; 1 \\ 1 &amp;
0  \end{bmatrix}\]</span>
<p>$。</p>
<p>那么 <span class="math inline">\(\begin{bmatrix} F_3 \\ F_2
\end{bmatrix} = A \begin{bmatrix} 1 \\ 1
\end{bmatrix}\)</span>。归纳一下得到 <span class="math display">\[
\begin{bmatrix} F_n \\ F_{n-1}  \end{bmatrix} = A^{n-2} \begin{bmatrix}
1 \\ 1 \end{bmatrix}
\]</span> 用矩阵快速幂处理即可，复杂度 <span
class="math inline">\(O(\log_2 n)\)</span>。</p>
<p>代码略。</p>
<h2 id="写在后面">写在后面</h2>
<p>个人感觉洛谷的深入浅出进阶篇这里讲的很不错，没有那么实用主义，直接去讲矩阵乘法和加速递推等等实用技巧。但是有很多我这种连向量都没有接触过的人，如此从向量开始，一直引出各种线代里的概念，最后落实到
OI 里面，我觉得很有意义。</p>
<p>如果真的像大部分人学文化课那样，连推导、原理等都不清楚直接研究做题技巧，那么
OI 也就没意义了吧。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>「线性代数学习笔记」#2 高斯消元与矩阵相关内容</title>
    <url>/2022/notes-linear-algebra-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="高斯消元">高斯消元</h2>
<p>很有用的<del>小学奥数</del>知识，但是在初中阶段基本都是解二元一次方程组，完全体现不出来它的强大之处。</p>
<p>但是你总不能用代码直接模拟解 <span class="math inline">\(n\)</span>
元 1 次方程组吧，所以在 OI
中还是很有用处的，而且牵扯到很多线性代数里的概念。</p>
<p>进入正题。</p>
<span id="more"></span>
<p><strong>线性方程组</strong>定义为由 <span
class="math inline">\(m\)</span> 个 <span
class="math inline">\(n\)</span> 元一次方程构成的方程组，举个例子 <span
class="math display">\[
\begin{cases}
x_1 + 2x_2 - x_3 = -6
\\
2x_1 + x_2 - 3x_3 = -9
\\
-x_1 - x_2 + 2x_3 = 7
\end{cases}
\]</span> 把每个未知数的系数提出来，组成一个 <span
class="math inline">\(n \times m\)</span>
的矩阵，称为“系数矩阵”，加上右侧的常数，就成为了 "增广矩阵"。 <span
class="math display">\[
\begin{bmatrix}
1 &amp; 2 &amp; -1 &amp; -6
\\
2 &amp; 1 &amp; -3 &amp; -9
\\
-1 &amp; -1 &amp; 2 &amp; 7
\end{bmatrix}
\]</span> 求解这个方程组的步骤可以概括成对增广矩阵的三类操作。</p>
<ol type="1">
<li>用一个非 0 的数乘某一行。</li>
<li>用一个非 0 的数乘某一行，加到另一行上。</li>
<li>交换两行的位置。</li>
</ol>
<p>此三子者，称为矩阵的“初等行变换”。对以上使用若干次初等行变换，可以得到
<span class="math display">\[
\begin{bmatrix}
1 &amp; 2 &amp; -1 &amp; -6
\\
0 &amp; 1 &amp; 1 &amp; 1
\\
0 &amp; 0 &amp; 1 &amp; 3
\end{bmatrix}
\]</span> 代表着 <span class="math display">\[
\begin{cases}
x_1 + 2x_2 - x_3 = -6
\\
x_2 + x_3 = 1
\\
x_3 = 3
\end{cases}
\]</span></p>
<p>这样只要回代，就能求了。</p>
<p>这个矩阵称为“阶梯形矩阵”，其系数矩阵部分称为“上三角矩阵”。通过这个形状大致就能明白什么意思了。</p>
<p>最后化简为 <span class="math display">\[
\begin{bmatrix}
1 &amp; 0 &amp; 0 &amp; 1
\\
0 &amp; 1 &amp; 0 &amp; -2
\\
0 &amp; 0 &amp; 1 &amp; 3
\end{bmatrix}
\]</span>
这样就能直接看出每一个未知数的值。这个矩阵称为“简化阶梯矩阵”，其系数矩阵部分为“对角矩阵”。依旧是感性理解。</p>
<p><strong>通过初等行变换，把增广矩阵变为简化阶梯形矩阵，从而求解线性方正组的算法</strong>，就是<strong>高斯消元</strong>。</p>
<p>其思想为，对于每个未知数 <span
class="math inline">\(x_i\)</span>，找到一个 <span
class="math inline">\(x_i\)</span> 系数非 0，但是 <span
class="math inline">\(x_1 \sim x_{i-1}\)</span> 的系数都是 0
的方程，运用初等行变换把其他方程的 <span
class="math inline">\(x_i\)</span> 项系数都变为 0。</p>
<p>对于方程组 <span class="math display">\[
\begin{cases}
x_1 + 2x_2 - x_3 = 3
\\
2x_1 + 4x_2 - 8x_3 = 0
\\
-x_1 - 2x_2 + 6x_3 = 2
\end{cases}
\]</span> 经过一系列变换后，发现在化成简化阶梯型矩阵过程中，只能得到
<span class="math display">\[
\begin{bmatrix}
1 &amp; 2 &amp; 0 &amp; 4
\\
0 &amp; 0 &amp; 1 &amp; 1
\\
0 &amp; 0 &amp; 0 &amp;  0
\end{bmatrix}
\]</span> 无法让 <span class="math inline">\(x_2\)</span> 的系数不为 0
且其他 <span class="math inline">\(x_i\)</span> 的系数为
0，但是它的解可以写作 <span class="math display">\[
\begin{cases}
x_1 = 4-2x_2
\\
x_3 = 1
\end{cases}
\]</span> 其中 <span class="math inline">\(x_2\)</span>
可以取任何值，并且都能找到对应的满足原方程组的 <span
class="math inline">\(x_1\)</span>。所以原方程组有无数个解。</p>
<p>称 <span class="math inline">\(x_1\)</span> 与 <span
class="math inline">\(x_3\)</span> 这样的未知数为主元，<span
class="math inline">\(x_2\)</span> 这样的未知数为自由元。对于一个主元
<span
class="math inline">\(x_0\)</span>，在它所在的方程组的简化阶梯形矩阵中，能且仅能找到一个位置
<span class="math inline">\((i,j)\)</span>，满足 <span
class="math inline">\(x_0\)</span> 系数为 0，且第 <span
class="math inline">\(j\)</span> 列其他位置都是 0，第 <span
class="math inline">\(i\)</span> 行的 <span class="math inline">\(1 \sim
i-1\)</span> 列为 0。</p>
<p>仔细考虑一下，为什么会出现这种情况呢？写出他的系数矩阵 <span
class="math display">\[
\begin{bmatrix}
1 &amp; 2 &amp; -1 &amp; 3
\\
2 &amp; 4 &amp; -8 &amp; 0
\\
-1 &amp; -2 &amp; 6 &amp;  2
\end{bmatrix}
\]</span>
不难发现，对于每一行，前两个数字构成的向量是<strong>线性相关</strong>的，那么
3 个方程描述的关于 <span class="math inline">\(x_1\)</span> 与 <span
class="math inline">\(x_2\)</span> 信息是同一个量。也就是说，令 <span
class="math inline">\(x_4=x_1+2x_2\)</span>，照样能写出等价于原方程组的方程组，最后解出来是
<span class="math inline">\(x_4 = 4\)</span>，<span
class="math inline">\(x_3=1\)</span>。</p>
<p>另外对于某个矩阵，其中有一行（或列）与其他行（或列）线性相关，那么用它来变换一个向量就会丢维，造成“降维打击”。比如变换一个二维向量，那么最终得到一条直线。</p>
<p> </p>
<p>对于 <span class="math inline">\(n \times n\)</span> 的矩阵，主元有
<span class="math inline">\(k\)</span> 个。当 <span
class="math inline">\(k=n\)</span> 时有唯一解，<span
class="math inline">\(k &lt; n\)</span> 时有无数解。</p>
<p>还有一种情况是当某一行系数全为 0，常数不为 0 时，原方程组无解。</p>
<p>具体实现看注释。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> cur<span class="token punctuation">;</span> <span class="token comment">// cur表示当前的行</span>
<span class="token keyword">double</span> m<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">xiaoyuan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span>cur<span class="token punctuation">;</span>x<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span>eps<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">// 找到j这一列的非0元素</span>
        <span class="token comment">// 没有就continue</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>n<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>j<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>m<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 把非0元素所在行与当前行交换</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">>=</span>j<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span> m<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/=</span>m<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 当前行同除，让主元系数化为1</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>cur<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>n<span class="token punctuation">;</span>k<span class="token operator">>=</span>j<span class="token punctuation">;</span><span class="token operator">--</span>k<span class="token punctuation">)</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-=</span>m<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 对其他行消元</span>
		<span class="token punctuation">&#125;</span>
		<span class="token operator">++</span>cur<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">&lt;</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// cur&lt;n，cur到n这几行一定全为0</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>cur<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span>eps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token comment">// 0=一个常数，无解</span>
		<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 0=0，无数解</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="矩阵行列式">矩阵行列式</h2>
<p>对于 <span class="math inline">\(2 \times 2\)</span> 的矩阵 <span
class="math inline">\(A \begin{bmatrix} a &amp; b \\ c &amp; d
\end{bmatrix}\)</span>，他的行列式为 <span class="math inline">\(ad -
bc\)</span>，记为 <span class="math inline">\(\det (A)\)</span>。</p>
<p>在二维平面中，将一个图形经过一个矩阵变换后，得到的新图形与原图形面积之比即为行列式的值。会出现负数是因为向量的方向改变了。</p>
<p>三维的</p>
<p><img data-src="https://img-blog.csdnimg.cn/20210104163632662.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpY2luaW8=,size_16,color_FFFFFF,t_70#pic_center" /></p>
<p>对角行列式</p>
<p><img data-src="https://img-blog.csdnimg.cn/20210105225239138.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpY2luaW8=,size_16,color_FFFFFF,t_70#pic_center" /></p>
<p>上三角和下三角行列式</p>
<p><img data-src="https://img-blog.csdnimg.cn/20210105225248894.jpg#pic_center" /></p>
<p>我是盗图的懒狗。侵删。</p>
<p>更一般的，一个 $n n $
矩阵的行列式等于其任意行（或列）的元素与对应的代数余子式乘积之和。</p>
<p>好吧我暂时不懂，有时间补上。</p>
<ul>
<li>矩阵某两行(列)交换，行列式 <span class="math inline">\(\times
(-1)\)</span>。</li>
<li>矩阵某一行(列)加上另一行(列)，行列式不变。</li>
<li>矩阵某一行(列) <span class="math inline">\(\times k\)</span>，行列式
<span class="math inline">\(\times
k\)</span>。所以可以对矩阵“提公因式”。</li>
<li>矩阵中存在某一行（列）与其他行（列）线性相关，行列式为 0。</li>
</ul>
<h2 id="关于矩阵向量乘法">关于矩阵向量乘法</h2>
<p>貌似这个手算时用的比较多，我总结了一个式子。</p>
<p>把向量 <span class="math inline">\(\vec v\)</span> 写成n 行 1
列的矩阵 <span class="math inline">\(A\)</span> 的形式，用一个 <span
class="math inline">\(n \times n\)</span> 的矩阵 <span
class="math inline">\(B\)</span>，变换它，得到的矩阵 <span
class="math inline">\(C\)</span> 为 <span class="math display">\[
C_{i,1} = \sum_{k=1}^n B_{i,k} A_{k,1}
\]</span> 举个例子 <span class="math display">\[
\begin{bmatrix}
x_1 &amp; x_2
\\
y_1 &amp; y_2
\end{bmatrix}
\begin{bmatrix}
a
\\
b
\end{bmatrix}
=
\begin{bmatrix}
a x_1 + b x_1
\\
a y_1 + b y_1
\end{bmatrix}
\]</span> 就写这么多了，再难的就超出我的能力范围了。</p>
<p>为什么高斯消元不配上代码？因为我一段时间之内不想再写代码了。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>「图论学习笔记」#5 网络流定义与最大流</title>
    <url>/2022/notes-graph-5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="定义">定义</h2>
<p>一个网络 <span class="math inline">\(G= (V,E)\)</span>
是一张有向图，对于每条有向边 <span class="math inline">\((x \rightarrow
y)\)</span> 都有一个权值 <span
class="math inline">\(c(x,y)\)</span>，称之为这条边的<strong>容量</strong>。另外，存在特殊节点
<span class="math inline">\(S\)</span>，称为<strong>源点</strong>；<span
class="math inline">\(T\)</span>，称为<strong>汇点</strong>。</p>
<span id="more"></span>
<p>设函数 <span class="math inline">\(f(x,y)\)</span>，其定义域为 <span
class="math inline">\(x,y \in V\)</span>，满足</p>
<ol type="1">
<li>容量限制：对于每条边，流经该边的流量不得超过该边的容量，即 <span
class="math inline">\(f(x,y) \le c(x,y)\)</span></li>
<li>斜对称性：每条边的流量与其相反边的流量之和为 0，即 <span
class="math inline">\(f(x,y) = -f(y,x)\)</span></li>
<li>流守恒性：从源点流出的流量等于汇点流入的流量，即 <span
class="math inline">\(\sum_{(u ,x) \in E} f(u,x) = \sum_{(x,v) \in E}
f(x,v)\)</span></li>
</ol>
<p>那么称 <span class="math inline">\(f\)</span>
为这个网络的<strong>流函数</strong>，对于边 <span
class="math inline">\((x \rightarrow y)\)</span>，<span
class="math inline">\(f(x,y)\)</span>
称为它的<strong>流量</strong>，<span
class="math inline">\(c(x,y)-f(x,y)\)</span>
称为它的<strong>剩余容量</strong>。</p>
<p>整个网络的流量为<strong>从源点发出的所有流量之和</strong>，即 <span
class="math inline">\(\sum_{(S,x) \in E} f(S,x)\)</span>。</p>
<p>由于流量守恒性质，可以知道<strong>除了源点与汇点之外，其他的节点不储存流，「流」只是从源点流出，流经整个网络，最终归于汇点</strong>。</p>
<h2 id="最大流">最大流</h2>
<p>对于一个网络，有很多合法的流函数，但是使得整个网络的流量最大的流函数
<span class="math inline">\(f\)</span>，也就是 <span
class="math inline">\(\sum_{(S,x) \in E} f(S,x)\)</span>，这样的流函数
<span class="math inline">\(f\)</span>
称为该网络的<strong>最大流</strong>。</p>
<h3 id="edmonds-karp-算法">Edmonds-Karp 算法</h3>
<p>是 Ford-Fulkerson 方法基于 BFS 的一个实现。</p>
<p>如果存在一条从源点 <span class="math inline">\(S\)</span> 到汇点
<span class="math inline">\(T\)</span>
的路径，满足每一条边的剩余容量都大于 <span
class="math inline">\(0\)</span>，那么称这条路径为一条<strong>增广路</strong>，注意不同于二分图匹配中的增广路。</p>
<p>如果让更多的流沿着 <span class="math inline">\(S\)</span> 流到 <span
class="math inline">\(T\)</span>，那么就能使网络流量增大，且这个值为路径上最小的剩余容量。Edmonds-Karp
算法的思想是利用 BFS
不断寻找增广路，知道网络中不存在增广路。此时不可能增加网络的流量，那么必然得到了最大流。</p>
<p>具体流程如下</p>
<p>在寻找增广路的过程中，只考虑 <span class="math inline">\(f(x,y) &lt;
c(x,y)\)</span> 的边，用 BFS 找到任意 <span
class="math inline">\(S\)</span> 到 <span
class="math inline">\(T\)</span> 的路径， 计算出路径上最小的剩余容量
<span class="math inline">\(minf\)</span>，同时累加总流量。</p>
<p>如果存在一条边满足 <span class="math inline">\(f(x,y) &gt;
0\)</span>，那么它的反向边有 <span class="math inline">\(f(y,x) &lt;
0\)</span>，此时 <span class="math inline">\(f(y,x) &lt;
c(y,x)\)</span>，由于 <span class="math inline">\(c(x,y) =
c(y,x)\)</span>，那么反向边也有可能成为增广路的一部分，应该考虑边集
<span class="math inline">\(E\)</span>
中每条边的反向边。我一开始有一个小问题，网络不是有向图吗？为什么也能用反向边呢？后来想明白了，并不是网络中真的有了反向边，对于
<span class="math inline">\((x \rightarrow
y)\)</span>，选择它的反边相当于把通过它的流退了回来，并且能够发现新的增广路。</p>
<p>图解。</p>
<figure>
<img data-src="https://s2.loli.net/2022/07/03/16qMpVeyK2LswTm.png"
alt="一个普通的网络" />
<figcaption aria-hidden="true">一个普通的网络</figcaption>
</figure>
<p>初始状态，钦定 <span class="math inline">\(1\)</span> 为源点，<span
class="math inline">\(6\)</span> 为汇点。</p>
<p>手动 BFS 找到一条增广路 <span class="math inline">\((1 \rightarrow 2
\rightarrow 5 \rightarrow
6)\)</span>，同时发现无法再找到增广路了。将增广路上的边都增加上最小的剩余容量
<span class="math inline">\(2\)</span>。最大流是 <span
class="math inline">\(2\)</span> 吗？</p>
<p><img data-src="https://s2.loli.net/2022/07/03/mLOMUrCnN5JKicV.png" /></p>
<p>建立反向边，发现新的增广路 <span class="math inline">\((1 \rightarrow
4 \rightarrow 5 \rightarrow 2 \rightarrow 3 \rightarrow
6)\)</span>，其中只有 <span class="math inline">\(2\)</span>
走的是原来边的反向边。将路径上走正向边都加上最小剩余容量 <span
class="math inline">\(1\)</span>，走反向边的都减去最小剩余容量 <span
class="math inline">\(1\)</span>。可以验证这条增广路是合法的，且最大流又增加了
<span class="math inline">\(1\)</span>。</p>
<p><img data-src="https://s2.loli.net/2022/07/03/45KP8yjOaHYidJN.png" /></p>
<p>注意画出的红蓝箭头指的是两条增广路，不是网络的真是流向，但是根据增广路可以构造出合法的流向。由于
<span class="math inline">\((2 \rightarrow 5)\)</span> 减去了 <span
class="math inline">\(1\)</span>，但是在 <span class="math inline">\((2
\rightarrow 3)\)</span> 又加上了 <span
class="math inline">\(1\)</span>，所以总流量不变， <span
class="math inline">\((1 \rightarrow 2)\)</span>
的流能通过<strong>分流</strong>的方式到达汇点。<span
class="math inline">\((1 \rightarrow 2)\)</span> 分流导致原来走的 <span
class="math inline">\((5 \rightarrow 6)\)</span>
也腾出了空间，正好能容纳 <span class="math inline">\((4 \rightarrow
5)\)</span> 流过来的部分。图中写出来的边权 <span
class="math inline">\(f(x,y)/c(x,y)\)</span> 是正向边的流量。</p>
<p>图中流的路径为 <span class="math inline">\((1 \rightarrow 4
\rightarrow 5 \rightarrow 6)\)</span>，<span class="math inline">\((1
\rightarrow 2 \rightarrow 5 \rightarrow 6)\)</span> 和 <span
class="math inline">\((1 \rightarrow 2 \rightarrow 3 \rightarrow
6)\)</span>，每条流量都为 <span
class="math inline">\(1\)</span>。这样做才能求得最大流 <span
class="math inline">\(3\)</span>。</p>
<p>还有一点，EK 算法遍历的是网络中所有节点和剩余容量大于 <span
class="math inline">\(0\)</span>
的边构成的子图，称为<strong>残量网络</strong>。代码中的边权都是<strong>残量网络的边权</strong>，也就是还能容纳多少。对于一条正向边
<span class="math inline">\((x \rightarrow y)\)</span>，容量为 <span
class="math inline">\(z\)</span>。初始还能容纳 <span
class="math inline">\(z\)</span>，所以加边<code>add(x,y,z)</code>，而其反向边则是<code>add(y,x,0)</code>，只有正向边减少才能为反向边腾出空间。</p>
<p>于是乎 EK 算法就没有悬念了，上代码。</p>
<p>复杂度 <span
class="math inline">\(O(nm^2)\)</span>，实际远远达不到这个上界，<del>但依然很慢</del>，大概能处理
<span class="math inline">\(n=10^3 \sim 10^4\)</span> 规模的网络。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x7fffffff</span><span class="token punctuation">,</span> N<span class="token operator">=</span><span class="token number">205</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">5005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> pre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> F<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tot<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">[</span>M<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>M<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 注意tot=1</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll maxflow<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 快读</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	to<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> w<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// v[i]表示i是否被访问过</span>
	v<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
	F<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>inf<span class="token punctuation">;</span>
    <span class="token comment">// 源点为正无穷</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> y<span class="token operator">=</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">||</span><span class="token operator">!</span>z<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token comment">// 被访问过或者剩余容量为0</span>
			F<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>F<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
			pre<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
            <span class="token comment">// 记录增广路上的边</span>
			v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">==</span>t<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token comment">// 到达汇点，找到增广路</span>
		<span class="token punctuation">&#125;</span> 
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 不存在</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> x<span class="token operator">=</span>t<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> i<span class="token operator">=</span>pre<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
		w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-=</span>F<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>F<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 正向边剩余容量减少，反向边剩余容量增加</span>
		x<span class="token operator">=</span>to<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 因为从tot=1开始储存，所以i^1定位到i的反向边</span>
	<span class="token punctuation">&#125;</span>
	maxflow<span class="token operator">+=</span>F<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 反向边权值（剩余容量）最初为0</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 存在增广路就更新</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>maxflow<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="dinic-算法">Dinic 算法</h3>
<p>EK 算法每轮可能会遍历整个残量网络，但是最多找出 1
条增广路，效率较低。</p>
<p>设 <span class="math inline">\(d(x)\)</span> 为起点到 <span
class="math inline">\(x\)</span>
最小的边数，称为<strong>层次</strong>。在残量网络中，满足 <span
class="math inline">\(d(y) = d(x) +1\)</span> 的边 <span
class="math inline">\((x \rightarrow y)\)</span>
构成的子图称为<strong>分层图</strong>，这显然是一张 DAG。使用 BFS
很容易实现。</p>
<p>Dinic 算法基于分层图，其流程如下：</p>
<ol type="1">
<li>在残量网络上使用 BFS 求出节点的层次，构造分层图。</li>
<li>在分层图上寻找任意一条增广路，进行增广，并将答案加上增广流量。</li>
<li>貌似一次 DFS 能够找出所有增广路。</li>
<li>如果无法再次建立分层图，当前流量即为最大流。</li>
</ol>
<p>一个重要的优化是<strong>当前弧优化</strong>。定义点 <span
class="math inline">\(x\)</span> 的当前弧为 DFS 过程中遍历过的 <span
class="math inline">\(x\)</span>
的最后一条出边。首先如果一条边被增广过了，那么他便不会再次被增广，如果再遍历这些边的话相当浪费时间，所以对于节点
<span class="math inline">\(x\)</span>，每遍历一条边，都让再次访问 <span
class="math inline">\(x\)</span>
时从这条边开始，且不去遍历之前的边。具体实现看代码。</p>
<p>此外，还有一个优化。递归完回溯时，如果返回的是
0，说明已经增广完毕，直接将这个点移出分层图。</p>
<p>效率高于 EK 算法，复杂度为 <span
class="math inline">\(O(n^2m)\)</span>，但是很难达到这个上界，能够处理
<span class="math inline">\(n = 10^4 \sim 10^5\)</span> 规模的网络。用
Dinic 算法求解二分图最大匹配的复杂度为 <span class="math inline">\(O(m
\sqrt n)\)</span>，实际表现更快。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x7fffffff</span><span class="token punctuation">,</span> N<span class="token operator">=</span><span class="token number">205</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">5005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> hh<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tot<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">[</span>M<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>M<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll maxflow<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 省略快读</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	to<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> w<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	d<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		hh<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// hh[]要把h[]复制一份</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> y<span class="token operator">=</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">||</span><span class="token operator">!</span>z<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
			q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
			d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">==</span>t<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> 
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">dinic</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> flow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token comment">// flow表示当前增广路的最小剩余容量</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>t<span class="token operator">||</span><span class="token operator">!</span>flow<span class="token punctuation">)</span> <span class="token keyword">return</span> flow<span class="token punctuation">;</span>
    <span class="token comment">// 到达汇点或者增广完毕</span>
	<span class="token keyword">int</span> res<span class="token operator">=</span>flow<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token operator">=</span>hh<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// i是个引用，当前弧优化</span>
       	<span class="token comment">// i变为nxt[i]时也直接让h[x]变为nxt[i]，最终导致从x出发直接到达它的当前弧</span>
		<span class="token keyword">int</span> y<span class="token operator">=</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">||</span><span class="token operator">!</span>z<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token comment">// 不是分层图中节点或者不再残量网络中就不搜索</span>
		<span class="token keyword">int</span> k<span class="token operator">=</span><span class="token function">dinic</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取最小值</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span> d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-=</span>k<span class="token punctuation">,</span> w<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>k<span class="token punctuation">,</span> res<span class="token operator">-=</span>k<span class="token punctuation">;</span>
        <span class="token comment">// 优化。移出分层图</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span> <span class="token keyword">return</span> flow<span class="token punctuation">;</span>
        <span class="token comment">// 加这句话快在洛谷的板子 700ms -> 50ms</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> flow<span class="token operator">-</span>res<span class="token punctuation">;</span>
    <span class="token comment">// 返回的其实就是所有k的和，表示从这个点出发能够增广的值之和</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> maxflow<span class="token operator">+=</span><span class="token function">dinic</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>inf<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>maxflow<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="二分图最大匹配">二分图最大匹配</h3>
<p>对于一张 <span class="math inline">\(n\)</span> 个节点，<span
class="math inline">\(m\)</span> 条边的二分图，可以新增一个源点 <span
class="math inline">\(S\)</span> 和一个汇点 <span
class="math inline">\(T\)</span>，从 <span
class="math inline">\(S\)</span> 到每个左部节点连有向边，
从每个右部节点到 <span class="math inline">\(T\)</span> 连有向边，原本的
<span class="math inline">\(m\)</span>
条边看作左部节点到右部节点的有向边，形成一张 <span
class="math inline">\(n+2\)</span> 个节点，<span
class="math inline">\(m+n\)</span> 条边的网络。</p>
<p>把网络中每条边的容量都设为
1，该二分图最大匹配数就等于网络的最大流量。求出最大流后，所有存在「流」经过的点和边就是匹配点、匹配边。</p>
<p>如果要求该二分图的多重匹配，只需要把 <span
class="math inline">\(S\)</span> 到左部节点 <span
class="math inline">\(i\)</span> 的有向边容量设置为匹配数量上限 <span
class="math inline">\(kl_i\)</span>，右部点到 <span
class="math inline">\(j\)</span> 到 <span
class="math inline">\(T\)</span> 的有向边容量设置为匹配数量上限 <span
class="math inline">\(kr_j\)</span>。</p>
<p>参考：</p>
<ul>
<li><p><a
href="https://blog.csdn.net/qq_39670434/article/details/80952337">最大流算法之一——EK算法</a>
by 千杯湖底沙</p></li>
<li><p><a href="https://oi.men.ci/dinic-notes/">Dinic 学习笔记</a> by
Menci</p></li>
<li><p><a
href="https://2745518585.github.io/post/maximum-flow-Dinic">最大流
Dinic</a> by 赵悦岑</p></li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>最大流</tag>
      </tags>
  </entry>
  <entry>
    <title>「Codeforces Round」#804 (Div. 2) 题解</title>
    <url>/2022/cf1699-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><strong>CF1699</strong>.</p>
<h2 id="a.-the-third-three-number-problem">A. The Third Three Number
Problem</h2>
<h3 id="分析">分析</h3>
<p>首先判断无解。</p>
<span id="more"></span>
<p>异或运算可以看作二进制「不进位加法」，而在二进制加法中，第一位也不会存在进位，所以
<span class="math inline">\((a \oplus b) + (b \oplus c) + (a \oplus
c)\)</span> 与 $(a+b) + (b + c) + (a + c) = 2(a+b+c) $ 奇偶性相同。所以
<span class="math inline">\(n\)</span> 必然是个偶数，当 <span
class="math inline">\(n\)</span> 为奇数时无解。</p>
<p>考虑 <span class="math inline">\(a,b,c\)</span> 可以相同且能够取
<span class="math inline">\(0\)</span>，而 <span class="math inline">\(0
\oplus x = x\)</span>，那么只要取 <span
class="math inline">\(a=0\)</span>，<span
class="math inline">\(b=0\)</span>，<span class="math inline">\(c =
\frac{n}{2}\)</span> 就能够满足条件。</p>
<h3 id="code">CODE</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="b.-almost-ternary-matrix">B. Almost Ternary Matrix</h2>
<h3 id="分析-1">分析</h3>
<p>很关键的一点，<span class="math inline">\(n\)</span> 与 <span
class="math inline">\(m\)</span> 都是偶数。</p>
<p>称如下矩形为 <span class="math inline">\(1\)</span> 类矩形。</p>
<p><img data-src="https://s2.loli.net/2022/07/05/M6ODlKLtgupzB5I.png" /></p>
<p>称如下矩形为 <span class="math inline">\(2\)</span> 类矩形。</p>
<p><img data-src="https://s2.loli.net/2022/07/05/AnOC8UNtj64hYiK.png" /></p>
<p>那么，无论 <span class="math inline">\(n\)</span> 与 <span
class="math inline">\(m\)</span> 取何值，<span class="math inline">\(n
\times m\)</span> 的矩阵必然能够由若干 <span
class="math inline">\(1\)</span> 类与 <span
class="math inline">\(2\)</span> 类矩形构成。不难发现，对于单个的 <span
class="math inline">\(1\)</span> 或 <span
class="math inline">\(2\)</span> 类矩形，一定满足条件。如果在 <span
class="math inline">\(1\)</span> 类矩形的左边或右边拼上一个 <span
class="math inline">\(2\)</span>
类矩形，仍然满足条件，反之亦然；如果在一个 <span
class="math inline">\(1\)</span> 类矩形的上方或下方拼上一个 <span
class="math inline">\(2\)</span> 类矩形，仍然满足条件，反之亦然。</p>
<p>那么对于每 <span class="math inline">\(2\)</span> 行，每 <span
class="math inline">\(2\)</span> 列，交替填入 <span
class="math inline">\(1\)</span> 类或 <span
class="math inline">\(2\)</span> 类矩形就得到答案了。</p>
<h3 id="code-1">CODE</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> SB1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> SB2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">solve1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>fg1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">,</span>fg1<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>fg2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">,</span>fg2<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 注意原本两行算一行，两列算一列</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>fg1<span class="token operator">&amp;&amp;</span>fg2<span class="token operator">||</span><span class="token operator">!</span>fg1<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>fg2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 在奇数行中，奇数个放 1 类</span>
                <span class="token comment">// 在偶数行中，偶数个放 1 类</span>
                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>SB1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>SB1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                ans<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>SB1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>SB1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>fg1<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>fg2<span class="token operator">||</span><span class="token operator">!</span>fg1<span class="token operator">&amp;&amp;</span>fg2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 在奇数行中，偶数个放 2 类</span>
                <span class="token comment">// 在偶数行中，奇数个放 2 类</span>
                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>SB2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>SB2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                ans<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>SB2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>SB2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">,</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">solve1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="c.-the-third-problem">C. The Third Problem</h2>
<h3 id="分析-2">分析</h3>
<p><span
class="math inline">\(\operatorname{MEX}\)</span>，完全不会啊！</p>
<p>首先对于任意 <span class="math inline">\(l,r \in [1,n]\)</span>，满足
<span class="math display">\[
\operatorname{MEX}([a_l,a_{l+1},\ldots,a_r])=\operatorname{MEX}([b_l,b_{l+1},\ldots,b_r])
\]</span> 这表明，假如他们的值为 <span
class="math inline">\(x\)</span>，那么 <span
class="math inline">\([1,x-1]\)</span> 一定都在 <span
class="math inline">\([l,r]\)</span> 中出现过了。</p>
<p>设 <span class="math inline">\(p(x)\)</span> 表示 <span
class="math inline">\(x\)</span> 在 <span
class="math inline">\(a\)</span> 中的位置，由于是 <span
class="math inline">\([0,n-1]\)</span>
的排列，所以为了防止混淆，下文无论是数字都是 <span
class="math inline">\([0,n-1]\)</span> 中的。</p>
<p>尝试直接构造 <span class="math inline">\(b\)</span>。首先，<span
class="math inline">\(a\)</span> 与 <span
class="math inline">\(b\)</span> 中 <span
class="math inline">\(0\)</span> 的位置是不能变化的，否则 <span
class="math inline">\(\operatorname{MEX} ([a_{p(0)},a_{p(0)}])\)</span>
必然不同于 <span class="math inline">\(\operatorname{MEX}
([b_{p(0)},b_{p(0)}])\)</span>。<span class="math inline">\(1\)</span>
的位置也不能变化，可以轻松构造例子，不再赘述。</p>
<p>设当前区间为 <span class="math inline">\(l,r\)</span>，假设 <span
class="math inline">\(p(0)&lt; p(1)\)</span>，起初 <span
class="math inline">\(l=p(0)\)</span>，<span
class="math inline">\(r=p(1)\)</span>。</p>
<p>如果 <span class="math inline">\(p(2) \in [l,r]\)</span>，那么 <span
class="math inline">\(2\)</span> 放在哪里都可以。因为此时这个区间的
<span class="math inline">\(\operatorname{MEX}\)</span> 已经和 <span
class="math inline">\(0,1,2\)</span> 无关了，由于 <span
class="math inline">\(0,1\)</span> 已经被确定，方案数累乘 <span
class="math inline">\((r-l+1) -2\)</span>。如果 <span
class="math inline">\(p(2)&lt;p(0)\)</span> 或者 <span
class="math inline">\(p(2)&gt;p(1)\)</span> 呢？那就令 <span
class="math inline">\(l=p(2)\)</span> 或者 <span
class="math inline">\(r=p(2)\)</span>。同时对方案数没有贡献，因为只要
<span class="math inline">\(2\)</span> 不在 <span
class="math inline">\(b_{p(2)}\)</span>
的位置，一定不合法，同样很容易找出例子。</p>
<p>接下来，如果 <span class="math inline">\(p(3) \in
[l,r]\)</span>，那么分两种情况讨论</p>
<ul>
<li>在上一轮中，<span class="math inline">\(p(2) \in
[l&#39;,r&#39;]\)</span>，那么此时 <span
class="math inline">\([l&#39;,r&#39;] = [l,r]\)</span>，确定了 <span
class="math inline">\(0,1,2\)</span> 的位置，<span
class="math inline">\(3\)</span> 只有 <span
class="math inline">\((r-l+1) - 3\)</span> 种选择，累乘即可。</li>
<li>在上一轮中，<span class="math inline">\(p(2) \notin
[l,r]\)</span>，那么区间的边界一定会变化并让 <span
class="math inline">\(p(2)\)</span> 在新区间的一端，仍然确定了 <span
class="math inline">\(0,1,2\)</span>，累乘 <span
class="math inline">\((r-l+1)-3\)</span>。</li>
</ul>
<p>如果 <span class="math inline">\(p(3) \neq
[l,r]\)</span>，修改区间就行了。</p>
<p>以此类推，最终就能得到答案。</p>
<h3 id="code-2">CODE</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll ans<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token keyword">int</span> l<span class="token operator">=</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token operator">=</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>l<span class="token punctuation">)</span> l<span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>r<span class="token punctuation">)</span> r<span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">(</span>ans<span class="token operator">*=</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="d.-almost-triple-deletions">D. Almost Triple Deletions</h2>
<p>先证明一个结论，如果一个区间 <span
class="math inline">\([l,r]\)</span>，满足 <span
class="math inline">\(a_l \ldots a_r\)</span>
能够用题目中的操作完全删去，那么一定满足 <span
class="math inline">\(r-l+1\)</span> 是偶数且 <span
class="math inline">\([l,r]\)</span>
中出现次数最多的数，其出现次数不超过 <span
class="math inline">\(\frac{r-l+1}{2}\)</span>。</p>
<blockquote>
<p>证明：</p>
<p>每一次操作只能选择 <span class="math inline">\(2\)</span> 个数，如果
<span class="math inline">\(r-l+1\)</span>
是个奇数，显然不行。而每次操作只能选择 <span
class="math inline">\(2\)</span> 个不同的数，如果某个数出现次数超过了
<span
class="math inline">\(\frac{r-l+1}{2}\)</span>，那么将这个数与一个与它不想等的数两两配对后，会只剩下这个数，无法进行操作。</p>
</blockquote>
<p>考虑 <span class="math inline">\(DP\)</span>。</p>
<p>设 <span class="math inline">\(f(i)\)</span> 为由 <span
class="math inline">\([1,i-1]\)</span> 某些子序列和 <span
class="math inline">\(a_i\)</span> 构成的最终序列的长度。初始时，如果
<span class="math inline">\([1,i-1]\)</span> 能够完全删去，<span
class="math inline">\(f(i)=1\)</span>，表示长度为 <span
class="math inline">\(1\)</span> 的序列。否则 <span
class="math inline">\(f(i)=0\)</span>，表示长度为 <span
class="math inline">\(0\)</span> 的子序列。</p>
<p>转移，枚举 <span class="math inline">\(j \in [i+1,n+1]\)</span>，如果
<span class="math inline">\(a_i = a_j\)</span> 并且 <span
class="math inline">\([i+1,j-1]\)</span> 这一段能够完全消掉，那么就能将
<span class="math inline">\(a_j\)</span> 放在 <span
class="math inline">\(a_i\)</span> 后面，<span
class="math inline">\(f(j) = f(i) +1\)</span>。需要注意的是 <span
class="math inline">\(i\)</span> 必须满足 <span
class="math inline">\(f(i) &gt; 0\)</span>
，因为最终序列只能由相同数字构成，而上述转移让 <span
class="math inline">\(j\)</span> 从 <span
class="math inline">\(i+1\)</span> 开始，默认了 <span
class="math inline">\([i,i-1]\)</span> 这部分能被消去。</p>
<p>特别地，当 <span class="math inline">\(j=n+1\)</span> 时，如果 <span
class="math inline">\([i+1,n]\)</span> 能被消去，就让 <span
class="math inline">\(f(n+1)=f(i) +1\)</span>。最终答案是 <span
class="math inline">\(f(n+1)-1\)</span>。</p>
<p>为啥要这么干？因为状态时这样设计的，核心思想是将两个想等元素之间所有元素消除之后，让这两个元素使得答案序列长度
<span class="math inline">\(+1\)</span>。</p>
<h3 id="code-3">CODE</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> most_element<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>most_element<span class="token operator">&lt;=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        most_element<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>most_element<span class="token punctuation">,</span><span class="token operator">++</span>cnt<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> awa<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>awa<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>awa<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>awa<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        most_element<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>most_element<span class="token operator">&lt;=</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>j<span class="token operator">==</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            most_element<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>most_element<span class="token punctuation">,</span><span class="token operator">++</span>cnt<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="e.-three-days-grace">E. Three Days Grace</h2>
<p>太菜了看都没看。</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>构造</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1349A Orac and LCM 题解</title>
    <url>/2022/cf1349a-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="分析">分析</h2>
<p><span class="math display">\[
\gcd_{i,j \in [1,n] \text{ and } i&lt; j} \{
\operatorname{lcm}(a_i,a_j)  \}
\]</span></p>
<span id="more"></span>
<p><span class="math display">\[
\gcd_{i,j \in [1,n] \text{ and } i &lt; j} \{  \frac{a_i
\cdot  a_j}{\gcd(a_i,a_j)} \}
\]</span></p>
<p>两两元素的最大公约数就是整个序列的最大公约数。<span
class="math inline">\(\gcd(ka,kb)=k \gcd(a,b)\)</span>。 <span
class="math display">\[
\frac{\gcd_{i,j \in [1,n] \text{ and } i &lt; j} \{a_i,a_j \} }{\gcd \{
a_1,a_2 \ldots a_n \}}
\]</span> 对于 <span class="math inline">\(i \in
[1,n]\)</span>，它对分数线上面的式子的贡献是 <span
class="math inline">\(\gcd(a_i,a_{i+1} \ldots
a_{n})\)</span>，预处理后缀 <span class="math inline">\(\gcd\)</span>
即可。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll <span class="token function">gcd</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> y<span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token operator">%</span>y<span class="token punctuation">)</span><span class="token operator">:</span>x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
ll <span class="token function">lcm</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token operator">/</span><span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">*</span>y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
ll <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ll a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>d<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token operator">/</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>luogu4042 骑士游戏 题解</title>
    <url>/2022/lg4042-solution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="前言">前言</h2>
<p>好久之前就见过的题，那时候不求甚解地把代码写上，认为自己已经明白了。</p>
<p>之后经历的那些事情，让我越发怀疑自己对所有东西的认识。经常想起这道题，因为「偷来的
AC」，我难以原谅自己。</p>
<p>不过，这一切都已经过去了。那么差劲的自己，那么单纯的想法。</p>
<span id="more"></span>
<p>一年来，相对于大部分人，我的进步实在是太少了。在这个人均初三 D 类 Ag
的年代，进队是不要想了。</p>
<p>我只想，把 OI 当作爱好。正因如此，我永远不会自称为
OIer；同时，我也永远不会再为它黯然神伤。</p>
<h2 id="分析">分析</h2>
<p>DP。设 <span class="math inline">\(f(i)\)</span> 为杀死怪物 <span
class="math inline">\(i\)</span>
以及它直接或间接生成的怪物的最小代价。</p>
<p>只有魔法攻击才能杀死怪物，<span class="math inline">\(f(i)\)</span>
的初始值为用魔法攻击杀死它的代价。</p>
<p>由于物理攻击杀死某个怪物后，又会生成很多怪物，而再杀死它们之后，又会再次生成其他怪物。无论怎样设计状态都必定存在环，只能从转移下手。</p>
<p>把怪物抽象成节点，如果杀死 <span class="math inline">\(x\)</span>
生成 <span class="math inline">\(y\)</span>，那么连边 <span
class="math inline">\((x \rightarrow y)\)</span>。设 <span
class="math inline">\(ph(x)\)</span> 为用物理攻击杀死 <span
class="math inline">\(x\)</span> 的代价。</p>
<p>对于 <span class="math inline">\(x\)</span>，求出用魔法攻击杀死 <span
class="math inline">\(x\)</span> 与生成的 <span
class="math inline">\(y\)</span> 的总代价 <span
class="math inline">\(z\)</span>。 <span class="math display">\[
z=ph(x) + \sum_{(x \rightarrow y)} f(y)
\]</span> 转移 <span class="math display">\[
f(x) = \min{(f(x),z)}
\]</span> 放在 SPFA 的过程中转移即可。</p>
<p>看着似乎没问题，但是有环图没有拓扑序，没有固定的转移顺序。考虑到 SPFA
中的队列，本质上是已经进行完一轮迭代之后，能够用到这些信息且不在队列中的点。那么再本题中就要将依赖于
<span class="math inline">\(f(x)\)</span> 的点加入队列，也就是将所有
<span class="math inline">\((u \rightarrow x)\)</span> 的 <span
class="math inline">\(u\)</span> 加入队列。</p>
<p>方法是建立一张反图，对于杀死 <span class="math inline">\(x\)</span>
生成 <span class="math inline">\(y\)</span>，加边 <span
class="math inline">\((y \rightarrow x)\)</span>。如果更新了 <span
class="math inline">\(f(x)\)</span>，将其加入队列即可。一开始则要把所有节点加入队列，因为每个点都能够更新其它点。</p>
<h2 id="code">CODE</h2>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> c<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cc<span class="token punctuation">,</span> hh<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ot<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> txn<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ph<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> to<span class="token punctuation">[</span><span class="token operator">++</span>c<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dda</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ot<span class="token punctuation">[</span><span class="token operator">++</span>cc<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> txn<span class="token punctuation">[</span>cc<span class="token punctuation">]</span><span class="token operator">=</span>hh<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> hh<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cc<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        ll z<span class="token operator">=</span>ph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> z<span class="token operator">+=</span>f<span class="token punctuation">[</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">></span>z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>hh<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>txn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>ot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> v<span class="token punctuation">[</span>ot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">dda</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>二分图匹配简单题 题解</title>
    <url>/2022/graph-solution-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>写一下近期写的简单二分图题目的题解。</p>
<span id="more"></span>
<h2 id="luogu3967-匹配">luogu3967 匹配</h2>
<h3 id="分析">分析</h3>
<p><span class="math inline">\(TJOI\)</span> 板子题 <span
class="math inline">\(\times 1\)</span>。</p>
<p>找出所有完美匹配的交集，意思是无论任何完美匹配都包含这些边，反过来，如果没有这些边中任意一边，都不存在完美匹配。</p>
<p>由于数据范围小，直接用 DFS 版的 <span
class="math inline">\(KM\)</span>
算法求出带权最大匹配。然后枚举每一条匹配边， 把它的边权置为 <span
class="math inline">\(0\)</span>，表示删去它。如果此时求出的带权最大匹配小于之前求出的带权最大匹配，那么这条边就是必须包含的边。</p>
<h3 id="code">CODE</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span> inf<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> dlt<span class="token punctuation">,</span> match<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> la<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> lb<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> slack<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll Ans<span class="token punctuation">;</span>
<span class="token keyword">bool</span> va<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> vb<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span>node b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	va<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>y<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vb<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>la<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>lb<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			vb<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">||</span><span class="token function">dfs</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> slack<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>slack<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>la<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>lb<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
ll <span class="token function">KM</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		la<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>inf<span class="token punctuation">,</span> lb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		match<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> la<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>la<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">memset</span><span class="token punctuation">(</span>va<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">memset</span><span class="token punctuation">(</span>vb<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> slack<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>inf<span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		dlt<span class="token operator">=</span>inf<span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vb<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dlt<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dlt<span class="token punctuation">,</span>slack<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>va<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> la<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-=</span>dlt<span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>vb<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> lb<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dlt<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> ans<span class="token operator">+=</span>la<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>lb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>Ans<span class="token operator">=</span><span class="token function">KM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>match<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// match在之后的KM算法中要被修改，所以记录原来的匹配边，</span>
	<span class="token keyword">int</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> x<span class="token operator">=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>i<span class="token punctuation">,</span> d<span class="token operator">=</span>w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
		w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">KM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>Ans<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			p<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">,</span> p<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token operator">+</span>tot<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 要求排序再输出</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>tot<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="luogu4304-攻击装置">luogu4304 攻击装置</h2>
<h3 id="分析-1">分析</h3>
<p><span class="math inline">\(TJOI\)</span> 板子题 <span
class="math inline">\(\times 2\)</span>。这个貌似和网络流 24
题中的骑士共存问题很想，不是那么板，但是只要会跑最大匹配就能过。</p>
<p>首先观察这个东西的攻击范围，不难发现，对于 <span
class="math inline">\((x,y)\)</span>，它能够攻击的点的横纵坐标相加一定与
<span class="math inline">\(x+y\)</span>
异奇偶。于是乎直接将横纵坐标相加为奇数的看作左部点，偶数的为右部点。为了防止重复计数，钦定如果
<span class="math inline">\((x,y)\)</span>
为左部点且能够放置，那么由它向能够攻击到的右部点连边。</p>
<figure>
<img data-src="https://cdn.luogu.com.cn/upload/image_hosting/1q57l20q.png"
alt="借用洛谷题解上的图片，侵删" />
<figcaption aria-hidden="true">借用洛谷题解上的图片，侵删</figcaption>
</figure>
<p>由于放置的装置不能互相攻击，等价于选出这张二分图的最大独立集。用能够放置的点数减去最大匹配的边数即可。</p>
<p>左部节点有 <span class="math inline">\(\frac{n}{2}\)</span>
个，每个左部节点能够向攻击到的点连 <span
class="math inline">\(8\)</span> 条无向边，所以存边的数组要开 <span
class="math inline">\(8\)</span> 倍的 <span
class="math inline">\(n^2\)</span>。洛谷的数据不太强，数组开 <span
class="math inline">\(1\)</span> 倍 <span
class="math inline">\(n^2\)</span> 的空间然后连有向边就能过，建议去
AcWing 上提交。</p>
<h3 id="code-1">CODE</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> T<span class="token operator">=</span><span class="token number">205</span><span class="token punctuation">,</span> N<span class="token operator">=</span><span class="token number">400005</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> dy<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> times<span class="token punctuation">,</span> a<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tot<span class="token punctuation">,</span> match<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">[</span><span class="token number">8</span><span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span><span class="token number">8</span><span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 8倍空间</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> to<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> y<span class="token operator">=</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>times<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>times<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">||</span><span class="token function">dfs</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">xiongyali</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 从左部点 DFS</span>
        <span class="token operator">++</span>times<span class="token punctuation">;</span>
        res<span class="token operator">+=</span><span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%1d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>m<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 放置重复，只从左部点开始连边</span>
            <span class="token keyword">int</span> x<span class="token operator">=</span>i<span class="token operator">+</span>dx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>j<span class="token operator">+</span>dy<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>y<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>m<span class="token operator">-</span><span class="token function">xiongyali</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="luogu3033-cow-steeplechase">luogu3033 Cow Steeplechase</h2>
<h3 id="分析-2">分析</h3>
<p>首先两条线段如果平行，那么必定没有交点。那么把竖着的线段作为左部点，横着的线段作为右部点。那么同一个点集内没有边，左部点
<span class="math inline">\(i\)</span> 与右部点 <span
class="math inline">\(j\)</span>
最多有一条匹配边，符合二分图匹配模型。</p>
<p>钦定 <span class="math inline">\(x_{i,1} \le x_{i,2}\)</span>，<span
class="math inline">\(y_{i,1} \le y_{i,2}\)</span>。</p>
<p>对于线段 <span
class="math inline">\((x_{i,1},y_{i,1})\)</span>，<span
class="math inline">\((x_{i,2},y_{i,2})\)</span> 和 <span
class="math inline">\((x_{j,1},y_{j,1})\)</span>，<span
class="math inline">\((x_{j,2},y_{j,2})\)</span>，它们相交的条件是</p>
<ol type="1">
<li><span class="math inline">\(i\)</span> 是竖着的边，<span
class="math inline">\(j\)</span> 是横着的边。那么要满足 <span
class="math inline">\(x_{i,1} \ge x_{j,1}\)</span> 且 <span
class="math inline">\(y_{i,1} \le y_{j,1}\)</span> 且 <span
class="math inline">\(x_{i,2} \le x_{j,2}\)</span> 且 <span
class="math inline">\(y_{i,2} \ge y_{j,2}\)</span>。</li>
<li><span class="math inline">\(i\)</span> 是横着的边，<span
class="math inline">\(j\)</span>
是竖着的边。那么就把上面的符号反过来。</li>
</ol>
<p>选出最多的不相交线段，等价于二分图最大独立集。</p>
<h3 id="code-2">CODE</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x1<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> y11<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> x2<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> y2<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tot<span class="token punctuation">,</span> match<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> l<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> to<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> y<span class="token operator">=</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        v<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">||</span><span class="token function">dfs</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">xiongyali</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token operator">+=</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        x1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y11<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>x2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>x2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>y11<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>y2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>y11<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>y2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>x2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>m<span class="token punctuation">,</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// m是左部点数量，也就是竖着的边</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>x1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>y11<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>y11<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>x2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>x2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>y2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>y2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>x1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>y11<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>y11<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>x2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>x2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>y2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>y2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token function">add</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token function">xiongyali</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="luogu4589-智力竞赛">luogu4589 智力竞赛</h2>
<h3 id="分析-3">分析</h3>
<p><span class="math inline">\(TJOI\)</span> 板子题 <span
class="math inline">\(\times 3\)</span>。</p>
<p>首先明确，每个人答题顺序一定是一条简单路径，可以有人答相同的题目。而且所有题目构成一个
DAG。</p>
<p>好了，DAG 最小路径可重复点覆盖。</p>
<p>二分答案，找到一个 <span class="math inline">\(mid\)</span>
表示只能回答价值小于 <span class="math inline">\(mid\)</span>
的问题。如果求得的路径条数小于 <span
class="math inline">\(n+1\)</span>（亲友团加上小明），那么说明可行。特别的，如果回答所有问题也能满足条件的话，输出<code>AK</code>。</p>
<h3 id="code-3">CODE</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">505</span><span class="token punctuation">,</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> T<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> match<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>y<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span>T<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        vis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>T<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">||</span><span class="token function">dfs</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> match<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> match<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>x<span class="token punctuation">)</span> d<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans<span class="token operator">=</span>cnt<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnt<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>
        <span class="token operator">++</span>T<span class="token punctuation">;</span> ans<span class="token operator">-=</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> ans<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        r<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>
                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">|=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>inf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"AK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> l<span class="token operator">=</span>mid<span class="token punctuation">;</span> <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>二分图</tag>
      </tags>
  </entry>
</search>
